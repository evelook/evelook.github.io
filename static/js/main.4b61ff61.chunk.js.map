{"version":3,"sources":["feature/notifier/notifierActions.ts","component/Notifier/Notifier.tsx","context/DepsContext/DepsContext.tsx","component/AppBar/AppBar.tsx","component/Home/RSSContent/RSSContent.tsx","component/Home/RSSSkeleton/RSSSkeleton.tsx","component/Home/RSSPaper/RSSPaper.tsx","component/Home/HomeSearch/HomeSearch.tsx","component/StatusCheck/StatusCheck.tsx","feature/notifier/notifierKeys.ts","component/Home/Home.tsx","repository/SearchRepository/RepoCategory.ts","component/LoadingFullPage/LoadingFullPage.tsx","component/Search/SearchForm/SearchForm.tsx","component/Search/ResultTable/ResultTable.tsx","component/Search/ResultContainer/ResultContainer.tsx","component/ApiErrorFullPage/ApiErrorFullPage.tsx","component/Search/SearchResult/SearchResult.tsx","component/Search/SearchEmpty/SearchEmpty.tsx","component/Search/Search.tsx","component/AllianceInfo/CorpListTable/CorpListTable.tsx","component/AllianceInfo/AllianceInfoContent/AllianceInfoContent.tsx","component/AllianceInfo/AllianceInfo.tsx","component/CharacterInfo/CorpHistoryTable/CorpHistoryTable.tsx","component/EntityDescription/EntityDescription.tsx","component/CharacterInfo/CharacterInfoContent/CharacterInfoContent.tsx","component/CharacterInfo/CharacterInfo.tsx","component/ConstellationInfo/ConstellationInfo.tsx","component/CorporationInfo/AllianceHistoryTable/AllianceHistoryTable.tsx","component/CorporationInfo/CorporationInfoContent/CorporationInfoContent.tsx","component/CorporationInfo/CorporationInfo.tsx","component/TypeInfo/TypeInfo.tsx","component/RegionInfo/RegionInfo.tsx","component/SystemInfo/SystemInfo.tsx","component/StationInfo/StationInfo.tsx","component/FactionInfo/FactionInfo.tsx","component/RaceInfo/RaceInfo.tsx","component/AncestryInfo/AncestryInfo.tsx","component/BloodlineInfo/BloodlineInfo.tsx","component/Test/Test.tsx","component/Dashboard/Dashboard.tsx","component/MyApp/MyApp.tsx","feature/drawer/drawerSlice.ts","feature/theme/themeSlice.ts","feature/notifier/notifierSlice.ts","reducer.ts","store.ts","serviceWorker.ts","service/EsiClient/EsiClient.ts","service/EsiErrorManager/EsiErrorManager.ts","service/QueryFactory/Query.ts","service/QueryFactory/QueryFactory.ts","error/EsiError/EsiError.ts","service/Call/StatusCall/StatusCall.ts","service/Call/UniverseNamesCall/UniverseNamesCall.ts","service/Call/AllianceListCall/AllianceListCall.ts","service/Call/AllianceInfoCall/AllianceInfoCall.ts","repository/NameRepository/NameRepository.ts","service/Call/AllianceCorporationsCall/AllianceCorporationsCall.ts","service/Call/PublicSearchCall/PublicSearchCall.ts","repository/AllianceRepository/AllianceRepository.ts","service/Call/PublicSearchCall/EsiCategory.ts","repository/SearchRepository/SearchRepository.ts","service/Call/CharacterInfoCall/CharacterInfoCall.ts","service/Call/ConstellationInfoCall/ConstellationInfoCall.ts","service/Call/CorporationInfoCall/CorporationInfoCall.ts","service/Call/TypeInfoCall/TypeInfoCall.ts","service/Call/RegionInfoCall/RegionInfoCall.ts","service/Call/SystemInfoCall/SystemInfoCall.ts","service/Call/StationInfoCall/StationInfoCall.ts","service/Call/FactionCall/FactionCall.ts","service/Call/AncestryCall/AncestryCall.ts","service/Call/BloodlineCall/BloodlineCall.ts","repository/AncestryRepository/AncestryRepository.ts","repository/AbstractRepository/AbstractRepository.ts","repository/BloodlineRepository/BloodlineRepository.ts","repository/CharacterRepository/CharacterRepository.ts","service/Call/RaceCall/RaceCall.ts","repository/RaceRepository/RaceRepository.ts","service/Call/CharacterCorpHistoryCall/CharacterCorpHistoryCall.ts","service/DateFormatter/DateFormatter.ts","service/Call/CorporationAllianceHistoryCall/CorporationAllianceHistoryCall.ts","repository/CorporationRepository/CorporationRepository.ts","repository/FactionRepository/FactionRepository.ts","repository/RSSRepository/RSSRepository.ts","repository/StatusRepository/StatusRepository.ts","service/Container/Container.ts","index.tsx"],"names":["ENQUEUE_SNACKBAR","CLOSE_ONE","CLOSE_ALL","REMOVE_SNACKBAR","enqueueSnackbar","notification","key","options","type","Date","getTime","Math","random","closeOne","displayed","Notifier","dispatch","useDispatch","notifications","useSelector","store","notifier","useSnackbar","closeSnackbar","useEffect","forEach","id","message","dismissed","includes","onClose","event","reason","myKey","onExited","Number","removeOne","filter","DepsContext","createContext","useDeps","useContext","DepsProvider","children","container","Provider","value","useStyles","makeStyles","theme","createStyles","root","display","appBar","breakpoints","up","width","marginLeft","menuButton","marginRight","spacing","AppBar","title","Fragment","useTheme","classes","toolbarVariant","useMediaQuery","position","className","Toolbar","variant","IconButton","color","aria-label","edge","onClick","Typography","noWrap","buttonLinkParent","right","gridItem","down","paddingTop","RSSContent","entries","isSmall","dateFormatter","length","splice","map","entry","index","ListItem","ListItemText","primary","secondary","onlyDate","publishingDate","primaryTypographyProps","ListItemSecondaryAction","target","href","link","RSSSkeleton","Skeleton","height","cardTitle","paddingLeft","RSSPaper","source","useState","paperContent","setPaperContent","then","catch","e","console","log","Grid","item","xs","md","Paper","List","dense","textFieldElement","params","TextField","fullWidth","label","InputProps","endAdornment","InputAdornment","HomeSearch","searchOptions","setSearchOptions","searchInProgress","setSearchInProgress","searchTextRef","useRef","searchRepository","filterOptions","createFilterOptions","limit","Autocomplete","freeSolo","disableClearable","onInputChange","forAutocomplete","names","finally","ref","renderInput","colorBlack","StatusCheck","statusRepository","isEveOnline","isOnline","action","onClickCallback","closeOneSnackbarAction","Button","style","anchorOrigin","horizontal","vertical","autoHideDuration","preventDuplicate","enqueueSnackbarAction","content","flexDirection","justifyContent","flexGrow","padding","footerText","paddingBottom","searchGridItem","minWidth","paddingRight","toolbar","minHeight","Home","props","rssRepository","direction","justify","alignItems","getEveNewsFeed","getDevBlogsFeed","getPatchNotesFeed","align","repoCategories","circularProgress","marginTop","LoadingFullPage","CircularProgress","form","marginBottom","filledGrid","emptyGrid","selectGridItem","order","textGridItem","emptyGridItem","checkGridItem","SearchForm","category","needle","strict","history","useHistory","categoryValue","setCategoryValue","strictValue","setStrictValue","searchTextErrorText","setSearchTextErrorText","searchTextIsError","setSearchTextIsError","submit","searchTextElement","current","text","replace","String","autoComplete","sm","FormControl","InputLabel","Select","labelId","onChange","MenuItem","error","helperText","onKeyPress","inputRef","defaultValue","FormControlLabel","control","Checkbox","checked","name","arrowRightIconStyle","verticalAlign","emptyIconCell","ResultTable","data","denseTable","tableOptions","download","elevation","filterType","print","responsive","rowsPerPage","rowsPerPageOptions","search","selectableRows","setTableProps","size","viewColumns","columns","sort","customHeadLabelRender","customBodyRender","tableMeta","updateValue","rowData","component","Link","to","setCellProps","ResultContainer","resultData","maxWidth","Alert","severity","ApiErrorFullPage","retry","AlertTitle","SearchResult","resultComponent","setResultComponent","setRetry","publicSearch","SearchEmpty","Search","query","URLSearchParams","useLocation","queryCategory","get","queryStrict","queryNeedle","fixedHeader","rowHover","CorpListTable","corpList","customHeadRender","corpID","push","buttonCell","gridContainer","gridWithTable","logo","textAlign","nameCell","backgroundColor","palette","main","contrastText","AllianceInfoContent","alt","src","TableContainer","Table","TableBody","TableRow","TableCell","colSpan","ticker","creator_name","creator_id","creator_corporation_name","creator_corporation_id","date_founded","undefined","executor_corporation_name","executor_corporation_id","faction_name","faction_id","corporations","AllianceInfo","apiResult","setApiResult","allianceRepository","useParams","getOne","styles","corpImg","extractCorpID","CorpHistoryTable","withDateTime","EntityDescription","paragraphs","bio","split","paragraph","entityLogoCell","entityLogoGrid","entityLogoImg","bioCell","successColorText","success","errorColorText","CharacterInfoContent","corporation_id","corporation_name","alliance_name","alliance_id","birthday","security_status","race_name","ancestry_id","ancestry_name","bloodline_name","gender","toUpperCase","substr","description","corporation_history","CharacterInfo","characterRepository","ConstellationInfo","allianceImg","extractAllianceID","AllianceHistoryTable","alliances","isDeleted","start","end","whiteSpace","noWrapCell","CorporationInfoContent","ceo_id","ceo_name","member_count","home_station_id","home_station_name","tax_rate","shares","war_eligible","url","alliance_history","CorporationInfo","corporationRepository","TypeInfo","RegionInfo","SystemInfo","StationInfo","FactionInfo","RaceInfo","AncestryInfo","BloodlineInfo","snackbarAction","Test","closeAllSnackbar","drawer","flexShrink","drawerPaper","logoText","fontFamily","join","fontWeight","textDecoration","darkModeToggle","nested","ResponsiveDrawer","window","mobileOpen","state","darkMode","handleCloseDrawer","Divider","FormGroup","row","button","ListItemIcon","document","body","Hidden","lgUp","implementation","Drawer","anchor","open","paper","ModalProps","keepMounted","mdDown","exact","path","createMuiTheme","MyApp","ThemeProvider","CssBaseline","initialState","rootReducer","combineReducers","actionNotification","createStore","Boolean","location","hostname","match","EsiClient","fetchClient","esiErrorManager","_baseUrl","_userAgent","_fetchClient","_esiErrorManager","this","endUrl","method","isErrorWindowBroken","Error","headers","cache","uri","isEmpty","concat","toString","JSON","stringify","response","saveErrorWindowInfo","ok","status","flagWindowAsBroken","incrementError","EsiErrorManager","_errorReset","now","_errorRemain","_resetErrorWindow","limitReset","limitRemain","headerErrorReset","headerErrorRemain","Query","spaceDelimiter","_spaceDelimiter","_query","attribute","values","Object","keys","queryString","hasOwnProperty","encodeURIComponent","QueryFactory","EsiError","statusText","StatusCall","esiClient","_esiClient","_url","a","getResponse","json","UniverseNamesCall","ids","AllianceListCall","AllianceInfoCall","_getUrl","NameRepository","universeNamesCaller","_universeNamesCaller","_removeBannedIDs","allResolvedIDs","failuresCount","maxAllowedFailures","chunks","chunk","localResolvedIDs","round","indexOf","AllianceCorporationsCall","PublicSearchCall","queryFactory","_queryFactory","searchString","categories","make","add","AllianceRepository","allianceListCall","allianceInfoCall","allianceCorpsCall","nameRepo","_allianceListCall","_allianceInfoCall","_allianceCorpsCall","_nameRepo","esiAlliancePromise","esiAllianceCorpsPromise","esiAlliance","repoAlliance","idsToResolve","_pushUnique","esiAllianceCorps","corpsNamesPromise","resolveGeneric","allianceNamesPromise","resolvedName","corpName","allianceIDs","resolved","unresolved","inputArray","esiCategories","SearchRepository","publicSearchCall","_publicSearchCall","categoriesForCall","_composeResult","uniNames","justNames","lowercaseSearchString","toLowerCase","uniName","startsWith","orderedNames","b","result","prettyCategory","CharacterInfoCall","ConstellationInfoCall","CorporationInfoCall","TypeInfoCall","RegionInfoCall","SystemInfoCall","StationInfoCall","FactionCall","AncestryCall","BloodlineCall","AncestryRepository","ancestryCall","_ancestryCall","ancestries","foundAncestry","ancestry","AbstractRepository","BloodlineRepository","bloodlineCall","raceRepo","_bloodlineCall","_raceRepo","_getEsiBloodline","foundBloodline","race_id","ship_type_id","raceNamePromise","getName","_getIDsToResolve","indexedNames","_orderNamesByID","ship_type_name","bloodlines","bloodline","bloodline_id","CharacterRepository","characterInfoCall","characterCorpHistoryCall","ancestryRepo","bloodlineRepo","_characterInfoCall","_characterCorpHistoryCall","_ancestryRepo","_bloodlineRepo","esiCharPromise","repoCorpHistoryPromise","_getCorpHistory","esiChar","repoChar","ancestryPromise","bloodlinePromise","namesPromise","racePromise","corpHistory","corp","is_deleted","repoCorpHistory","foundName","RaceCall","RaceRepository","raceCall","factionRepo","_raceCall","_factionRepo","esiRaces","repoRaces","esiRace","repoRace","_getEsiRace","foundRace","races","race","CharacterCorpHistoryCall","DateFormatter","date","yyyy","getUTCFullYear","mm","toStringWithLeadingZero","getUTCMonth","dd","getUTCDate","hr","getUTCHours","min","getUTCMinutes","sec","getUTCSeconds","CorporationAllianceHistoryCall","CorporationRepository","corpInfoCall","corpAllianceHistoryCall","_corpInfoCall","_corpAllianceHistoryCall","allianceHistoryPromise","getAllianceHistory","esiCorp","repoCorp","recordIDs","indexedCorpHistory","record","allianceNamePlaceholder","record_id","end_date","historyToReturn","i","start_date","unshift","FactionRepository","factionCall","_factionCall","esiFactions","repoFactions","esiFaction","_assembleRepoFaction","_getEsiFaction","foundFaction","factions","faction","militia_corporation_id","solar_system_id","militia_corporation_name","solar_system_name","RSSRepository","_fetch","fetch","StatusRepository","statusCall","_statusCall","players","Container","_esi","input","init","esi","allianceCorporationsCall","nameRepository","raceRepository","ancestryRepository","bloodlineRepository","corporationInfoCall","corporationAllianceHistoryCall","universeNamesCall","factionRepository","ReactDOM","render","StrictMode","maxSnack","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4b61ff61.chunk.js","sourcesContent":["import SnackbarNotificationInterface from \"./SnackbarNotificationInterface\";\n\nexport const ENQUEUE_SNACKBAR = 'ENQUEUE_SNACKBAR';\nexport const CLOSE_ONE = 'CLOSE_ONE';\nexport const CLOSE_ALL = 'CLOSE_ALL';\nexport const REMOVE_SNACKBAR = 'REMOVE_SNACKBAR';\n\nexport const enqueueSnackbar = (notification: SnackbarNotificationInterface) => {\n  const key = notification.options && notification.options.key;\n\n  return {\n    type: ENQUEUE_SNACKBAR,\n    notification: {\n      ...notification,\n      key: key || new Date().getTime() + Math.random(),\n    },\n  };\n};\n\nexport const closeOne = (key: number) => ({\n  type: CLOSE_ONE,\n  key,\n});\n\nexport const closeAll = () => ({\n  type: CLOSE_ALL,\n});\n\nexport const removeOne = (key: number) => ({\n  type: REMOVE_SNACKBAR,\n  key,\n});\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport { removeOne } from '../../feature/notifier/notifierActions'\nimport { RootState } from \"../../store\";\n\nlet displayed: number[] = [];\n\nexport default function Notifier() {\n  const dispatch = useDispatch();\n  const notifications = useSelector((store: RootState) => store.notifier.notifications);\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  const storeDisplayed = (id: number) => {\n    displayed = [...displayed, id];\n  };\n\n  const removeDisplayed = (id: number) => {\n    displayed = [...displayed.filter(key => id !== key)];\n  };\n\n  useEffect(() => {\n    notifications.forEach(({ key, message, options = {}, dismissed = false }) => {\n      if (dismissed) {\n        closeSnackbar(key);\n\n        return;\n      }\n\n      if (displayed.includes(key)) {\n        return;\n      }\n\n      enqueueSnackbar(message, {\n        key,\n        ...options,\n        onClose: (event, reason, myKey) => {\n          if (options.onClose) {\n            options.onClose(event, reason, myKey);\n          }\n        },\n        onExited: (event, myKey) => {\n          // remove this snackbar from redux store\n          let key = Number(myKey);\n          dispatch(removeOne(key));\n          removeDisplayed(key);\n        },\n      });\n\n      // keep track of snackbars that we've displayed\n      storeDisplayed(key);\n    });\n  }, [notifications, closeSnackbar, enqueueSnackbar, dispatch]);\n\n  return null;\n}\n","import React, { createContext, useContext } from \"react\";\nimport Container from \"../../service/Container/Container\";\n\nlet DepsContext = createContext({});\n\nexport function useDeps(): any {\n  return useContext(DepsContext);\n}\n\nexport function DepsProvider({children, container}: {children: any, container: Container}) {\n  return (\n    <DepsContext.Provider value={container}>\n      {children}\n    </DepsContext.Provider>\n  )\n}\n","import React from 'react';\nimport MUIAppBar from '@material-ui/core/AppBar';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport IconButton from '@material-ui/core/IconButton';\nimport { useDispatch } from 'react-redux';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Typography from '@material-ui/core/Typography';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n    },\n    appBar: {\n      [theme.breakpoints.up('lg')]: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth,\n      },\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n      [theme.breakpoints.up('lg')]: {\n        display: 'none',\n      },\n    },\n  }),\n);\n\nexport default function AppBar(\n  {\n    title = \"\",\n    children = <React.Fragment />\n  }: {\n    title: string,\n    children?: React.ReactNode\n  }\n) {\n  const theme = useTheme();\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n  const toolbarVariant = useMediaQuery(theme.breakpoints.up('sm')) ? \"dense\" : \"regular\";\n\n  return (\n    <MUIAppBar position=\"fixed\" className={classes.appBar}>\n      <Toolbar variant={toolbarVariant}>\n        <IconButton\n          color=\"inherit\"\n          aria-label=\"open drawer\"\n          edge=\"start\"\n          onClick={() => dispatch({type: 'drawer/mobileOpen'})}\n          className={classes.menuButton}\n        >\n          <MenuIcon />\n        </IconButton>\n        <Typography variant=\"h6\" noWrap>\n          {title}\n        </Typography>\n        {children}\n      </Toolbar>\n    </MUIAppBar>\n  );\n}\n","import React from 'react';\nimport RSSFeedEntryInterface from \"../../../repository/RSSRepository/RSSFeedEntryInterface\";\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport IconButton from '@material-ui/core/IconButton';\nimport {makeStyles, Theme, createStyles, useTheme} from '@material-ui/core/styles';\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport { useDeps } from \"../../../context/DepsContext/DepsContext\";\nimport DateFormatterInterface from \"../../../service/DateFormatter/DateFormatterInterface\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    buttonLinkParent: {\n      right: 0,\n    },\n    gridItem: {\n      [theme.breakpoints.down('xs')]: {\n        paddingTop: theme.spacing(3),\n      }\n    },\n  }),\n);\n\nexport default function RSSContent(\n  {\n    entries\n  }: {\n    entries: RSSFeedEntryInterface[]\n  }\n) {\n  const classes = useStyles();\n  let theme = useTheme();\n  let isSmall = useMediaQuery(theme.breakpoints.down('xs'));\n  let {\n    dateFormatter\n  }: {\n    dateFormatter: DateFormatterInterface\n  } = useDeps();\n\n  if (entries.length > 5) {\n    entries.splice(5, entries.length - 5);\n  }\n\n  return (\n    <React.Fragment>\n      {entries.map((entry, index) => {\n        return (\n          <ListItem key={index}>\n            <ListItemText\n              primary={entry.title}\n              secondary={dateFormatter.onlyDate(new Date(entry.publishingDate))}\n              primaryTypographyProps={ isSmall ? {} : { noWrap: true } }\n            />\n            <ListItemSecondaryAction className={classes.buttonLinkParent}>\n              <IconButton target=\"_blank\" href={entry.link}>\n                <ArrowRightIcon />\n              </IconButton>\n            </ListItemSecondaryAction>\n          </ListItem>\n        );\n      })}\n    </React.Fragment>\n  );\n}\n","import React, {ReactElement} from 'react';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport {ListItem} from \"@material-ui/core\";\n\nexport default function RSSSkeleton() {\n  return (\n    <React.Fragment>\n      <ListItem>\n        <Skeleton variant=\"rect\" width={\"100%\"} height={52} />\n      </ListItem>\n      <ListItem>\n        <Skeleton variant=\"rect\" width={\"100%\"} height={52} />\n      </ListItem>\n      <ListItem>\n        <Skeleton variant=\"rect\" width={\"100%\"} height={52} />\n      </ListItem>\n      <ListItem>\n        <Skeleton variant=\"rect\" width={\"100%\"} height={52} />\n      </ListItem>\n      <ListItem>\n        <Skeleton variant=\"rect\" width={\"100%\"} height={52} />\n      </ListItem>\n    </React.Fragment>\n  );\n}\n","import React, {useEffect, useState} from 'react';\nimport RSSFeedEntryInterface from \"../../../repository/RSSRepository/RSSFeedEntryInterface\";\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Paper from '@material-ui/core/Paper';\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport IconButton from '@material-ui/core/IconButton';\nimport {makeStyles, Theme, createStyles, useTheme} from '@material-ui/core/styles';\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport RSSContent from \"../RSSContent/RSSContent\";\nimport RSSSkeleton from \"../RSSSkeleton/RSSSkeleton\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    buttonLinkParent: {\n      right: 0,\n    },\n    cardTitle: {\n      paddingTop: theme.spacing(2),\n      paddingLeft: theme.spacing(3)\n    },\n    gridItem: {\n      [theme.breakpoints.down('xs')]: {\n        paddingTop: theme.spacing(3),\n      }\n    },\n  }),\n);\n\nexport default function RSSPaper(\n  {\n    title,\n    source\n  }: {\n    title: string,\n    source: () => Promise<RSSFeedEntryInterface[]>\n  }\n) {\n  const classes = useStyles();\n  const [paperContent, setPaperContent] = useState<React.ReactElement | null>(<RSSSkeleton />);\n\n  useEffect(() => {\n    source()\n      .then(entries => setPaperContent(<RSSContent entries={entries} />))\n      .catch(e => console.log(e));\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Grid item xs={12} md={4} className={classes.gridItem}>\n        <Paper>\n          <Typography variant=\"h6\" className={classes.cardTitle}>\n            {title}\n          </Typography>\n          <List dense={true}>\n            {paperContent}\n          </List>\n        </Paper>\n      </Grid>\n    </React.Fragment>\n  );\n}\n","import React, {ReactNode, ReactElement, useRef, useState, useEffect} from \"react\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport {AutocompleteRenderInputParams} from \"@material-ui/lab/Autocomplete/Autocomplete\";\nimport {AutocompleteInputChangeReason} from \"@material-ui/lab/useAutocomplete/useAutocomplete\";\n\nimport { useDeps } from \"../../../context/DepsContext/DepsContext\";\nimport SearchRepositoryInterface from \"../../../repository/SearchRepository/SearchRepositoryInterface\";\n\nconst textFieldElement = (params: AutocompleteRenderInputParams): ReactNode => {\n  return (\n    <TextField\n      {...params}\n      color=\"secondary\"\n      fullWidth\n      id=\"home-search-text\"\n      label=\"Search\"\n      variant=\"outlined\"\n      InputProps={{\n        ...params.InputProps,\n        type: 'search',\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <IconButton\n              aria-label=\"toggle password visibility\"\n              onClick={() => console.log(\"clicked\")}\n              edge=\"end\"\n            >\n              <SearchIcon />\n            </IconButton>\n          </InputAdornment>\n        )\n      }}\n    />\n  );\n};\n\nexport default function HomeSearch() {\n  let [searchOptions, setSearchOptions] = useState<string[]>([]);\n  let [searchInProgress, setSearchInProgress] = useState<boolean>(false);\n  let searchTextRef = useRef<HTMLInputElement | null>(null); // FIXME: maybe it's not needed?\n  let {\n    searchRepository\n  }: {\n    searchRepository: SearchRepositoryInterface\n  } = useDeps();\n  const filterOptions = createFilterOptions({\n    limit: 9,\n  });\n\n  const handleInputChange = (\n    event: React.ChangeEvent<{}>,\n    value: string,\n    reason: AutocompleteInputChangeReason\n  ): void => {\n    // reason = 'input' on manual typing\n    // reason = 'reset' after click on suggestion\n    console.log(value + \" - \" + reason);\n\n    // When the text box gets cleared with the \"x\" or when\n    // the user backspace without triggering new searches\n    if (value.length <= 3) {\n      setSearchOptions([]);\n\n      return;\n    }\n\n    if (\n      searchInProgress\n      || reason === \"reset\"\n      || value.length <= 3\n    ) {\n      return;\n    }\n\n    setSearchInProgress(true);\n    searchRepository.forAutocomplete(value, \"all\")\n      .then(names => {\n        setSearchOptions(names);\n      })\n      .catch(e => {\n\n      })\n      .finally(() => {\n        setSearchInProgress(false);\n      });\n  };\n\n  return (\n    <React.Fragment>\n      <Autocomplete\n        filterOptions={filterOptions}\n        freeSolo\n        id=\"free-solo-2-demo\"\n        disableClearable\n        onInputChange={handleInputChange}\n        options={searchOptions}\n        ref={searchTextRef}\n        renderInput={textFieldElement}\n      />\n    </React.Fragment>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from 'react-redux';\n\nimport { useDeps } from \"../../context/DepsContext/DepsContext\";\nimport StatusRepositoryInterface from \"../../repository/StatusRepository/StatusRepositoryInterface\";\nimport {\n  enqueueSnackbar as enqueueSnackbarAction,\n  closeOne as closeOneSnackbarAction\n} from '../../feature/notifier/notifierActions';import Button from \"@material-ui/core/Button\";\nimport { KEY_EVE_OFFLINE } from \"../../feature/notifier/notifierKeys\";\nimport SnackbarNotificationInterface from \"../../feature/notifier/SnackbarNotificationInterface\";\n\nconst colorBlack = { color: \"black\" };\n\nconst snackbarAction = (onClickCallback: () => void) => (\n  <React.Fragment>\n    <Button style={ colorBlack }>\n      CHECK\n    </Button>\n    <Button style={ colorBlack } onClick={onClickCallback}>\n      DISMISS\n    </Button>\n  </React.Fragment>\n);\n\nexport default function StatusCheck() {\n  const dispatch = useDispatch();\n  const enqueueSnackbar = (notification: SnackbarNotificationInterface) => dispatch(enqueueSnackbarAction(notification));\n  const closeSnackbar = (key: number) => dispatch(closeOneSnackbarAction(key));\n  const {\n    statusRepository\n  }: {\n    statusRepository: StatusRepositoryInterface\n  } = useDeps();\n\n  useEffect(() => {\n    statusRepository.isEveOnline()\n      .then(isOnline => {\n        if (!isOnline) {\n          enqueueSnackbar({\n            message: \"EVE is offline, don't hit the API.\",\n            options: {\n              action: key => snackbarAction(() => closeSnackbar(Number(key))),\n              anchorOrigin: {\n                horizontal: \"right\",\n                vertical: \"bottom\",\n              },\n              autoHideDuration: null,\n              key: KEY_EVE_OFFLINE,\n              preventDuplicate: true,\n              variant: 'error',\n            },\n          });\n        }\n      })\n      .catch(e => console.log(`Error while checking EVE status: ${e}`));\n  });\n\n  return null;\n}\n","export const KEY_EVE_OFFLINE = 1;\n","import React from 'react';\nimport {makeStyles, Theme, createStyles, useTheme} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport { useDeps } from \"../../context/DepsContext/DepsContext\";\nimport AppBar from \"../AppBar/AppBar\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport RSSRepositoryInterface from \"../../repository/RSSRepository/RSSRepositoryInterface\";\nimport RSSPaper from \"./RSSPaper/RSSPaper\";\nimport HomeSearch from \"./HomeSearch/HomeSearch\";\nimport Typography from \"@material-ui/core/Typography\";\nimport StatusCheck from \"../StatusCheck/StatusCheck\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    buttonLinkParent: {\n      right: 0,\n    },\n    cardTitle: {\n      paddingTop: theme.spacing(2),\n      paddingLeft: theme.spacing(3)\n    },\n    content: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"space-between\",\n\n      height: \"100vh\",\n      flexGrow: 1,\n      padding: theme.spacing(3),\n      [theme.breakpoints.down('xs')]: {\n        padding: 0\n      }\n    },\n    footerText: {\n      paddingTop: theme.spacing(2),\n      [theme.breakpoints.down('xs')]: {\n        paddingBottom: theme.spacing(1),\n      }\n    },\n    searchGridItem: {\n      minWidth: \"40%\",\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3),\n      paddingTop: theme.spacing(6),\n      paddingBottom: theme.spacing(9),\n      [theme.breakpoints.down('lg')]: {\n        minWidth: \"40%\",\n      },\n      [theme.breakpoints.down('md')]: {\n        minWidth: \"60%\",\n      },\n      [theme.breakpoints.down('sm')]: {\n        minWidth: \"70%\",\n      },\n      [theme.breakpoints.down('xs')]: {\n        paddingTop: theme.spacing(3),\n        paddingBottom: theme.spacing(0),\n        minWidth: \"100%\",\n      }\n    },\n\n    // necessary for content to be below app bar\n    toolbar: {\n      minHeight: 56,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 48,\n      }\n    },\n  }),\n);\n\nexport default function Home(props: {}) {\n  const classes = useStyles();\n  let theme = useTheme();\n  let isSmall = useMediaQuery(theme.breakpoints.down('xs'));\n  let {\n    rssRepository\n  }: {\n    rssRepository: RSSRepositoryInterface\n  } = useDeps();\n\n  return (\n    <React.Fragment>\n      <StatusCheck />\n      <AppBar title=\"Home\" />\n      <main className={classes.content}>\n        <div>\n          <div className={classes.toolbar} />\n\n          <Grid\n            container\n            direction=\"column\"\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n\n            <Grid item className={classes.searchGridItem} xs={6}>\n              <HomeSearch />\n            </Grid>\n\n            <Grid item style={{ minWidth: \"100%\" }} xs={6}>\n              <Grid container spacing={isSmall ? 0 : 3}>\n                <RSSPaper\n                  title={\"Official news\"}\n                  source={() => rssRepository.getEveNewsFeed()}\n                />\n                <RSSPaper\n                  title={\"Dev blogs\"}\n                  source={() => rssRepository.getDevBlogsFeed()}\n                />\n                <RSSPaper\n                  title={\"Patch notes\"}\n                  source={() => rssRepository.getPatchNotesFeed()}\n                />\n              </Grid>\n            </Grid>\n\n          </Grid>\n        </div>\n\n        <Typography\n          variant=\"caption\"\n          align=\"center\"\n          className={classes.footerText}\n        >\n          All Eve Related Materials are Property of CCP Games\n        </Typography>\n      </main>\n    </React.Fragment>\n  );\n}\n","const repoCategories = [\"all\", \"agent\", \"alliance\", \"character\", \"constellation\", \"corporation\", \"faction\", \"inventory_type\", \"region\", \"solar_system\", \"station\"] as const;\n\ntype RepoCategory = typeof repoCategories[number];\n\nexport default RepoCategory;\nexport { repoCategories };\n","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    circularProgress: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      marginTop: theme.spacing(3),\n    }\n  }),\n);\n\nexport default function LoadingFullPage() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.circularProgress}>\n      <CircularProgress color=\"secondary\" />\n    </div>\n  );\n}\n","import Grid from \"@material-ui/core/Grid\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport React, {ReactElement, useRef, useState} from \"react\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    form: {\n      width: \"100%\",\n      marginBottom: theme.spacing(0.5),\n      [theme.breakpoints.down('xs')]: {\n        paddingLeft: theme.spacing(3),\n        paddingRight: theme.spacing(3)\n      }\n    },\n    filledGrid: {\n      padding: theme.spacing(0.5),\n    },\n    emptyGrid: {\n      padding: theme.spacing(0.5),\n      // Removing the border when hitting the breakpoint\n      [theme.breakpoints.down('xs')]: {\n        padding: 0,\n      }\n    },\n    selectGridItem: {\n      order: 1,\n      [theme.breakpoints.down('xs')]: {\n        order: 2,\n      }\n    },\n    textGridItem: {\n      order: 2,\n      [theme.breakpoints.down('xs')]: {\n        order: 1,\n        paddingBottom: theme.spacing(2),\n      }\n    },\n    emptyGridItem: {\n      order: 3,\n    },\n    checkGridItem: {\n      order: 4,\n    }\n  }),\n);\n\nexport default function SearchForm(\n  {\n    category,\n    needle,\n    strict\n  }: {\n    category: string,\n    needle: string,\n    strict: boolean\n  }\n) {\n  let classes = useStyles();\n  let history = useHistory();\n  let [categoryValue, setCategoryValue] = useState(category);\n  let [strictValue, setStrictValue] = useState(strict);\n  let [searchTextErrorText, setSearchTextErrorText] = useState(\"\");\n  let [searchTextIsError, setSearchTextIsError] = useState(false);\n  let searchTextRef = useRef<HTMLInputElement | null>(null);\n\n  let submit = (): ReactElement | void => {\n    let searchTextElement = searchTextRef.current;\n    if (searchTextElement === null || searchTextElement.value.length < 3) {\n      setSearchTextIsError(true);\n      setSearchTextErrorText(\"It must be at least 3 characters long.\")\n\n      return;\n    }\n\n    let text = searchTextElement.value;\n    history.replace(`/search?category=${categoryValue}&strict=${String(strictValue)}&needle=${text}`);\n  }\n\n  let handleEnterPress = (e: React.KeyboardEvent): void => {\n    if (e.key === \"Enter\") {\n      submit();\n    }\n  }\n\n  return(\n    <form autoComplete=\"off\" className={classes.form}>\n      <Grid container>\n        <Grid item xs={12} sm={4} className={`${classes.filledGrid} ${classes.selectGridItem}`}>\n          <FormControl\n            variant=\"outlined\"\n            fullWidth\n          >\n            <InputLabel id=\"demo-simple-select-outlined-label\">Category</InputLabel>\n            <Select\n              labelId=\"demo-simple-select-outlined-label\"\n              id=\"demo-simple-select-outlined\"\n              value={categoryValue}\n              onChange={e => setCategoryValue(e.target.value as string)}\n              label=\"Category\"\n              color=\"secondary\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"agent\"}>Agent</MenuItem>\n              <MenuItem value={\"alliance\"}>Alliance</MenuItem>\n              <MenuItem value={\"character\"}>Character</MenuItem>\n              <MenuItem value={\"constellation\"}>Constellation</MenuItem>\n              <MenuItem value={\"corporation\"}>Corporation</MenuItem>\n              <MenuItem value={\"faction\"}>Faction</MenuItem>\n              <MenuItem value={\"inventory_type\"}>Item</MenuItem>\n              <MenuItem value={\"region\"}>Region</MenuItem>\n              <MenuItem value={\"solar_system\"}>System</MenuItem>\n              <MenuItem value={\"station\"}>Station</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12} sm={8} className={`${classes.filledGrid} ${classes.textGridItem}`}>\n          <TextField\n            id=\"outlined-basic\"\n            error={searchTextIsError}\n            helperText={searchTextErrorText}\n            label=\"Search\"\n            variant=\"outlined\"\n            color=\"secondary\"\n            fullWidth\n            onKeyPress={handleEnterPress}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    aria-label=\"toggle password visibility\"\n                    onClick={submit}\n                    edge=\"end\"\n                  >\n                    <SearchIcon />\n                  </IconButton>\n                </InputAdornment>\n              )\n            }}\n            inputRef={searchTextRef}\n            defaultValue={needle}\n          />\n        </Grid>\n        <Grid item xs={12} sm={4} className={`${classes.emptyGrid} ${classes.emptyGridItem}`}>\n        </Grid>\n        <Grid item xs={12} sm={8} className={`${classes.filledGrid} ${classes.checkGridItem}`}>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={strictValue}\n                onChange={e => setStrictValue(e.target.checked as boolean)}\n                name=\"checkedA\"\n              />\n            }\n            label=\"Strict\"\n          />\n        </Grid>\n      </Grid>\n    </form>\n  );\n}\n","import React from 'react';\nimport MUIDataTable, {MUIDataTableColumnDef, MUIDataTableOptions} from \"mui-datatables\";\nimport { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\nimport ResultWithLinkInterface from \"../../../repository/SearchRepository/ResulWithLinkInterface\";\nimport { Link } from \"react-router-dom\";\nimport IconButton from '@material-ui/core/IconButton';\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    arrowRightIconStyle: {\n      verticalAlign: \"middle\",\n    },\n    emptyIconCell: {\n      minHeight: \"30px\"\n    }\n  }),\n);\n\nexport default function ResultTable(\n  {\n    data\n  }: {\n    data: ResultWithLinkInterface[]\n  }\n) {\n  const theme = useTheme();\n  let classes = useStyles();\n  const denseTable = useMediaQuery(theme.breakpoints.up('sm'));\n\n  let tableOptions: MUIDataTableOptions = {\n    download: false,\n    elevation: 1,\n    filterType: \"checkbox\",\n    print: false,\n    responsive: \"standard\",\n    rowsPerPage: 25,\n    rowsPerPageOptions: [],\n    search: false,\n    selectableRows: \"none\",\n    setTableProps: () => {\n      return {\n        size: denseTable ? \"small\" : \"medium\"\n      };\n    },\n    viewColumns: false\n  };\n\n  const columns: MUIDataTableColumnDef[] = [\n    {\n      name: \"name\",\n      label: \"Name\",\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    {\n      name: \"prettyCategory\",\n      label: \"Category\",\n      options: {\n        filter: true,\n        sort: true,\n      }\n    },\n    {\n      name: \"link\",\n      options: {\n        filter: false,\n        sort: false,\n        display: false,\n      }\n    },\n    {\n      name: \"id\",\n      options: {\n        filter: false,\n        sort: false,\n        display: false,\n      }\n    },\n    {\n      name: \"icon\",\n      label: \"\",\n      options: {\n        customHeadLabelRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          let link = tableMeta.rowData[2];\n          let id = tableMeta.rowData[3];\n\n          if (link === null) {\n            return <div className={classes.emptyIconCell} />;\n          }\n\n          return (\n            <IconButton\n              size=\"small\"\n              aria-label=\"open\"\n              component={Link}\n              to={`${link}${id}`}\n            >\n              <ArrowRightIcon className={classes.arrowRightIconStyle}/>\n            </IconButton>\n\n          );\n        },\n        filter: false,\n        setCellProps: () => ({ style: { width: \"0\"}}),\n        sort: false,\n      }\n    }\n  ];\n\n  return (\n    <MUIDataTable\n      title={\"\"}\n      data={data}\n      columns={columns}\n      options={tableOptions}\n    />\n  );\n}\n","import React from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport SearchForm from \"../SearchForm/SearchForm\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport ResultTable from \"../ResultTable/ResultTable\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport ResultWithLinkInterface from \"../../../repository/SearchRepository/ResulWithLinkInterface\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      padding: 0,\n    }\n  })\n);\n\nexport default function ResultContainer(\n  {\n    category,\n    needle,\n    strict,\n    resultData\n  }: {\n    category: string,\n    needle: string,\n    strict: boolean\n    resultData: ResultWithLinkInterface[]\n  }\n) {\n  let classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <Container maxWidth=\"sm\" className={classes.container}>\n        <SearchForm\n          category={category}\n          needle={needle}\n          strict={strict}\n        />\n        {resultData.length >= 500 &&\n        <Alert severity=\"warning\">More than 500 records found, the API hasn't performed a full search. Try refining your parameters if you need more accuracy.</Alert>\n        }\n        <ResultTable data={resultData}/>\n      </Container>\n    </React.Fragment>\n  )\n}\n","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Alert from '@material-ui/lab/Alert';\nimport { AlertTitle } from \"@material-ui/lab\";\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      '& > * + *': {\n        marginTop: theme.spacing(2),\n      },\n      [theme.breakpoints.down('xs')]: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2),\n      }\n    },\n  }),\n);\n\nexport default function ApiErrorFullPage(\n  {\n    retry,\n    text\n  }: {\n    retry: () => void,\n    text: string\n  }\n) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Alert\n        severity=\"error\"\n        action={\n          <Button color=\"inherit\" size=\"small\" onClick={retry}>\n            <strong>RETRY</strong>\n          </Button>\n        }\n        variant=\"outlined\"\n      >\n        <AlertTitle>Error</AlertTitle>\n        {text}\n      </Alert>\n    </div>\n  );\n}\n","import React, {useEffect, useState} from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\n\nimport { useDeps } from \"../../../context/DepsContext/DepsContext\";\nimport AppBar from \"../../AppBar/AppBar\";\nimport SearchRepositoryInterface from \"../../../repository/SearchRepository/SearchRepositoryInterface\";\nimport RepoCategory from \"../../../repository/SearchRepository/RepoCategory\";\nimport LoadingFullPage from \"../../LoadingFullPage/LoadingFullPage\";\nimport ResultContainer from \"../ResultContainer/ResultContainer\";\nimport ApiErrorFullPage from \"../../ApiErrorFullPage/ApiErrorFullPage\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n      height: \"100vh\",\n      [theme.breakpoints.down('xs')]: {\n        paddingLeft: 0,\n        paddingRight: 0\n      }\n    },\n    // necessary for content to be below app bar\n    toolbar: {\n      minHeight: 56,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 48,\n      }\n    },\n  }),\n);\n\nexport default function SearchResult(\n  {\n    category,\n    needle,\n    strict\n  }: {\n    category: string,\n    needle: string,\n    strict: boolean\n  }\n) {\n  let classes = useStyles();\n  let [resultComponent, setResultComponent] = useState<any>(<LoadingFullPage />);\n  let [retry, setRetry] = useState(false);\n  let {\n    searchRepository\n  }: {\n    searchRepository: SearchRepositoryInterface\n  } = useDeps();\n\n  useEffect(() => {\n    setResultComponent(<LoadingFullPage />);\n    setRetry(false);\n\n    searchRepository.publicSearch(needle, category as RepoCategory, strict)  // FIX typescript\n      .then(data => {\n        setResultComponent(\n          <ResultContainer\n            category={category}\n            needle={needle}\n            strict={strict}\n            resultData={data}\n          />\n        );\n      }).catch(e => {\n        setResultComponent(\n          <ApiErrorFullPage\n            retry={() => setRetry(true)}\n            text={e.message}\n          />\n        );\n      }\n    );\n  }, [category, needle, strict, retry]);\n\n  return (\n    <React.Fragment>\n      <AppBar title=\"Search\" />\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        {resultComponent}\n      </main>\n    </React.Fragment>\n  );\n}\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport AppBar from \"../../AppBar/AppBar\";\nimport Container from \"@material-ui/core/Container\";\nimport SearchForm from \"../SearchForm/SearchForm\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n      height: \"100vh\",\n    },\n    // necessary for content to be below app bar\n    toolbar: {\n      minHeight: 56,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 48,\n      }\n    },\n    container: {\n      padding: 0,\n      display: \"flex\",\n      alignItems: \"center\",\n      height: \"70vh\"\n    },\n  }),\n);\n\nexport default function SearchEmpty(\n  {\n    category\n  }: {\n    category: string\n  }\n) {\n  let classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <AppBar title=\"Search\" />\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Container maxWidth=\"sm\" className={classes.container}>\n          <SearchForm\n            category={category}\n            needle={\"\"}\n            strict={false}\n          />\n        </Container>\n      </main>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport RepoCategory, { repoCategories } from \"../../repository/SearchRepository/RepoCategory\";\nimport SearchResult from \"./SearchResult/SearchResult\";\nimport SearchEmpty from \"./SearchEmpty/SearchEmpty\";\n\nexport default function Search() {\n  let query = new URLSearchParams(useLocation().search);\n\n  let category: RepoCategory = \"all\";\n  let queryCategory = query.get(\"category\");\n  if (queryCategory !== null && repoCategories.includes(queryCategory as RepoCategory)) {\n    category = queryCategory as RepoCategory;\n  }\n\n  let queryStrict = query.get(\"strict\");\n  let queryNeedle = query.get(\"needle\");\n  if (queryStrict !== null && queryNeedle !== null) {\n    return (\n      <SearchResult\n        category={category}\n        needle={queryNeedle}\n        strict={queryStrict === \"true\"}\n      />\n    );\n  }\n\n  return (\n    <SearchEmpty category={category} />\n  );\n}\n","import MUIDataTable, {MUIDataTableColumnDef, MUIDataTableOptions} from \"mui-datatables\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Link} from \"react-router-dom\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport React from \"react\";\n\nconst options: MUIDataTableOptions = {\n  elevation: 1,\n  filter: false,\n  fixedHeader: false,\n  print: false,\n  responsive: \"standard\",\n  rowHover: false,\n  rowsPerPageOptions: [],\n  selectableRows: \"none\",\n  viewColumns: false,\n};\n\nexport default function CorpListTable(\n  {\n    corpList\n  }: {\n    corpList: { [key:string]: string }\n  }\n) {\n  const columns: MUIDataTableColumnDef[] = [\n    {\n      name: \"name\",\n      label: \"Name\",\n      options: {\n        customHeadRender: () => null\n      }\n    },\n    {\n      name: \"id\",\n      label: \"ID\",\n      options: {\n        customHeadRender: () => null,\n        display: false,\n      }\n    },\n    {\n      name: \"icon\",\n      label: \"\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          let id = tableMeta.rowData[1];\n\n          return (\n            <IconButton\n              size=\"small\"\n              aria-label=\"open\"\n              component={Link}\n              to={`/corporation/${id}`}\n            >\n              <ArrowRightIcon />\n            </IconButton>\n          );\n        },\n        download: false,\n        setCellProps: () => ({ style: { width: 0, paddingTop: 0, paddingBottom: 0 }}),\n      }\n    }\n  ];\n\n  let data: { name: string, id: number }[] = [];\n  for (let corpID in corpList) {\n    data.push({ name: corpList[corpID], id: Number(corpID) });\n  }\n\n  return(\n    <MUIDataTable\n      title={\"Corporations\"}\n      data={data}\n      columns={columns}\n      options={options}\n    />\n  );\n}\n","import React from 'react';\nimport RepoAllianceInterface from \"../../../repository/AllianceRepository/RepoAllianceInterface\";\nimport {createStyles, makeStyles, Theme, useTheme} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Link} from \"react-router-dom\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Typography from \"@material-ui/core/Typography\";\nimport CorpListTable from \"../CorpListTable/CorpListTable\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    buttonCell: {\n      paddingTop: 0,\n      paddingBottom: 0,\n      width: 0,\n    },\n    gridContainer: {\n      marginTop: 0,\n    },\n    gridWithTable: {\n      [theme.breakpoints.down('xs')]: {\n        paddingBottom: theme.spacing(3),\n      },\n    },\n    title: {\n      [theme.breakpoints.down('xs')]: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2)\n      },\n    },\n    logo: {\n      textAlign: \"center\",\n      //marginTop: -(theme.spacing(3)),\n      paddingTop: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n    },\n    nameCell: {\n      backgroundColor: theme.palette.secondary.main,\n      color: theme.palette.secondary.contrastText,\n    }\n  }),\n);\n\nexport default function AllianceInfoContent(\n  {\n    content\n  }: {\n    content: RepoAllianceInterface\n  }\n) {\n  let classes = useStyles();\n  let theme = useTheme();\n  let isSmall = useMediaQuery(theme.breakpoints.down('xs'));\n\n  return (\n    <React.Fragment>\n      <Grid container spacing={isSmall ? 0 : 3} className={classes.gridContainer}>\n        <Grid item xs={12} className={classes.logo}>\n          <img\n            alt=\"alliance logo\"\n            src={`https://images.evetech.net/alliances/${content.id}/logo`}\n            height=\"180\"\n            width=\"180\"\n          />\n        </Grid>\n        <Grid item xs={12} sm={6} className={classes.gridWithTable}>\n          <TableContainer component={Paper}>\n            <Table aria-label=\"alliance information\">\n              <TableBody>\n                <TableRow>\n                  <TableCell\n                    colSpan={3}\n                    align=\"center\"\n                    className={classes.nameCell}\n                  >\n                    <Typography variant=\"h6\">{ content.name }</Typography>\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Ticker:</TableCell>\n                  <TableCell>{ content.ticker }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>ID:</TableCell>\n                  <TableCell>{ content.id }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Creator (char):</TableCell>\n                  <TableCell>{ content.creator_name }</TableCell>\n                  <TableCell align=\"right\" className={classes.buttonCell}>\n                    <IconButton\n                      size=\"small\"\n                      aria-label=\"open character\"\n                      component={Link}\n                      to={`/character/${content.creator_id}`}\n                    >\n                      <ArrowRightIcon />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Creator (corp):</TableCell>\n                  <TableCell>{ content.creator_corporation_name }</TableCell>\n                  <TableCell align=\"right\" className={classes.buttonCell}>\n                    <IconButton\n                      size=\"small\"\n                      aria-label=\"open character\"\n                      component={Link}\n                      to={`/corporation/${content.creator_corporation_id}`}\n                    >\n                      <ArrowRightIcon />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Date founded:</TableCell>\n                  <TableCell>{ content.date_founded }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n                {content.executor_corporation_name !== undefined &&\n                  <TableRow>\n                      <TableCell>Executor:</TableCell>\n                      <TableCell>{ content.executor_corporation_name }</TableCell>\n                      <TableCell align=\"right\" className={classes.buttonCell}>\n                          <IconButton\n                              size=\"small\"\n                              aria-label=\"open character\"\n                              component={Link}\n                              to={`/corporation/${content.executor_corporation_id}`}\n                          >\n                              <ArrowRightIcon />\n                          </IconButton>\n                      </TableCell>\n                  </TableRow>\n                }\n                {content.faction_name !== undefined &&\n                  <TableRow>\n                      <TableCell>Faction:</TableCell>\n                      <TableCell>{ content.faction_name }</TableCell>\n                      <TableCell align=\"right\">\n                          <TableCell align=\"right\" className={classes.buttonCell}>\n                              <IconButton\n                                  size=\"small\"\n                                  aria-label=\"open character\"\n                                  component={Link}\n                                  to={`/faction/${content.faction_id}`}\n                              >\n                                  <ArrowRightIcon />\n                              </IconButton>\n                          </TableCell>\n                      </TableCell>\n                  </TableRow>\n                }\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Grid>\n        <Grid item xs={12} sm={6} className={classes.gridWithTable}>\n          <CorpListTable corpList={content.corporations} />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}\n\n/*\nexport default function AllianceInfoContent(\n  {\n    content\n  }: {\n    content: RepoAllianceInterface\n  }\n) {\n  return (\n    <React.Fragment>\n      <h1>{content.name}</h1>\n      <ul>\n        <li>\n          <details>\n            <summary>Corporations:</summary>\n            <ul>\n              {Object.keys(content.corporations).map(key => {\n                return <li key={key}>{content.corporations[key]}</li>\n              })}\n            </ul>\n          </details>\n        </li>\n      </ul>\n    </React.Fragment>\n  );\n}\n*/","import React, {useState, useEffect} from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Container from \"@material-ui/core/Container\";\n\nimport { useDeps } from \"../../context/DepsContext/DepsContext\";\nimport AppBar from \"../AppBar/AppBar\";\nimport LoadingFullPage from \"../LoadingFullPage/LoadingFullPage\";\nimport AllianceRepositoryInterface from \"../../repository/AllianceRepository/AllianceRepositoryInterface\";\nimport ApiErrorFullPage from \"../ApiErrorFullPage/ApiErrorFullPage\";\nimport AllianceInfoContent from \"./AllianceInfoContent/AllianceInfoContent\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      //paddingTop: theme.spacing(3),\n      paddingBottom: 0,\n      paddingLeft: 0,\n      paddingRight: 0,\n    },\n    content: {\n      flexGrow: 1,\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3),\n      [theme.breakpoints.down('xs')]: {\n        padding: 0,\n      }\n    },\n    // necessary for content to be below app bar\n    toolbar: {\n      minHeight: 56,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 48,\n      }\n    },\n  }),\n);\n\nexport default function AllianceInfo() {\n  let classes = useStyles();\n  let [apiResult, setApiResult] = useState(<LoadingFullPage />);\n  let [retry, setRetry] = useState(false);\n  let {\n    allianceRepository\n  }: {\n    allianceRepository: AllianceRepositoryInterface\n  } = useDeps();\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  useEffect(() => {\n    if (id === undefined) {\n      return;\n    }\n\n    setApiResult(<LoadingFullPage />);\n    setRetry(false);\n\n    allianceRepository.getOne(Number(id))\n      .then(data => {\n        setApiResult(\n          <AllianceInfoContent content={data} />\n        );\n      }).catch(e => {\n        setApiResult(\n          <ApiErrorFullPage\n            retry={() => setRetry(true)}\n            text={e.message}\n          />\n        );\n      });\n  }, [retry, id]);\n\n  return (\n    <React.Fragment>\n      <AppBar title=\"Alliance\" />\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          {apiResult}\n        </Container>\n      </main>\n    </React.Fragment>\n  );\n}\n","import MUIDataTable, {MUIDataTableColumnDef, MUIDataTableMeta, MUIDataTableOptions} from \"mui-datatables\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Link} from \"react-router-dom\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport React from \"react\";\nimport {createStyles, makeStyles, Theme, useTheme} from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\n\nimport { useDeps } from \"../../../context/DepsContext/DepsContext\";\nimport RepoCharacterCorpHistoryInterface\n  from \"../../../repository/CharacterRepository/RepoCharacterCorpHistoryInterface\";\nimport DateFormatterInterface from \"../../../service/DateFormatter/DateFormatterInterface\";\n\nconst options: MUIDataTableOptions = {\n  download: false,\n  elevation: 1,\n  filter: false,\n  fixedHeader: false,\n  print: false,\n  responsive: \"standard\",\n  rowHover: false,\n  rowsPerPage: 100,\n  rowsPerPageOptions: [],\n  search: false,\n  selectableRows: \"none\",\n  viewColumns: false,\n};\n\nconst styles = {\n  corpImg: {\n    display: \"flex\",\n  }\n};\n\nconst extractCorpID = (tableMeta: MUIDataTableMeta): number => {\n  return tableMeta.rowData[3];\n};\n\nexport default function CorpHistoryTable(\n  {\n    corporations\n  }: {\n    corporations: RepoCharacterCorpHistoryInterface[]\n  }\n) {\n  let theme = useTheme();\n  let isSmall = useMediaQuery(theme.breakpoints.down('xs'));\n  let {\n    dateFormatter\n  }: {\n    dateFormatter: DateFormatterInterface\n  } = useDeps();\n\n  const columns: MUIDataTableColumnDef[] = [\n    {\n      name: \"logo\",\n      label: \"\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          let id = extractCorpID(tableMeta);\n\n          return (\n            <img\n              src={`https://images.evetech.net/corporations/${id}/logo?size=64`}\n              alt=\"corporation logo\"\n              height={48}\n              width={48}\n              style={styles.corpImg}\n            />\n          );\n        },\n        display: !isSmall,\n        setCellProps: () => ({ style: { width: 0, paddingTop: 0, paddingBottom: 0, paddingRight: 0 }}),\n      }\n    },\n    {\n      name: \"corporation_name\",\n      label: \"Name\",\n      options: {\n        customHeadRender: () => null\n      }\n    },\n    {\n      name: \"start_date\",\n      label: \"From\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          return dateFormatter.withDateTime(new Date(value));\n        },\n      }\n    },\n    {\n      name: \"corporation_id\",\n      label: \"ID\",\n      options: {\n        customHeadRender: () => null,\n        display: false,\n      }\n    },\n    {\n      name: \"icon\",\n      label: \"\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          let id = extractCorpID(tableMeta);\n\n          return (\n            <IconButton\n              size=\"small\"\n              aria-label=\"open\"\n              component={Link}\n              to={`/corporation/${id}`}\n            >\n              <ArrowRightIcon />\n            </IconButton>\n          );\n        },\n        download: false,\n        setCellProps: () => ({ style: { width: 0, paddingTop: 0, paddingBottom: 0 }}),\n      }\n    }\n  ];\n\n  return(\n    <MUIDataTable\n      title={\"Corp History\"}\n      data={corporations}\n      columns={columns}\n      options={options}\n    />\n  );\n}\n","import React from 'react';\nimport Typography from \"@material-ui/core/Typography\";\n\nexport default function EntityDescription(\n  {\n    bio\n  }: {\n    bio: string\n  }\n) {\n  let paragraphs = bio.split(\"<br>\");\n\n  return (\n    <React.Fragment>\n      {paragraphs.map((paragraph, key) => {\n        return <Typography>{ paragraph.replace(/(<([^>]+)>)/gi, \"\") }</Typography>\n      })}\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport {createStyles, makeStyles, Theme, useTheme} from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport RepoCharacterInterface from \"../../../repository/CharacterRepository/RepoCharacterInterface\";\nimport CorpHistoryTable from \"../CorpHistoryTable/CorpHistoryTable\";\nimport { useDeps } from \"../../../context/DepsContext/DepsContext\";\nimport DateFormatterInterface from \"../../../service/DateFormatter/DateFormatterInterface\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Link} from \"react-router-dom\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport EntityDescription from \"../../EntityDescription/EntityDescription\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    buttonCell: {\n      paddingTop: 0,\n      paddingBottom: 0,\n      width: 0,\n    },\n    gridContainer: {\n      marginTop: 0,\n    },\n    gridWithTable: {\n      [theme.breakpoints.down('xs')]: {\n        paddingBottom: theme.spacing(3),\n      },\n    },\n    title: {\n      [theme.breakpoints.down('xs')]: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2)\n      },\n    },\n    logo: {\n      textAlign: \"center\",\n      paddingTop: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n    },\n    nameCell: {\n      backgroundColor: theme.palette.secondary.main,\n      color: theme.palette.secondary.contrastText,\n    },\n    entityLogoCell: {\n      paddingTop: 0,\n      paddingRight: 0,\n      paddingBottom: 0\n    },\n    entityLogoGrid: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    entityLogoImg: {\n      marginRight: theme.spacing(1),\n      [theme.breakpoints.down('xs')]: {\n        display: \"none\",\n      },\n    },\n    bioCell: {\n      verticalAlign: \"top\",\n    },\n    successColorText: {\n      color: theme.palette.success.main,\n    },\n    errorColorText: {\n      color: theme.palette.error.main,\n    },\n  }),\n);\n\nexport default function CharacterInfoContent(\n  {\n    content\n  }: {\n    content: RepoCharacterInterface\n  }\n) {\n  let classes = useStyles();\n  let theme = useTheme();\n  let isSmall = useMediaQuery(theme.breakpoints.down('xs'));\n  let {\n    dateFormatter\n  }: {\n    dateFormatter: DateFormatterInterface\n  } = useDeps();\n\n  return (\n    <React.Fragment>\n      <Grid container spacing={isSmall ? 0 : 3} className={classes.gridContainer}>\n        <Grid item xs={12} className={classes.logo}>\n          <img\n            alt=\"character portrait\"\n            src={`https://images.evetech.net/characters/${content.id}/portrait`}\n            height=\"180\"\n            width=\"180\"\n          />\n        </Grid>\n        <Grid item xs={12} md={6} className={classes.gridWithTable}>\n          <TableContainer component={Paper}>\n            <Table aria-label=\"character information\">\n              <TableBody>\n                <TableRow>\n                  <TableCell\n                    colSpan={3}\n                    align=\"center\"\n                    className={classes.nameCell}\n                  >\n                    <Typography variant=\"h6\">{ content.name }</Typography>\n                  </TableCell>\n                </TableRow>\n\n                <TableRow>\n                  <TableCell>Corporation:</TableCell>\n                  <TableCell className={classes.entityLogoCell}>\n                    <Grid container>\n                      <Grid item className={classes.entityLogoGrid}>\n                        <img\n                          src={`https://images.evetech.net/corporations/${content.corporation_id}/logo?size=64`}\n                          alt=\"corporation logo\"\n                          height={48}\n                          width={48}\n                          className={classes.entityLogoImg}\n                        />\n                      </Grid>\n                      <Grid item className={classes.entityLogoGrid}>\n                        { content.corporation_name }\n                      </Grid>\n                    </Grid>\n                  </TableCell>\n                  <TableCell align=\"right\" className={classes.buttonCell}>\n                    <IconButton\n                      size=\"small\"\n                      aria-label=\"open corporation\"\n                      component={Link}\n                      to={`/corporation/${content.corporation_id}`}\n                    >\n                      <ArrowRightIcon />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n\n                {content.alliance_name !== undefined &&\n                  <TableRow>\n                      <TableCell>Alliance:</TableCell>\n                      <TableCell className={classes.entityLogoCell}>\n                          <Grid container>\n                              <Grid item className={classes.entityLogoGrid}>\n                                  <img\n                                      src={`https://images.evetech.net/alliances/${content.alliance_id}/logo?size=64`}\n                                      alt=\"alliance logo\"\n                                      height={48}\n                                      width={48}\n                                      className={classes.entityLogoImg}\n                                  />\n                              </Grid>\n                              <Grid item className={classes.entityLogoGrid}>\n                                { content.alliance_name }\n                              </Grid>\n                          </Grid>\n                      </TableCell>\n                      <TableCell align=\"right\" className={classes.buttonCell}>\n                          <IconButton\n                              size=\"small\"\n                              aria-label=\"open alliance\"\n                              component={Link}\n                              to={`/alliance/${content.alliance_id}`}\n                          >\n                              <ArrowRightIcon />\n                          </IconButton>\n                      </TableCell>\n                  </TableRow>\n                }\n\n                <TableRow>\n                  <TableCell>Birthday:</TableCell>\n                  <TableCell>{ dateFormatter.withDateTime(new Date(content.birthday)) }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n\n                {content.security_status !== undefined &&\n                  <TableRow>\n                      <TableCell>Sec status:</TableCell>\n                      <TableCell\n                          className={content.security_status < 0 ? classes.errorColorText : classes.successColorText}>\n                        {content.security_status}\n                      </TableCell>\n                      <TableCell align=\"right\"> </TableCell>\n                  </TableRow>\n                }\n\n                <TableRow>\n                  <TableCell>Title</TableCell>\n                  <TableCell>{ content.title }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n\n                <TableRow>\n                  <TableCell>Race:</TableCell>\n                  <TableCell>{ content.race_name }</TableCell>\n                  <TableCell align=\"right\" className={classes.buttonCell}>\n                    {/* TODO: remove when the race page is implemented\n                      <IconButton\n                        size=\"small\"\n                        aria-label=\"open race\"\n                        component={Link}\n                        to={`/race/${content.race_id}`}\n                      >\n                        <ArrowRightIcon/>\n                      </IconButton>*/\n                    }\n                  </TableCell>\n                </TableRow>\n\n                {content.ancestry_id !== undefined && content.ancestry_id > 0 && // 0 is possible even if it's not valid\n                  <TableRow>\n                      <TableCell>Ancestry:</TableCell>\n                      <TableCell>{ content.ancestry_name }</TableCell>\n                      <TableCell align=\"right\" className={classes.buttonCell}>\n                        {/* TODO: remove when the ancestry page is implemented\n                          <IconButton\n                            size=\"small\"\n                            aria-label=\"open ancestry\"\n                            component={Link}\n                            to={`/ancestry/${content.ancestry_id}`}\n                          >\n                            <ArrowRightIcon/>\n                          </IconButton>*/\n                        }\n                      </TableCell>\n                  </TableRow>\n                }\n\n                <TableRow>\n                  <TableCell>Bloodline:</TableCell>\n                  <TableCell>{ content.bloodline_name }</TableCell>\n                  <TableCell align=\"right\" className={classes.buttonCell}>\n                    {/* TODO: remove when the bloodline page is implemented\n                    <IconButton\n                      size=\"small\"\n                      aria-label=\"open bloodline\"\n                      component={Link}\n                      to={`/bloodline/${content.bloodline_id}`}\n                    >\n                      <ArrowRightIcon />\n                    </IconButton>*/}\n                  </TableCell>\n                </TableRow>\n\n                {content.faction_name !== undefined &&\n                  <TableRow>\n                      <TableCell>Faction:</TableCell>\n                      <TableCell>{ content.faction_name }</TableCell>\n                      <TableCell align=\"right\" className={classes.buttonCell}>\n                        {/* TODO: remove when the faction page is implemented\n                          <IconButton\n                              size=\"small\"\n                              aria-label=\"open faction\"\n                              component={Link}\n                              to={`/faction/${content.faction_id}`}\n                          >\n                              <ArrowRightIcon />\n                          </IconButton>*/}\n                      </TableCell>\n                  </TableRow>\n                }\n                <TableRow>\n                  <TableCell>Gender:</TableCell>\n                  <TableCell>{ `${content.gender[0].toUpperCase()}${content.gender.substr(1)}` }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n                {content.description !== undefined &&\n                  <TableRow>\n                      <TableCell className={classes.bioCell}>Bio:</TableCell>\n                      <TableCell colSpan={2}><EntityDescription bio={content.description} /></TableCell>\n                  </TableRow>\n                }\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Grid>\n        <Grid item xs={12} md={6} className={classes.gridWithTable}>\n          <CorpHistoryTable corporations={content.corporation_history} />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}\n","import React, {useEffect, useState} from 'react';\nimport { useParams } from \"react-router-dom\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport AppBar from \"../AppBar/AppBar\";\nimport CharacterInfoContent from \"./CharacterInfoContent/CharacterInfoContent\";\nimport Container from \"@material-ui/core/Container\";\nimport LoadingFullPage from \"../LoadingFullPage/LoadingFullPage\";\nimport { useDeps } from \"../../context/DepsContext/DepsContext\";\nimport CharacterRepositoryInterface from \"../../repository/CharacterRepository/CharacterRepositoryInterface\";\nimport ApiErrorFullPage from \"../ApiErrorFullPage/ApiErrorFullPage\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      paddingBottom: 0,\n      paddingLeft: 0,\n      paddingRight: 0,\n    },\n    content: {\n      flexGrow: 1,\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3),\n      [theme.breakpoints.down('xs')]: {\n        padding: 0,\n      }\n    },\n    // necessary for content to be below app bar\n    toolbar: {\n      minHeight: 56,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 48,\n      }\n    },\n  }),\n);\n\nexport default function CharacterInfo() {\n  let classes = useStyles();\n  let [apiResult, setApiResult] = useState(<LoadingFullPage />);\n  let [retry, setRetry] = useState(false);\n  let {\n    characterRepository\n  }: {\n    characterRepository: CharacterRepositoryInterface\n  } = useDeps();\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  useEffect(() => {\n    if (id === undefined) {\n      return;\n    }\n\n    setApiResult(<LoadingFullPage />);\n    setRetry(false);\n\n    characterRepository.getOne(Number(id))\n      .then(data => {\n        setApiResult(\n          <CharacterInfoContent content={data} />\n        )\n      }).catch(e => {\n        setApiResult(\n          <ApiErrorFullPage\n            retry={() => setRetry(true)}\n            text={e.message}\n          />\n        );\n      });\n  }, [retry, id]);\n\n  return (\n    <React.Fragment>\n      <AppBar title=\"Character\" />\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          {apiResult}\n        </Container>\n      </main>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function ConstellationInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>constellation {id}</h1>\n  );\n}\n","import MUIDataTable, {MUIDataTableColumnDef, MUIDataTableMeta, MUIDataTableOptions} from \"mui-datatables\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Link} from \"react-router-dom\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport React from \"react\";\nimport {createStyles, makeStyles, Theme, useTheme} from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport Grid from '@material-ui/core/Grid';\nimport { useDeps } from \"../../../context/DepsContext/DepsContext\";\nimport RepoCharacterCorpHistoryInterface\n  from \"../../../repository/CharacterRepository/RepoCharacterCorpHistoryInterface\";\nimport DateFormatterInterface from \"../../../service/DateFormatter/DateFormatterInterface\";\nimport RepoCorpAllianceHistoryInterface\n  from \"../../../repository/CorporationRepository/RepoCorpAllianceHistoryInterface\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst options: MUIDataTableOptions = {\n  download: false,\n  elevation: 1,\n  filter: false,\n  fixedHeader: false,\n  print: false,\n  responsive: \"standard\",\n  rowHover: false,\n  rowsPerPage: 100,\n  rowsPerPageOptions: [],\n  search: false,\n  selectableRows: \"none\",\n  viewColumns: false,\n};\n\nconst styles = {\n  allianceImg: {\n    display: \"flex\",\n  }\n};\n\nconst extractAllianceID = (tableMeta: MUIDataTableMeta): number => {\n  return tableMeta.rowData[5];\n};\n\nexport default function AllianceHistoryTable(\n  {\n    alliances\n  }: {\n    alliances: RepoCorpAllianceHistoryInterface[]\n  }\n) {\n  let theme = useTheme();\n  let isSmall = useMediaQuery(theme.breakpoints.down('xs'));\n  let {\n    dateFormatter\n  }: {\n    dateFormatter: DateFormatterInterface\n  } = useDeps();\n\n  const columns: MUIDataTableColumnDef[] = [\n    {\n      name: \"logo\",\n      label: \"\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          let id = extractAllianceID(tableMeta);\n\n          return (\n            <img\n              src={`https://images.evetech.net/alliances/${id}/logo?size=64`}\n              alt=\"alliance logo\"\n              height={48}\n              width={48}\n              style={styles.allianceImg}\n            />\n          );\n        },\n        display: !isSmall,\n        setCellProps: () => ({ style: { width: 0, paddingTop: 0, paddingBottom: 0, paddingRight: 0 }}),\n      }\n    },\n    {\n      name: \"alliance_name\",\n      label: \"Name\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          let isDeleted = tableMeta.rowData[7];\n\n          return `${value}${isDeleted === true ? \" (Closed)\" : \"\"}`;\n        },\n      }\n    },\n    {\n      name: \"start_date\",\n      label: \"From\",\n      options: {\n        display: false,\n      }\n    },\n    {\n      name: \"end_date\",\n      label: \"To\",\n      options: {\n        display: false,\n      }\n    },\n    {\n      name: \"stacked_dates\",\n      label: \"From To\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          let start = tableMeta.rowData[2];\n          let end = tableMeta.rowData[3];\n\n          return (\n            <React.Fragment>\n              <Grid container direction=\"column\">\n                {end !== undefined &&\n                  <Grid item xs style={{ whiteSpace: \"nowrap\" }}>\n                    {dateFormatter.withDateTime(new Date(end))}\n                  </Grid>\n                }\n                <Grid item xs style={{ whiteSpace: \"nowrap\" }}>\n                  {dateFormatter.withDateTime(new Date(start))}\n                </Grid>\n              </Grid>\n            </React.Fragment>\n          );\n        },\n        setCellProps: () => ({ style: { paddingTop: 0, paddingBottom: 0 }}),\n      }\n    },\n    {\n      name: \"alliance_id\",\n      label: \"ID\",\n      options: {\n        customHeadRender: () => null,\n        display: false,\n      }\n    },\n    {\n      name: \"icon\",\n      label: \"\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          let id = extractAllianceID(tableMeta);\n\n          return (\n            <IconButton\n              size=\"small\"\n              aria-label=\"open\"\n              component={Link}\n              to={`/alliance/${id}`}\n            >\n              <ArrowRightIcon/>\n            </IconButton>\n          );\n        },\n        download: false,\n        setCellProps: () => ({style: {width: 0, paddingTop: 0, paddingBottom: 0}}),\n      }\n    },\n    {\n      name: \"is_deleted\",\n      label: \"Is deleted\",\n      options: {\n        display: false,\n      }\n    },\n  ];\n\n  return(\n    <MUIDataTable\n      title={\"Alliance History\"}\n      data={alliances}\n      columns={columns}\n      options={options}\n    />\n  );\n}","import RepoCorporationInterface from \"../../../repository/CorporationRepository/RepoCorporationInterface\";\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport {createStyles, makeStyles, Theme, useTheme} from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport RepoCharacterInterface from \"../../../repository/CharacterRepository/RepoCharacterInterface\";\nimport { useDeps } from \"../../../context/DepsContext/DepsContext\";\nimport DateFormatterInterface from \"../../../service/DateFormatter/DateFormatterInterface\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Link} from \"react-router-dom\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport ClearIcon from '@material-ui/icons/Clear';\nimport CheckIcon from '@material-ui/icons/Check';\nimport EntityDescription from \"../../EntityDescription/EntityDescription\";\nimport AllianceHistoryTable from \"../AllianceHistoryTable/AllianceHistoryTable\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    buttonCell: {\n      paddingTop: 0,\n      paddingBottom: 0,\n      width: 0,\n    },\n    gridContainer: {\n      marginTop: 0,\n    },\n    gridWithTable: {\n      [theme.breakpoints.down('xs')]: {\n        paddingBottom: theme.spacing(3),\n      },\n    },\n    title: {\n      [theme.breakpoints.down('xs')]: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2)\n      },\n    },\n    logo: {\n      textAlign: \"center\",\n      paddingTop: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n    },\n    nameCell: {\n      backgroundColor: theme.palette.secondary.main,\n      color: theme.palette.secondary.contrastText,\n    },\n    entityLogoCell: {\n      paddingTop: 0,\n      paddingRight: 0,\n      paddingBottom: 0\n    },\n    entityLogoGrid: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    entityLogoImg: {\n      marginRight: theme.spacing(1),\n      [theme.breakpoints.down('xs')]: {\n        display: \"none\",\n      },\n    },\n    noWrapCell: {\n      whiteSpace: \"nowrap\",\n      [theme.breakpoints.down('xs')]: {\n        whiteSpace: \"normal\",\n      },\n    },\n    bioCell: {\n      verticalAlign: \"top\",\n    },\n    successColorText: {\n      color: theme.palette.success.main,\n    },\n    errorColorText: {\n      color: theme.palette.error.main,\n    },\n  }),\n);\n\nexport default function CorporationInfoContent(\n  {\n    content\n  }: {\n    content: RepoCorporationInterface\n  }\n) {\n  let classes = useStyles();\n  let theme = useTheme();\n  let isSmall = useMediaQuery(theme.breakpoints.down('xs'));\n  let {\n    dateFormatter\n  }: {\n    dateFormatter: DateFormatterInterface\n  } = useDeps();\n\n  return (\n    <React.Fragment>\n      <Grid container spacing={isSmall ? 0 : 3} className={classes.gridContainer}>\n        <Grid item xs={12} className={classes.logo}>\n          <img\n            alt=\"corporation logo\"\n            src={`https://images.evetech.net/corporations/${content.id}/logo`}\n            height=\"180\"\n            width=\"180\"\n          />\n        </Grid>\n        <Grid item xs={12} md={6} className={classes.gridWithTable}>\n          <TableContainer component={Paper}>\n            <Table aria-label=\"corporation information\">\n              <TableBody>\n\n                <TableRow>\n                  <TableCell\n                    colSpan={3}\n                    align=\"center\"\n                    className={classes.nameCell}\n                  >\n                    <Typography variant=\"h6\">{ content.name }</Typography>\n                  </TableCell>\n                </TableRow>\n\n                <TableRow>\n                  <TableCell>Ticker:</TableCell>\n                  <TableCell>{ content.ticker }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n\n                {content.alliance_id !== undefined &&\n                  <TableRow>\n                    <TableCell>Alliance:</TableCell>\n                    <TableCell className={classes.entityLogoCell}>\n                      <Grid container>\n                        <Grid item className={classes.entityLogoGrid}>\n                          <img\n                              src={`https://images.evetech.net/alliances/${content.alliance_id}/logo?size=64`}\n                              alt=\"alliance logo\"\n                              height={48}\n                              width={48}\n                              className={classes.entityLogoImg}\n                          />\n                        </Grid>\n                        <Grid item className={classes.entityLogoGrid}>\n                          { content.alliance_name }\n                        </Grid>\n                      </Grid>\n                    </TableCell>\n                    <TableCell align=\"right\" className={classes.buttonCell}>\n                      <IconButton\n                        size=\"small\"\n                        aria-label=\"open alliance\"\n                        component={Link}\n                        to={`/alliance/${content.alliance_id}`}\n                      >\n                        <ArrowRightIcon />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                }\n\n                <TableRow>\n                  <TableCell>CEO:</TableCell>\n                  <TableCell className={classes.entityLogoCell}>\n                    <Grid container>\n                      <Grid item className={classes.entityLogoGrid}>\n                        <img\n                          src={`https://images.evetech.net/characters/${content.ceo_id}/portrait?size=64`}\n                          alt=\"character portrait\"\n                          height={48}\n                          width={48}\n                          className={classes.entityLogoImg}\n                        />\n                      </Grid>\n                      <Grid item className={classes.entityLogoGrid}>\n                        { content.ceo_name }\n                      </Grid>\n                    </Grid>\n                  </TableCell>\n                  <TableCell align=\"right\" className={classes.buttonCell}>\n                    <IconButton\n                      size=\"small\"\n                      aria-label=\"open character\"\n                      component={Link}\n                      to={`/character/${content.ceo_id}`}\n                    >\n                      <ArrowRightIcon />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n\n                {content.creator_id !== 1 && // 1 when it's created manually by CCP\n                  <TableRow>\n                    <TableCell>Founder:</TableCell>\n                    <TableCell className={classes.entityLogoCell}>\n                      <Grid container>\n                        <Grid item className={classes.entityLogoGrid}>\n                          <img\n                            src={`https://images.evetech.net/characters/${content.creator_id}/portrait?size=64`}\n                            alt=\"character portrait\"\n                            height={48}\n                            width={48}\n                            className={classes.entityLogoImg}\n                          />\n                        </Grid>\n                        <Grid item className={classes.entityLogoGrid}>\n                          { content.creator_name }\n                        </Grid>\n                      </Grid>\n                    </TableCell>\n                    <TableCell align=\"right\" className={classes.buttonCell}>\n                      <IconButton\n                        size=\"small\"\n                        aria-label=\"open character\"\n                        component={Link}\n                        to={`/character/${content.creator_id}`}\n                      >\n                        <ArrowRightIcon />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                }\n\n                <TableRow>\n                  <TableCell>Members:</TableCell>\n                  <TableCell>{ content.member_count }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n\n                {content.date_founded !== undefined &&\n                  <TableRow>\n                    <TableCell>Creation date:</TableCell>\n                    <TableCell>{ dateFormatter.withDateTime(new Date(content.date_founded)) }</TableCell>\n                    <TableCell align=\"right\"> </TableCell>\n                  </TableRow>\n                }\n\n                {content.faction_id !== undefined &&\n                  <TableRow>\n                    <TableCell>Faction:</TableCell>\n                    <TableCell>{ content.faction_name }</TableCell>\n                    <TableCell align=\"right\"> {/* TODO: implement link when the page is implemented */}</TableCell>\n                  </TableRow>\n                }\n\n                {content.home_station_id !== undefined &&\n                  <TableRow>\n                    <TableCell className={classes.noWrapCell}>Home station:</TableCell>\n                    <TableCell>{ content.home_station_name }</TableCell>\n                    <TableCell align=\"right\" className={classes.buttonCell}>\n                      {\n                        /* TODO: remove when the station page is implemented\n                        <IconButton\n                          size=\"small\"\n                          aria-label=\"open station\"\n                          component={Link}\n                          to={`/station/${content.home_station_id}`}\n                        >\n                          <ArrowRightIcon/>\n                        </IconButton>\n                        */\n                      }\n                    </TableCell>\n                  </TableRow>\n                }\n\n                <TableRow>\n                  <TableCell>Tax rate:</TableCell>\n                  <TableCell>{ content.tax_rate }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n\n                {content.shares !== undefined &&\n                  <TableRow>\n                    <TableCell>Shares:</TableCell>\n                    <TableCell>{ content.shares }</TableCell>\n                    <TableCell align=\"right\"> </TableCell>\n                  </TableRow>\n                }\n\n                <TableRow>\n                  <TableCell>War eligible:</TableCell>\n                  <TableCell className={classes.entityLogoCell}>\n                    {content.war_eligible === true\n                      ? <CheckIcon className={classes.successColorText} />\n                      : <ClearIcon className={classes.errorColorText} />\n                    }\n                  </TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n\n                <TableRow>\n                  <TableCell>ID:</TableCell>\n                  <TableCell>{ content.id }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n\n                {content.url !== undefined &&\n                  <TableRow>\n                    <TableCell>Url:</TableCell>\n                    <TableCell><a href={ content.url}>{ content.url }</a></TableCell>\n                    <TableCell align=\"right\"> </TableCell>\n                  </TableRow>\n                }\n\n                {content.description !== undefined &&\n                  <TableRow>\n                    <TableCell className={classes.bioCell}>Description:</TableCell>\n                    <TableCell colSpan={2}><EntityDescription bio={content.description} /></TableCell>\n                  </TableRow>\n                }\n                </TableBody>\n            </Table>\n          </TableContainer>\n        </Grid>\n        <Grid item xs={12} md={6} className={classes.gridWithTable}>\n          <AllianceHistoryTable alliances={content.alliance_history} />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  )\n}\n","import React, {useEffect, useState} from 'react';\nimport { useParams } from \"react-router-dom\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport AppBar from \"../AppBar/AppBar\";\nimport Container from \"@material-ui/core/Container\";\nimport LoadingFullPage from \"../LoadingFullPage/LoadingFullPage\";\nimport { useDeps } from \"../../context/DepsContext/DepsContext\";\nimport ApiErrorFullPage from \"../ApiErrorFullPage/ApiErrorFullPage\";\nimport CorporationRepositoryInterface from \"../../repository/CorporationRepository/CorporationRepositoryInterface\";\nimport CorporationInfoContent from \"./CorporationInfoContent/CorporationInfoContent\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      paddingBottom: 0,\n      paddingLeft: 0,\n      paddingRight: 0,\n    },\n    content: {\n      flexGrow: 1,\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3),\n      [theme.breakpoints.down('xs')]: {\n        padding: 0,\n      }\n    },\n    // necessary for content to be below app bar\n    toolbar: {\n      minHeight: 56,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 48,\n      }\n    },\n  }),\n);\n\nexport default function CorporationInfo() {\n  let classes = useStyles();\n  let [apiResult, setApiResult] = useState(<LoadingFullPage />);\n  let [retry, setRetry] = useState(false);\n  let {\n    corporationRepository\n  }: {\n    corporationRepository: CorporationRepositoryInterface\n  } = useDeps();\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  useEffect(() => {\n    if (id === undefined) {\n      return;\n    }\n\n    setApiResult(<LoadingFullPage />);\n    setRetry(false);\n\n    corporationRepository.getOne(Number(id))\n      .then(data => {\n        setApiResult(\n          <CorporationInfoContent content={data} />\n        )\n      }).catch(e => {\n        setApiResult(\n          <ApiErrorFullPage\n            retry={() => setRetry(true)}\n            text={e.message}\n          />\n        );\n      });\n  }, [retry, id]);\n\n  return (\n    <React.Fragment>\n      <AppBar title=\"Corporation\" />\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          {apiResult}\n        </Container>\n      </main>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function TypeInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>type {id}</h1>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function RegionInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>region {id}</h1>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function SystemInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>system {id}</h1>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function StationInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>station {id}</h1>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function FactionInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>faction {id}</h1>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function RaceInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>race {id}</h1>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function AncestryInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>ancestry {id}</h1>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function BloodlineInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>bloodline {id}</h1>\n);\n}\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport Button from '@material-ui/core/Button'\n\nimport {\n  enqueueSnackbar as enqueueSnackbarAction,\n  closeOne as closeOneSnackbarAction,\n  closeAll as closeAllSnackbarAction\n} from '../../feature/notifier/notifierActions';\nimport SnackbarNotificationInterface from \"../../feature/notifier/SnackbarNotificationInterface\";\n\nconst colorBlack = { color: \"black\" };\n\nconst snackbarAction = (onClickCallback: () => void) => (\n  <React.Fragment>\n    <Button style={ colorBlack }>\n      CHECK\n    </Button>\n    <Button style={ colorBlack } onClick={onClickCallback}>\n      DISMISS\n    </Button>\n  </React.Fragment>\n);\n\nexport default function Test() {\n  const dispatch = useDispatch();\n  const enqueueSnackbar = (notification: SnackbarNotificationInterface) => dispatch(enqueueSnackbarAction(notification));\n  const closeSnackbar = (key: number) => dispatch(closeOneSnackbarAction(key));\n  const closeAllSnackbar = () => dispatch(closeAllSnackbarAction());\n\n  const handleClickWarning = () => {\n    // NOTE:\n    // if you want to be able to dispatch a `closeSnackbar` action later on,\n    // you SHOULD pass your own `key` in the options. `key` can be any sequence\n    // of number or characters, but it has to be unique for a given snackbar.\n    enqueueSnackbar({\n      message: \"Warning: API health at 56%.\",\n      options: {\n        action: key => snackbarAction(() => closeSnackbar(Number(key))),\n        anchorOrigin: {\n          horizontal: \"right\",\n          vertical: \"bottom\",\n        },\n        autoHideDuration: null,\n        key: new Date().getTime() + Math.random(),\n        variant: 'warning',\n      },\n    });\n  };\n\n  const handleClickOffline = () => {\n    enqueueSnackbar({\n      message: \"EVE is offline, don't hit the API.\",\n      options: {\n        action: key => snackbarAction(() => closeSnackbar(Number(key))),\n        anchorOrigin: {\n          horizontal: \"right\",\n          vertical: \"bottom\",\n        },\n        autoHideDuration: null,\n        key: new Date().getTime() + Math.random(),\n        variant: 'error',\n      },\n    });\n  };\n\n  const handleDismissAll = () => {\n    closeAllSnackbar();\n  };\n\n  return (\n    <React.Fragment>\n      <Button variant=\"contained\" onClick={handleClickWarning}>Display low health</Button>\n      <Button variant=\"contained\" onClick={handleClickOffline}>Display offline</Button>\n      <Button variant=\"contained\" onClick={handleDismissAll}>Dismiss all snackbars</Button>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport { useSelector, useDispatch } from 'react-redux';\nimport \"typeface-rajdhani\";\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport MUISwitch from '@material-ui/core/Switch';\nimport { Route, Switch } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport SearchIcon from '@material-ui/icons/Search';\n\nimport Home from \"../Home/Home\";\nimport Search from \"../Search/Search\";\nimport AllianceInfo from \"../AllianceInfo/AllianceInfo\";\nimport CharacterInfo from \"../CharacterInfo/CharacterInfo\";\nimport ConstellationInfo from \"../ConstellationInfo/ConstellationInfo\";\nimport CorporationInfo from \"../CorporationInfo/CorporationInfo\";\nimport TypeInfo from \"../TypeInfo/TypeInfo\";\nimport RegionInfo from \"../RegionInfo/RegionInfo\";\nimport SystemInfo from \"../SystemInfo/SystemInfo\";\nimport StationInfo from \"../StationInfo/StationInfo\";\nimport FactionInfo from \"../FactionInfo/FactionInfo\";\nimport RaceInfo from \"../RaceInfo/RaceInfo\";\nimport AncestryInfo from \"../AncestryInfo/AncestryInfo\";\nimport BloodlineInfo from \"../BloodlineInfo/BloodlineInfo\";\nimport Test from \"../Test/Test\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n    },\n    drawer: {\n      [theme.breakpoints.up('lg')]: {\n        width: drawerWidth,\n        flexShrink: 0,\n      },\n    },\n    // necessary for content to be below app bar\n    toolbar: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: 56,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 48,\n      }\n    },\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    logoText: {\n      color: \"inherit\",\n      fontFamily: [\n        'Rajdhani',\n        'sans-serif',\n      ].join(','),\n      fontWeight: 600,\n      textDecoration: \"none\"\n    },\n    darkModeToggle: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: 48,\n    },\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\ninterface Props {\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  window?: () => Window;\n}\n\nexport default function ResponsiveDrawer(props: Props) {\n  const { window } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  // FIXME\n  // @ts-ignore\n  const mobileOpen = useSelector(state => state.drawer.mobileOpen);\n  // @ts-ignore\n  const darkMode = useSelector(state => state.theme.darkMode);\n  const dispatch = useDispatch();\n\n  const handleCloseDrawer = () => dispatch({type: 'drawer/mobileClose'});\n\n  const darkModeToggle = (\n    <React.Fragment>\n      <Divider />\n      <FormGroup row className={classes.darkModeToggle}>\n        <FormControlLabel\n          control={\n            <MUISwitch\n              checked={darkMode}\n              onChange={() => dispatch({type: 'theme/changeMode'})}\n              name=\"checkedB\"\n              //color=\"primary\"\n              size=\"small\"\n            />\n          }\n          label=\"Dark mode\"\n        />\n      </FormGroup>\n    </React.Fragment>\n  );\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar}>\n        <Typography\n          variant=\"h4\"\n          align=\"center\"\n          className={classes.logoText}\n          component={Link}\n          onClick={handleCloseDrawer}\n          to=\"/\"\n        >\n          evelook\n        </Typography>\n      </div>\n      <Divider />\n      <List>\n        <ListItem\n          button\n          component={Link}\n          to=\"/search\"\n          onClick={handleCloseDrawer}\n        >\n          <ListItemIcon>\n            <SearchIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Search\" />\n        </ListItem>\n      </List>\n      {\n        darkModeToggle\n      }\n    </div>\n  );\n\n  const container = window !== undefined ? () => window().document.body : undefined;\n\n  return (\n    <div className={classes.root}>\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden lgUp implementation=\"css\">\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleCloseDrawer}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden mdDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route exact path=\"/search\">\n          <Search />\n        </Route>\n        <Route path=\"/alliance/:id\">\n          <AllianceInfo />\n        </Route>\n        <Route path=\"/ancestry/:id\">\n          <AncestryInfo />\n        </Route>\n        <Route path=\"/bloodline/:id\">\n          <BloodlineInfo />\n        </Route>\n        <Route path=\"/character/:id\">\n          <CharacterInfo />\n        </Route>\n        <Route path=\"/constellation/:id\">\n          <ConstellationInfo />\n        </Route>\n        <Route path=\"/corporation/:id\">\n          <CorporationInfo />\n        </Route>\n        <Route path=\"/type/:id\">\n          <TypeInfo />\n        </Route>\n        <Route path=\"/race/:id\">\n          <RaceInfo />\n        </Route>\n        <Route path=\"/region/:id\">\n          <RegionInfo />\n        </Route>\n        <Route path=\"/system/:id\">\n          <SystemInfo />\n        </Route>\n        <Route path=\"/station/:id\">\n          <StationInfo />\n        </Route>\n        <Route path=\"/faction/:id\">\n          <FactionInfo />\n        </Route>\n        <Route path=\"/test\">\n          <Test />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n","import React  from \"react\";\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { useSelector } from 'react-redux';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport Notifier from \"../Notifier/Notifier\";\nimport Dashboard from \"../Dashboard/Dashboard\";\n\nconst theme = (darkMode: boolean) => createMuiTheme({\n  palette: {\n    primary: {\n      main: '#263238',\n    },\n    secondary: {\n      main: '#607d8b',\n    },\n    type: darkMode ? 'dark' : 'light',\n  },\n});\n\nfunction MyApp() {\n  // @ts-ignore\n  const darkMode = useSelector(state => state.theme.darkMode);\n\n  return (\n    <ThemeProvider theme={theme(darkMode)}>\n      <CssBaseline />\n      <Notifier />\n      <Dashboard />\n    </ThemeProvider>\n  );\n}\n\nexport default MyApp;\n","const initialState = {\n  mobileOpen: false,\n}\n\nexport default function drawerReducer(\n  state = initialState,\n  action: {type: string, payload?: any}\n) {\n  switch (action.type) {\n    case 'drawer/mobileOpen': {\n      return {\n        ...state,\n        mobileOpen: true,\n      };\n    }\n    case 'drawer/mobileClose': {\n      return {\n        ...state,\n        mobileOpen: false\n      };\n    }\n    default:\n      return state;\n  }\n}\n","const initialState = {\n  darkMode: false,\n}\n\nexport default function themeReducer(\n  state = initialState,\n  action: {type: string, payload?: any}\n) {\n  switch (action.type) {\n    case 'theme/changeMode': {\n      return {\n        ...state,\n        darkMode: !state.darkMode,\n      };\n    }\n    default:\n      return state;\n  }\n}","import { ENQUEUE_SNACKBAR, CLOSE_ONE, CLOSE_ALL, REMOVE_SNACKBAR } from './notifierActions';\nimport ReduxNotificationInterface from \"./ReduxNotificationInterface\";\nimport NotifierStateInterface from \"./NotifierStateInterface\";\n\ntype NotifierAction = {\n  type: string,\n  notification?: ReduxNotificationInterface,\n  key?: number\n};\n\nconst initialState: NotifierStateInterface = {\n  notifications: [],\n};\n\nexport default function notifierReducer(\n  state: NotifierStateInterface = initialState,\n  action: NotifierAction\n): NotifierStateInterface {\n  switch (action.type) {\n    case ENQUEUE_SNACKBAR:\n      let actionNotification = action.notification as ReduxNotificationInterface;\n      return {\n        ...state,\n        notifications: [\n          ...state.notifications,\n          {\n            ...actionNotification,\n          },\n        ],\n      };\n    case CLOSE_ONE:\n      return {\n        ...state,\n        notifications: state.notifications.map(notification => ({\n          ...notification,\n          dismissed: notification.key === action.key\n        })),\n      };\n    case CLOSE_ALL:\n      return {\n        ...state,\n        notifications: state.notifications.map(notification => ({\n          ...notification,\n          dismissed: true\n        })),\n      };\n    case REMOVE_SNACKBAR:\n      return {\n        ...state,\n        notifications: state.notifications.filter(\n          notification => notification.key !== action.key,\n        ),\n      };\n    default:\n      return state;\n  }\n}\n","import {combineReducers} from 'redux';\n\nimport drawerReducer from './feature/drawer/drawerSlice';\nimport themeReducer from './feature/theme/themeSlice';\nimport notifierReducer from \"./feature/notifier/notifierSlice\";\n\nconst rootReducer = combineReducers({\n  // keys of this object will become the keys of the root state object\n  drawer: drawerReducer,\n  theme: themeReducer,\n  notifier: notifierReducer,\n});\n\nexport default rootReducer;\n","import {createStore} from 'redux';\n\nimport rootReducer from \"./reducer\";\n\nconst store = createStore(rootReducer);\n\nexport default store;\n\nexport type RootState = ReturnType<typeof store.getState>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import EsiClientInterface from \"./EsiClientInterface\";\nimport EsiErrorManagerInterface from \"../EsiErrorManager/EsiErrorManagerInterface\";\nimport Query from \"../QueryFactory/Query\";\n\nclass EsiClient implements EsiClientInterface {\n  private readonly _baseUrl = \"https://esi.evetech.net\";\n  private readonly _userAgent = \"evelook\";\n  private readonly _fetchClient;\n  private readonly _esiErrorManager;\n\n  constructor(\n    fetchClient: (\n      input: RequestInfo,\n      init?: RequestInit\n    ) => Promise<Response>,\n    esiErrorManager: EsiErrorManagerInterface\n  ) {\n    this._fetchClient = fetchClient;\n    this._esiErrorManager = esiErrorManager;\n  }\n\n  /**\n   * @throws Error On network error or broken error window.\n   */\n  public async getResponse(\n    endUrl: string,\n    method: \"GET\" | \"POST\" | \"DELETE\" | \"PUT\",\n    query: Query | null = null,\n    body: object | null = null\n  ): Promise<Response> {\n    if (this._esiErrorManager.isErrorWindowBroken()) {\n      throw new Error(\"Aborting, too many errors.\");\n    }\n\n    let headers = {\n      \"X-User-Agent\": this._userAgent,\n    };\n\n    let options: RequestInit = {\n      method: method,\n      cache: \"default\",\n      headers: headers\n    };\n\n    let uri = `${this._baseUrl}${endUrl}`;\n    if (query !== null && !query.isEmpty()) {\n      uri = uri.concat(`?${query.toString()}`);\n    }\n\n    if (body !== null) {\n      options[\"body\"] = JSON.stringify(body);\n    }\n\n    let response = await this._fetchClient(uri, options);\n    this._esiErrorManager.saveErrorWindowInfo(response.headers);\n    if (!response.ok) {\n      if (response.status === 420) {  // We are error limited\n        this._esiErrorManager.flagWindowAsBroken();\n      } else {\n        this._esiErrorManager.incrementError();\n      }\n    }\n\n    return response;\n  }\n}\n\nexport default EsiClient;\n","import EsiErrorManagerInterface from \"./EsiErrorManagerInterface\";\n\nclass EsiErrorManager implements EsiErrorManagerInterface {\n  private _errorReset = Date.now() + 60000;\n  private _errorRemain = 100;\n\n  public isErrorWindowBroken(): boolean {\n    if (this._errorReset < Date.now()) {\n      this._resetErrorWindow();\n    }\n\n    return this._errorRemain <= 1;\n  }\n\n  public incrementError(): void {\n    this._errorRemain--;\n  }\n\n  public saveErrorWindowInfo(headers: Headers): void {\n    let limitReset = headers.get(\"x-esi-error-limit-reset\");\n    let limitRemain = headers.get(\"x-esi-error-limit-remain\");\n    if (limitReset === null || limitRemain === null) {\n      return;\n    }\n\n    let headerErrorReset = Number(limitReset);\n    let headerErrorRemain = Number(limitRemain);\n\n    this._errorReset = Date.now() + (headerErrorReset * 1000);\n    if (headerErrorRemain < this._errorRemain) {\n      this._errorRemain = headerErrorRemain;\n    }\n  }\n\n  public flagWindowAsBroken(): void {\n    this._errorRemain = 0;\n  }\n\n  private _resetErrorWindow(): void {\n    this._errorReset = Date.now() + 60000;\n    this._errorRemain = 100;\n  }\n}\n\nexport default EsiErrorManager;\n","import QueryDictionaryInterface from \"./QueryDictionaryInterface\";\n\nclass Query  {\n  private readonly _spaceDelimiter;\n  private _query: QueryDictionaryInterface = {};\n\n  constructor(spaceDelimiter: string = \",\") {\n    this._spaceDelimiter = spaceDelimiter;\n  }\n\n  add(attribute: string, values: string[]): void {\n    this._query[attribute] = values;\n  }\n\n  isEmpty(): boolean {\n    return Object.keys(this._query).length === 0;\n  }\n\n  toString(): string {\n    let queryString = \"\";\n\n    for (let attribute in this._query) {\n      if (!this._query.hasOwnProperty(attribute)) {\n        continue;\n      }\n\n      if (queryString.length > 0) {\n        queryString = queryString.concat(\"&\");\n      }\n\n      let values = \"\";\n      this._query[attribute].forEach((value, index) => {\n        if (index > 0) {\n          values = values.concat(this._spaceDelimiter);\n        }\n\n        values = values.concat(encodeURIComponent(value));\n      });\n\n      queryString = queryString.concat(`${attribute}=${values}`);\n    }\n\n    return queryString;\n  }\n}\n\nexport default Query;\n","import Query from \"./Query\";\n\nclass QueryFactory {\n  public make(): Query {\n    return new Query();\n  }\n}\n\nexport default QueryFactory;\n","class EsiError extends Error {\n  constructor(response: Response) {\n    super(`Esi error code ${response.status}: ${response.statusText}`);\n  }\n}\n\nexport default EsiError;\n","import EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiStatusInterface from \"./EsiStatusInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\nimport StatusCallInterface from \"./StatusCallInterface\";\n\nclass StatusCall implements StatusCallInterface{\n  private readonly _esiClient;\n  private readonly _url = \"/v2/status/\";\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  async get(): Promise<EsiStatusInterface> {\n    let response = await this._esiClient.getResponse(this._url, \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n}\n\nexport default StatusCall;\n","import UniverseNamesCallInterface from \"./UniverseNamesCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\nimport EsiUniverseNamesInterface from \"./EsiUniverseNamesInterface\";\n\nclass UniverseNamesCall implements UniverseNamesCallInterface {\n  private readonly _esiClient;\n  private readonly _url = \"/v3/universe/names/\";\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  async get(ids: number[]): Promise<EsiUniverseNamesInterface[]> {\n    let response = await this._esiClient.getResponse(\n      this._url,\n      \"POST\",\n      null,\n      ids\n    );\n\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n}\n\nexport default UniverseNamesCall;\n","import AllianceListCallInterface from \"./AllianceListCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass AllianceListCall implements AllianceListCallInterface {\n  private readonly _esiClient;\n  private readonly _url = \"/v2/alliances/\";\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  async get(): Promise<number[]> {\n    let response = await this._esiClient.getResponse(this._url, \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n}\n\nexport default AllianceListCall;\n","import AllianceInfoCallInterface from \"./AllianceInfoCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\nimport EsiAllianceInfoInterface from \"./EsiAllianceInfoInterface\";\n\nclass AllianceInfoCall implements AllianceInfoCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  async get(id: number): Promise<EsiAllianceInfoInterface> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v4/alliances/${id}/`;\n  }\n}\n\nexport default AllianceInfoCall;\n","import NameRepositoryInterface from \"./NameRepositoryInterface\";\nimport UniverseNamesCallInterface from \"../../service/Call/UniverseNamesCall/UniverseNamesCallInterface\";\nimport EsiUniverseNamesInterface from \"../../service/Call/UniverseNamesCall/EsiUniverseNamesInterface\";\n\nclass NameRepository implements NameRepositoryInterface {\n  private readonly _universeNamesCaller;\n\n  constructor(universeNamesCaller: UniverseNamesCallInterface) {\n    this._universeNamesCaller = universeNamesCaller;\n  }\n\n  public async resolveGeneric(ids: number[]): Promise<EsiUniverseNamesInterface[]> {\n    this._removeBannedIDs(ids);\n\n    let allResolvedIDs: EsiUniverseNamesInterface[] = [];\n    let failuresCount = 0;\n    let maxAllowedFailures = 20;\n\n    let chunks: number[][] = [];\n    while (ids.length > 0) {\n      chunks.push(ids.splice(0, 999));\n    }\n\n    for (let chunk of chunks) {\n      if (failuresCount >= maxAllowedFailures) {\n        throw new Error(\"\");  // TODO\n      }\n\n      try {\n        let localResolvedIDs = await this._universeNamesCaller.get(chunk);\n        allResolvedIDs = allResolvedIDs.concat(localResolvedIDs);\n      } catch (e) {\n        failuresCount++;\n\n        if (chunk.length > 1) {\n          // We split the chunk in half for retries\n          chunks.push(chunk.splice(0, Math.round(chunk.length / 2)));\n          chunks.push(chunk);\n        }\n      }\n    }\n\n    return allResolvedIDs;\n  }\n\n  private _removeBannedIDs(ids: number[]): void {\n    let index = ids.indexOf(1);\n    if (index !== -1) {\n      ids.splice(index, 1);\n    }\n  }\n}\n\nexport default NameRepository;\n","import AllianceCorporationsCallInterface from \"./AllianceCorporationsCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass AllianceCorporationsCall implements AllianceCorporationsCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  async get(id: number): Promise<number[]> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v2/alliances/${id}/corporations/`;\n  }\n}\n\nexport default AllianceCorporationsCall;\n","import EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiPublicSearchInterface from \"./EsiPublicSearchInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\nimport QueryFactoryInterface from \"../../QueryFactory/QueryFactoryInterface\";\nimport PublicSearchCallInterface from \"./PublicSearchCallInterface\";\nimport EsiCategory from \"./EsiCategory\";\n\nclass PublicSearchCall implements PublicSearchCallInterface {\n  private readonly _esiClient;\n  private readonly _queryFactory;\n  private readonly _url = \"/v2/search/\";\n\n  constructor(\n    esiClient: EsiClientInterface,\n    queryFactory: QueryFactoryInterface\n  ) {\n    this._esiClient = esiClient;\n    this._queryFactory = queryFactory;\n  }\n\n  /**\n   * @throws Error\n   */\n  async get(\n    searchString: string,\n    categories: EsiCategory[],\n    strict?: boolean\n  ): Promise<EsiPublicSearchInterface> {\n    let query = this._queryFactory.make();\n    query.add(\"search\", [searchString]);\n    query.add(\"categories\", categories);\n    if (strict !== undefined) {\n      query.add(\"strict\", [String(strict)]);\n    }\n\n    let response = await this._esiClient.getResponse(this._url, \"GET\", query);\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n}\n\nexport default PublicSearchCall;\n","import AllianceListCallInterface from \"../../service/Call/AllianceListCall/AllianceListCallInterface\";\nimport NameRepositoryInterface from \"../NameRepository/NameRepositoryInterface\";\nimport AllianceRepositoryInterface from \"./AllianceRepositoryInterface\";\nimport AllianceInfoCallInterface from \"../../service/Call/AllianceInfoCall/AllianceInfoCallInterface\";\nimport RepoAllianceInterface from \"./RepoAllianceInterface\";\nimport AllianceCorporationsCallInterface\n  from \"../../service/Call/AllianceCorporationsCall/AllianceCorporationsCallInterface\";\n\nclass AllianceRepository implements AllianceRepositoryInterface {\n  private readonly _allianceListCall;\n  private readonly _allianceInfoCall;\n  private readonly _allianceCorpsCall;\n  private readonly _nameRepo;\n\n  constructor(\n    allianceListCall: AllianceListCallInterface,\n    allianceInfoCall: AllianceInfoCallInterface,\n    allianceCorpsCall: AllianceCorporationsCallInterface,\n    nameRepo: NameRepositoryInterface\n  ) {\n    this._allianceListCall = allianceListCall;\n    this._allianceInfoCall = allianceInfoCall;\n    this._allianceCorpsCall = allianceCorpsCall;\n    this._nameRepo = nameRepo;\n  }\n\n  public async getOne(id: number): Promise<RepoAllianceInterface> {\n    let esiAlliancePromise = this._allianceInfoCall.get(id);\n    let esiAllianceCorpsPromise = this._allianceCorpsCall.get(id);\n\n    let esiAlliance = await esiAlliancePromise;\n    let repoAlliance: RepoAllianceInterface = {\n      ...esiAlliance,\n      id: id,\n      creator_corporation_name: \"#error\",\n      creator_name: \"#error\",\n      executor_corporation_name: undefined,\n      faction_name: undefined,\n      corporations: {}\n    };\n\n    let {\n      creator_corporation_id,\n      creator_id,\n      executor_corporation_id,\n      faction_id\n    } = esiAlliance;\n    let idsToResolve: number[] = [];\n    this._pushUnique(idsToResolve, creator_corporation_id);\n    this._pushUnique(idsToResolve, creator_id);\n    if (executor_corporation_id !== undefined) {\n      this._pushUnique(idsToResolve, executor_corporation_id);\n    }\n    if (faction_id !== undefined) {\n      this._pushUnique(idsToResolve, faction_id);\n    }\n\n    let esiAllianceCorps = await esiAllianceCorpsPromise;\n    let corpsNamesPromise = this._nameRepo.resolveGeneric(esiAllianceCorps);\n    let allianceNamesPromise = this._nameRepo.resolveGeneric(idsToResolve);\n\n    let allianceNames = await allianceNamesPromise;\n    allianceNames.forEach(resolvedName => {\n      let { id, name } = resolvedName;\n      if (id === creator_corporation_id) {\n        repoAlliance.creator_corporation_name = name;\n      }\n      if (id === creator_id) {\n        repoAlliance.creator_name = name;\n      }\n      if (id === executor_corporation_id) {\n        repoAlliance.executor_corporation_name = name;\n      }\n      if (id === faction_id) {\n        repoAlliance.faction_name = name;\n      }\n    });\n\n    let corpsNames = await corpsNamesPromise;\n    corpsNames.forEach(corpName => {\n      repoAlliance.corporations[corpName.id] = corpName.name;\n    });\n\n    return repoAlliance;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getList(): Promise<{\n    [key: string]: string\n  }> {\n    let allianceIDs = await this._allianceListCall.get();\n    let names = await this._nameRepo.resolveGeneric(allianceIDs);\n\n    let resolved: { [key: string]: string } = {};\n    names.forEach(({id, name}) => {\n      resolved[id] = name;\n    });\n\n    let unresolved: number[] = [];\n    allianceIDs.forEach(id => {\n      if (!resolved.hasOwnProperty(id)) {\n        unresolved.push(id);\n      }\n    });\n    unresolved.forEach(id => {\n      resolved[id] = `UNRESOLVED#${id}`;\n    });\n\n    return resolved;\n  }\n\n  private _pushUnique(inputArray: number[], value: number): number[] {\n    if (!inputArray.includes(value)) {\n      inputArray.push(value);\n    }\n\n    return inputArray;\n  }\n}\n\nexport default AllianceRepository;\n","const categoriesForType = [\"agent\", \"alliance\", \"character\", \"constellation\", \"corporation\", \"faction\", \"inventory_type\", \"region\", \"solar_system\", \"station\"] as const;\ntype EsiCategory = typeof categoriesForType[number];\nconst esiCategories: EsiCategory[] = [\"agent\", \"alliance\", \"character\", \"constellation\", \"corporation\", \"faction\", \"inventory_type\", \"region\", \"solar_system\", \"station\"];\n\nexport default EsiCategory;\nexport { esiCategories };","import SearchRepositoryInterface from \"./SearchRepositoryInterface\";\nimport NameRepositoryInterface from \"../NameRepository/NameRepositoryInterface\";\nimport PublicSearchCallInterface from \"../../service/Call/PublicSearchCall/PublicSearchCallInterface\";\nimport RepoCategory from \"./RepoCategory\";\nimport EsiCategory, {esiCategories} from \"../../service/Call/PublicSearchCall/EsiCategory\";\nimport EsiUniverseNamesInterface from \"../../service/Call/UniverseNamesCall/EsiUniverseNamesInterface\";\nimport ResultWithLinkInterface from \"./ResulWithLinkInterface\";\n\nclass SearchRepository implements SearchRepositoryInterface {\n  private readonly _nameRepo;\n  private readonly _publicSearchCall;\n\n  constructor(\n    nameRepo: NameRepositoryInterface,\n    publicSearchCall: PublicSearchCallInterface\n  ) {\n    this._nameRepo = nameRepo;\n    this._publicSearchCall = publicSearchCall;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async publicSearch(\n    searchString: string,\n    category: RepoCategory,\n    strict: boolean\n  ): Promise<ResultWithLinkInterface[]> {\n    let categoriesForCall: EsiCategory[];\n    if (category === \"all\") {\n      categoriesForCall = esiCategories;\n    } else {\n      categoriesForCall = [category];\n    }\n    let search = await this._publicSearchCall.get(searchString, categoriesForCall, strict);\n\n    let ids: number[] = [];\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (let [key, value] of Object.entries(search)) {\n      ids = ids.concat(value);\n    }\n    let names = await this._nameRepo.resolveGeneric(ids);\n\n    return this._composeResult(names);\n  }\n\n  public async forAutocomplete(\n    searchString: string,\n    category: RepoCategory,\n  ): Promise<string[]> {\n    let categoriesForCall: EsiCategory[];\n    if (category === \"all\") {\n      categoriesForCall = esiCategories;\n    } else {\n      categoriesForCall = [category];\n    }\n    let search = await this._publicSearchCall.get(searchString, categoriesForCall, false);\n\n    let ids: number[] = [];\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (let [key, value] of Object.entries(search)) {\n      ids = ids.concat(value);\n    }\n\n    let uniNames = await this._nameRepo.resolveGeneric(ids);\n    let justNames: string[] = [];\n    let lowercaseSearchString = searchString.toLowerCase();\n    uniNames.forEach(uniName => {\n      let { name } = uniName;\n      if (name.toLowerCase().startsWith(lowercaseSearchString)) {\n        justNames.push(name);\n      }\n    });\n\n    let orderedNames = justNames.sort((a, b) => a.length - b.length);\n\n    return orderedNames;\n  }\n\n  private _composeResult(names: EsiUniverseNamesInterface[]): ResultWithLinkInterface[] {\n    let result: ResultWithLinkInterface[] = [];\n    names.forEach(name => {\n      let prettyCategory;\n      let link;\n      switch (name.category) {\n        case \"alliance\":\n          prettyCategory = \"Alliance\";\n          link = \"/alliance/\";\n          break;\n        case \"character\":\n          prettyCategory = \"Character\";\n          link = \"/character/\";\n          break;\n        case \"constellation\":\n          prettyCategory = \"Constellation\";\n          //link = \"/constellation/\";\n          link = null;\n          break;\n        case \"corporation\":\n          prettyCategory = \"Corporation\";\n          link = \"/corporation/\";\n          break;\n        case \"inventory_type\":\n          prettyCategory = \"Item\";\n          //link = \"/type/\";\n          link = null;\n          break;\n        case \"region\":\n          prettyCategory = \"Region\";\n          //link = \"/region/\";\n          link = null;\n          break;\n        case \"solar_system\":\n          prettyCategory = \"System\";\n          //link = \"/system/\";\n          link = null;\n          break;\n        case \"station\":\n          prettyCategory = \"Station\";\n          //link = \"/station/\";\n          link = null\n          break;\n        case \"faction\":\n          prettyCategory = \"Faction\";\n          //link = \"/faction/\";\n          link = null;\n          break;\n        default:\n          prettyCategory = name.category;\n          link = null;\n      }\n\n      result.push({\n        ...name,\n        prettyCategory: prettyCategory,\n        link: link\n      });\n    });\n\n    return result;\n  }\n}\n\nexport default SearchRepository;\n","import CharacterInfoCallInterface from \"./CharacterInfoCallInterface\";\nimport EsiCharacterInfoInterface from \"./EsiCharacterInfoInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass CharacterInfoCall implements CharacterInfoCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(id: number): Promise<EsiCharacterInfoInterface> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v4/characters/${id}/`;\n  }\n}\n\nexport default CharacterInfoCall;\n","import ConstellationInfoCallInterface from \"./ConstellationInfoCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiConstellationInfoInterface from \"./EsiConstellationInfoInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass ConstellationInfoCall implements ConstellationInfoCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  public async get(id: number): Promise<EsiConstellationInfoInterface> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v1/universe/constellations/${id}/`;\n  }\n}\n\nexport default ConstellationInfoCall;\n","import CorporationInfoCallInterface from \"./CorporationInfoCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiCorporationInfoInterface from \"./EsiCorporationInfoInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass CorporationInfoCall implements CorporationInfoCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(id: number): Promise<EsiCorporationInfoInterface> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v5/corporations/${id}/`;\n  }\n}\n\nexport default CorporationInfoCall;\n","import TypeInfoCallInterface from \"./TypeInfoCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiTypeInfoInterface from \"./EsiTypeInfoInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass TypeInfoCall implements TypeInfoCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(id: number): Promise<EsiTypeInfoInterface> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v3/universe/types/${id}/`;\n  }\n}\n\nexport default TypeInfoCall;\n","import RegionInfoCallInterface from \"./RegionInfoCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiRegionInfoInterface from \"./EsiRegionInfoInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass RegionInfoCall implements RegionInfoCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(id: number): Promise<EsiRegionInfoInterface> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v1/universe/regions/${id}/`;\n  }\n}\n\nexport default RegionInfoCall;\n","import SystemInfoCallInterface from \"./SystemInfoCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiSystemInfoInterface from \"./EsiSystemInfoInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass SystemInfoCall implements SystemInfoCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(id: number): Promise<EsiSystemInfoInterface> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v4/universe/systems/${id}/`;\n  }\n}\n\nexport default SystemInfoCall;\n","import StationInfoCallInterface from \"./StationInfoCallInterface\";\nimport EsiStationInfoInterface from \"./EsiStationInfoInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass StationInfoCall implements StationInfoCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  public async get(id: number): Promise<EsiStationInfoInterface> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v2/universe/stations/${id}/`;\n  }\n}\n\nexport default StationInfoCall;\n","import FactionCallInterface from \"./FactionCallInterface\";\nimport EsiFactionInterface from \"./EsiFactionInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass FactionCall implements FactionCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(): Promise<EsiFactionInterface[]> {\n    let response = await this._esiClient.getResponse(this._getUrl(), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(): string {\n    return `/v2/universe/factions/`;\n  }\n}\n\nexport default FactionCall;\n","import AncestryCallInterface from \"./AncestryCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiAncestryInterface from \"./EsiAncestryInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass AncestryCall implements AncestryCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(): Promise<EsiAncestryInterface[]> {\n    let response = await this._esiClient.getResponse(this._getUrl(), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(): string {\n    return `/v1/universe/ancestries/`;\n  }\n}\n\nexport default AncestryCall;\n","import BloodlineCallInterface from \"./BloodlineCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiBloodlineInterface from \"./EsiBloodlineInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass BloodlineCall implements BloodlineCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(): Promise<EsiBloodlineInterface[]> {\n    let response = await this._esiClient.getResponse(this._getUrl(), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(): string {\n    return `/v1/universe/bloodlines/`;\n  }\n}\n\nexport default BloodlineCall;\n","import AncestryRepositoryInterface from \"./AncestryRepositoryInterface\";\nimport EsiAncestryInterface from \"../../service/Call/AncestryCall/EsiAncestryInterface\";\nimport AncestryCallInterface from \"../../service/Call/AncestryCall/AncestryCallInterface\";\n\nclass AncestryRepository implements AncestryRepositoryInterface {\n  private readonly _ancestryCall;\n\n  constructor(ancestryCall: AncestryCallInterface) {\n    this._ancestryCall = ancestryCall;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getName(id: number): Promise<string> {\n    let ancestries = await this._ancestryCall.get();\n    let foundAncestry: EsiAncestryInterface | null = null;\n    for (let ancestry of ancestries) {\n      if (ancestry.id === id) {\n        foundAncestry = ancestry;\n        break;\n      }\n    }\n\n    if (foundAncestry === null) {\n      throw new Error(\"Ancestry not found\");\n    }\n\n    return foundAncestry.name;\n  }\n}\n\nexport default AncestryRepository;\n","import EsiUniverseNamesInterface from \"../../service/Call/UniverseNamesCall/EsiUniverseNamesInterface\";\n\nabstract class AbstractRepository {\n  protected _pushUnique(inputArray: number[], value: number): number[] {\n    if (!inputArray.includes(value)) {\n      inputArray.push(value);\n    }\n\n    return inputArray;\n  }\n\n  protected _orderNamesByID(\n    names: EsiUniverseNamesInterface[]\n  ): {\n    [key: string]: EsiUniverseNamesInterface\n  } {\n    let orderedNames: {[key: string]: EsiUniverseNamesInterface} = {};\n    names.forEach(name => {\n      orderedNames[String(name.id)] = name;\n    });\n\n    return orderedNames;\n  }\n}\n\nexport default AbstractRepository;\n","import BloodlineRepositoryInterface from \"./BloodlineRepositoryInterface\";\nimport BloodlineCallInterface from \"../../service/Call/BloodlineCall/BloodlineCallInterface\";\nimport EsiBloodlineInterface from \"../../service/Call/BloodlineCall/EsiBloodlineInterface\";\nimport RepoBloodlineInterface from \"./RepoBloodlineInterface\";\nimport RaceRepositoryInterface from \"../RaceRepository/RaceRepositoryInterface\";\nimport NameRepositoryInterface from \"../NameRepository/NameRepositoryInterface\";\nimport AbstractRepository from \"../AbstractRepository/AbstractRepository\";\nimport EsiUniverseNamesInterface from \"../../service/Call/UniverseNamesCall/EsiUniverseNamesInterface\";\n\nclass BloodlineRepository extends AbstractRepository implements BloodlineRepositoryInterface {\n  private readonly _bloodlineCall;\n  private readonly _raceRepo;\n  private readonly _nameRepo;\n\n  constructor(\n    bloodlineCall: BloodlineCallInterface,\n    raceRepo: RaceRepositoryInterface,\n    nameRepo: NameRepositoryInterface\n  ) {\n    super();\n    this._bloodlineCall = bloodlineCall;\n    this._raceRepo = raceRepo;\n    this._nameRepo = nameRepo;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getAll(): Promise<RepoBloodlineInterface[]> {\n    return [];\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getOne(id: number): Promise<RepoBloodlineInterface> {\n    let foundBloodline = await this._getEsiBloodline(id);\n    let {\n      race_id,\n      corporation_id,\n      ship_type_id\n    } = foundBloodline;\n\n    let raceNamePromise = this._raceRepo.getName(race_id);\n\n    let idsToResolve = this._getIDsToResolve([foundBloodline]);\n    let indexedNames: {[key: string]: EsiUniverseNamesInterface} = {};\n    if (idsToResolve.length > 0) {\n      indexedNames = this._orderNamesByID(await this._nameRepo.resolveGeneric(idsToResolve));\n    }\n\n    let ship_type_name = undefined;\n    if (ship_type_id !== undefined && ship_type_id !== null) {\n      ship_type_name = indexedNames[ship_type_id].name ?? \"#error\";\n    }\n\n    return {\n      ...foundBloodline,\n      corporation_name: indexedNames[corporation_id].name ?? \"#error\",\n      race_name: await raceNamePromise,\n      ship_type_name: ship_type_name\n    }\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getName(id: number): Promise<string> {\n    let foundBloodline = await this._getEsiBloodline(id);\n\n    return foundBloodline.name;\n  }\n\n  private _getIDsToResolve(bloodlines: EsiBloodlineInterface[]): number[] {\n    let idsToResolve: number[] = [];\n\n    bloodlines.forEach(bloodline => {\n      let {\n        corporation_id,\n        ship_type_id\n      } = bloodline;\n      this._pushUnique(idsToResolve, corporation_id);\n      if (ship_type_id !== undefined && ship_type_id !== null) {\n        this._pushUnique(idsToResolve, ship_type_id);\n      }\n    });\n\n    return idsToResolve;\n  }\n\n  /**\n   * @throws Error\n   */\n  private async _getEsiBloodline(id: number): Promise<EsiBloodlineInterface> {\n    let bloodlines = await this._bloodlineCall.get();\n    let foundBloodline: EsiBloodlineInterface | null = null;\n    for (let bloodline of bloodlines) {\n      if (bloodline.bloodline_id === id) {\n        foundBloodline = bloodline;\n        break;\n      }\n    }\n\n    if (foundBloodline === null) {\n      throw new Error(\"Bloodline not found\");\n    }\n\n    return foundBloodline;\n  }\n}\n\nexport default BloodlineRepository;\n","import CharacterRepositoryInterface from \"./CharacterRepositoryInterface\";\nimport RepoCharacterInterface from \"./RepoCharacterInterface\";\nimport AncestryRepositoryInterface from \"../AncestryRepository/AncestryRepositoryInterface\";\nimport CharacterInfoCallInterface from \"../../service/Call/CharacterInfoCall/CharacterInfoCallInterface\";\nimport BloodlineRepositoryInterface from \"../BloodlineRepository/BloodlineRepositoryInterface\";\nimport NameRepositoryInterface from \"../NameRepository/NameRepositoryInterface\";\nimport RaceRepositoryInterface from \"../RaceRepository/RaceRepositoryInterface\";\nimport CharacterCorpHistoryCallInterface\n  from \"../../service/Call/CharacterCorpHistoryCall/CharacterCorpHistoryCallInterface\";\nimport RepoCharacterCorpHistoryInterface from \"./RepoCharacterCorpHistoryInterface\";\n\nclass CharacterRepository implements CharacterRepositoryInterface {\n  private readonly _characterInfoCall;\n  private readonly _characterCorpHistoryCall;\n  private readonly _ancestryRepo;\n  private readonly _bloodlineRepo;\n  private readonly _nameRepo;\n  private readonly _raceRepo;\n\n  constructor(\n    characterInfoCall: CharacterInfoCallInterface,\n    characterCorpHistoryCall: CharacterCorpHistoryCallInterface,\n    ancestryRepo: AncestryRepositoryInterface,\n    bloodlineRepo: BloodlineRepositoryInterface,\n    nameRepo: NameRepositoryInterface,\n    raceRepo: RaceRepositoryInterface\n  ) {\n    this._characterInfoCall = characterInfoCall;\n    this._characterCorpHistoryCall = characterCorpHistoryCall;\n    this._ancestryRepo = ancestryRepo;\n    this._bloodlineRepo = bloodlineRepo;\n    this._nameRepo = nameRepo;\n    this._raceRepo = raceRepo;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getOne(id: number): Promise<RepoCharacterInterface> {\n    let esiCharPromise = this._characterInfoCall.get(id);\n    let repoCorpHistoryPromise = this._getCorpHistory(id);\n    let esiChar = await esiCharPromise;\n    let repoChar: RepoCharacterInterface = {\n      ...esiChar,\n      alliance_name: esiChar.alliance_id === undefined ? undefined : \"#error\",\n      ancestry_name: esiChar.ancestry_id === undefined ? undefined : \"#error\",\n      bloodline_name: \"#error\",\n      corporation_name: \"#name\",\n      faction_name: esiChar.faction_id === undefined ? undefined : \"#error\",\n      race_name: \"#error\",\n      id: id,\n      corporation_history: []\n    }\n\n    let {\n      alliance_id,\n      ancestry_id,\n      bloodline_id,\n      corporation_id,\n      faction_id,\n      race_id\n    } = esiChar;\n    let idsToResolve: number[] = [];\n    idsToResolve.push(corporation_id);\n    if (alliance_id !== undefined) {\n      idsToResolve.push(alliance_id);\n    }\n    if (faction_id !== undefined) {\n      idsToResolve.push(faction_id);\n    }\n\n    let ancestryPromise = null; // Because ancestry is optional\n    if (ancestry_id !== undefined) {\n      ancestryPromise = this._ancestryRepo.getName(ancestry_id);\n    }\n    let bloodlinePromise = this._bloodlineRepo.getName(bloodline_id);\n    let namesPromise = this._nameRepo.resolveGeneric(idsToResolve);\n    let racePromise = this._raceRepo.getName(race_id);\n\n    if (ancestryPromise !== null) {\n      try {\n        repoChar.ancestry_name = await ancestryPromise;\n      } catch (e) {\n        // Intentionally left blank, it's a call of secondary importance\n      }\n    }\n    try {\n      repoChar.bloodline_name = await bloodlinePromise;\n    } catch (e) {\n      // Intentionally left blank, it's a call of secondary importance\n    }\n    try {\n      repoChar.race_name = await racePromise;\n    } catch (e) {\n      // Intentionally left blank, it's a call of secondary importance\n    }\n    try {\n      let charNames = await namesPromise;\n      charNames.forEach(resolvedName => {\n        let { id, name } = resolvedName;\n        if (id === corporation_id) {\n          repoChar.corporation_name = name;\n        }\n        if (id === alliance_id) {\n          repoChar.alliance_name = name;\n        }\n        if (id === faction_id) {\n          repoChar.faction_name = name;\n        }\n      });\n    } catch (e) {\n      // Intentionally left blank, it's a call of secondary importance\n    }\n\n    repoChar.corporation_history = await repoCorpHistoryPromise;\n\n    return repoChar;\n  }\n\n  private async _getCorpHistory(id: number): Promise<RepoCharacterCorpHistoryInterface[]> {\n    let corpHistory = await this._characterCorpHistoryCall.get(id);\n    let idsToResolve: number[] = [];\n    corpHistory.forEach(corp => {\n      if (corp.is_deleted === undefined || !corp.is_deleted) {\n        idsToResolve = this._pushUnique(idsToResolve, corp.corporation_id);\n      }\n    });\n\n    let names = await this._nameRepo.resolveGeneric(idsToResolve);\n    let repoCorpHistory: RepoCharacterCorpHistoryInterface[] = [];\n    corpHistory.forEach(corp => {\n      let { corporation_id } = corp;\n      let foundName = `#${corporation_id}`;\n      for (let name of names) {\n        if (name.id === corporation_id) {\n          foundName = name.name;\n          break;\n        }\n      }\n\n      repoCorpHistory.push({\n        ...corp,\n        corporation_name: foundName\n      });\n    });\n\n    return repoCorpHistory;\n  }\n\n  private _pushUnique(inputArray: number[], value: number): number[] {\n    if (!inputArray.includes(value)) {\n      inputArray.push(value);\n    }\n\n    return inputArray;\n  }\n}\n\nexport default CharacterRepository;\n","import RaceCallInterface from \"./RaceCallInterface\";\nimport EsiRaceInterface from \"./EsiRaceInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass RaceCall implements RaceCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(): Promise<EsiRaceInterface[]> {\n    let response = await this._esiClient.getResponse(this._getUrl(), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(): string {\n    return `/v1/universe/races/`;\n  }\n}\n\nexport default RaceCall;\n","import RaceRepositoryInterface from \"./RaceRepositoryInterface\";\nimport RaceCallInterface from \"../../service/Call/RaceCall/RaceCallInterface\";\nimport EsiRaceInterface from \"../../service/Call/RaceCall/EsiRaceInterface\";\nimport RepoRaceInterface from \"./RepoRaceInterface\";\nimport NameRepositoryInterface from \"../NameRepository/NameRepositoryInterface\";\nimport AbstractRepository from \"../AbstractRepository/AbstractRepository\";\nimport FactionRepositoryInterface from \"../FactionRepository/FactionRepositoryInterface\";\n\nclass RaceRepository extends AbstractRepository implements RaceRepositoryInterface {\n  private readonly _raceCall;\n  private readonly _nameRepo;\n  private readonly _factionRepo;\n\n  constructor(\n    raceCall: RaceCallInterface,\n    nameRepo: NameRepositoryInterface,\n    factionRepo: FactionRepositoryInterface\n  ) {\n    super();\n    this._raceCall = raceCall;\n    this._nameRepo = nameRepo;\n    this._factionRepo = factionRepo;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getAll(): Promise<RepoRaceInterface[]> {\n    let esiRaces = await this._raceCall.get();\n    let idsToResolve: number[] = [];\n    let repoRaces: RepoRaceInterface[] = [];\n    esiRaces.forEach(esiRace => {\n      this._pushUnique(idsToResolve, esiRace.alliance_id);\n      repoRaces.push({\n        ...esiRace,\n        alliance_name: \"#error\",\n      });\n    });\n\n    let names = this._orderNamesByID(await this._nameRepo.resolveGeneric(idsToResolve));\n    repoRaces.forEach(repoRace => {\n      if (names[String(repoRace.alliance_id)] !== undefined) {\n        repoRace.alliance_name = names[String(repoRace.alliance_id)].name;\n      }\n    });\n\n    return repoRaces;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getOne(id: number): Promise<RepoRaceInterface> {\n    let foundRace = await this._getEsiRace(id);\n\n    return {\n      ...foundRace,\n      alliance_name: await this._factionRepo.getName(foundRace.alliance_id)\n    };\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getName(id: number): Promise<string> {\n    let foundRace = await this._getEsiRace(id);\n\n    return foundRace.name;\n  }\n\n  /**\n   * @throws Error\n   */\n  private async _getEsiRace(id: number): Promise<EsiRaceInterface> {\n    let races = await this._raceCall.get();\n    let foundRace: EsiRaceInterface | null = null;\n    for (let race of races) {\n      if (race.race_id === id) {\n        foundRace = race;\n        break;\n      }\n    }\n\n    if (foundRace === null) {\n      throw new Error(\"Race not found\");\n    }\n\n    return foundRace;\n  }\n}\n\nexport default RaceRepository;\n","import CharacterCorpHistoryCallInterface from \"./CharacterCorpHistoryCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiCharacterCorpHistoryInterface from \"./EsiCharacterCorpHistoryInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass CharacterCorpHistoryCall implements CharacterCorpHistoryCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  public async get(id: number): Promise<EsiCharacterCorpHistoryInterface[]> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v1/characters/${id}/corporationhistory/`;\n  }\n}\n\nexport default CharacterCorpHistoryCall;\n","import DateFormatterInterface from \"./DateFormatterInterface\";\n\nclass DateFormatter implements DateFormatterInterface {\n  public withDateTime(date: Date): string {\n    let yyyy = `${date.getUTCFullYear()}`;\n    let mm = this.toStringWithLeadingZero(date.getUTCMonth() + 1);\n    let dd = this.toStringWithLeadingZero(date.getUTCDate());\n    let hr = this.toStringWithLeadingZero(date.getUTCHours());\n    let min = this.toStringWithLeadingZero(date.getUTCMinutes());\n    let sec = this.toStringWithLeadingZero(date.getUTCSeconds());\n\n    return `${yyyy}.${mm}.${dd} ${hr}:${min}:${sec}`;\n  }\n\n  public onlyDate(date: Date): string {\n    let yyyy = `${date.getUTCFullYear()}`;\n    let mm = this.toStringWithLeadingZero(date.getUTCMonth() + 1);\n    let dd = this.toStringWithLeadingZero(date.getUTCDate());\n\n    return `${yyyy}.${mm}.${dd}`;\n  }\n\n  private toStringWithLeadingZero(value: number): string {\n    if (value < 10) {\n      return `0${value}`;\n    }\n\n    return `${value}`;\n  }\n}\n\nexport default DateFormatter;\n","import CorporationAllianceHistoryCallInterface from \"./CorporationAllianceHistoryCallInterface\";\nimport EsiCorporationAllianceHistoryInterface from \"./EsiCorporationAllianceHistoryInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass CorporationAllianceHistoryCall implements CorporationAllianceHistoryCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  public async get(id: number): Promise<EsiCorporationAllianceHistoryInterface[]> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v3/corporations/${id}/alliancehistory/`;\n  }\n}\n\nexport default CorporationAllianceHistoryCall;\n","import CorporationRepositoryInterface from \"./CorporationRepositoryInterface\";\nimport RepoCorporationInterface from \"./RepoCorporationInterface\";\nimport CorporationInfoCallInterface from \"../../service/Call/CorporationInfoCall/CorporationInfoCallInterface\";\nimport NameRepositoryInterface from \"../NameRepository/NameRepositoryInterface\";\nimport CorporationAllianceHistoryCallInterface\n  from \"../../service/Call/CorporationAllianceHistoryCall/CorporationAllianceHistoryCallInterface\";\nimport RepoCorpAllianceHistoryInterface from \"./RepoCorpAllianceHistoryInterface\";\n\nclass CorporationRepository implements CorporationRepositoryInterface {\n  private readonly _corpInfoCall;\n  private readonly _corpAllianceHistoryCall;\n  private readonly _nameRepo;\n\n  constructor(\n    corpInfoCall: CorporationInfoCallInterface,\n    corpAllianceHistoryCall: CorporationAllianceHistoryCallInterface,\n    nameRepo: NameRepositoryInterface\n  ) {\n    this._corpInfoCall = corpInfoCall;\n    this._corpAllianceHistoryCall = corpAllianceHistoryCall;\n    this._nameRepo = nameRepo;\n  }\n\n  public async getOne(id: number): Promise<RepoCorporationInterface> {\n    let allianceHistoryPromise = this.getAllianceHistory(id);\n\n    let esiCorp = await this._corpInfoCall.get(id);\n    let repoCorp: RepoCorporationInterface = {\n      ...esiCorp,\n      alliance_name: undefined,\n      ceo_name: \"#error\",\n      creator_name: \"#error\",\n      faction_name: undefined,\n      home_station_name: undefined,\n      alliance_history: [],\n      id: id,\n    };\n\n    let {\n      alliance_id,\n      ceo_id,\n      creator_id,\n      faction_id,\n      home_station_id\n    } = esiCorp;\n    let idsToResolve: number[] = [];\n    this._pushUnique(idsToResolve, ceo_id);\n    this._pushUnique(idsToResolve, creator_id);\n    if (alliance_id !== undefined) {\n      this._pushUnique(idsToResolve, alliance_id);\n    }\n    if (faction_id !== undefined) {\n      this._pushUnique(idsToResolve, faction_id);\n    }\n    if (home_station_id !== undefined) {\n      this._pushUnique(idsToResolve, home_station_id);\n    }\n\n    let corpNames = await this._nameRepo.resolveGeneric(idsToResolve);\n    corpNames.forEach(resolvedName => {\n      let { id, name } = resolvedName;\n\n      if (id === alliance_id) {\n        repoCorp.alliance_name = name;\n      }\n      if (id === ceo_id) {\n        repoCorp.ceo_name = name;\n      }\n      if (id === creator_id) {\n        repoCorp.creator_name = name;\n      }\n      if (id === faction_id) {\n        repoCorp.faction_name = name;\n      }\n      if (id === home_station_id) {\n        repoCorp.home_station_name = name;\n      }\n    });\n\n    repoCorp.alliance_history = await allianceHistoryPromise;\n\n    return repoCorp;\n  }\n\n  public async getAllianceHistory(id: number): Promise<RepoCorpAllianceHistoryInterface[]> {\n    let corpHistory = await this._corpAllianceHistoryCall.get(id);\n\n    let idsToResolve: number[] = [];\n    let recordIDs: number[] = [];\n    let indexedCorpHistory: { [key: string]: RepoCorpAllianceHistoryInterface } = {};\n    corpHistory.forEach(record => {\n      let allianceNamePlaceholder = undefined;\n      if (record.alliance_id !== undefined) {\n        idsToResolve = this._pushUnique(idsToResolve, record.alliance_id);\n        allianceNamePlaceholder = \"#error\";\n      }\n      recordIDs.push(record.record_id);\n      indexedCorpHistory[record.record_id] = {\n        ...record,\n        end_date: undefined,\n        alliance_name: allianceNamePlaceholder,\n      };\n    });\n    let names = await this._nameRepo.resolveGeneric(idsToResolve);\n\n    let historyToReturn: RepoCorpAllianceHistoryInterface[] = [];\n    recordIDs.sort((a, b) => a - b);\n    for (let i = 0; i < recordIDs.length; i++) {\n      let id = recordIDs[i];\n\n      // Add alliance name, if the record has the id\n      if (indexedCorpHistory[id].alliance_id !== undefined) {\n        for (let name of names) {\n          if (name.id === indexedCorpHistory[id].alliance_id) {\n            indexedCorpHistory[id].alliance_name = name.name;\n            break;\n          }\n        }\n      }\n\n      // Add end date, if the current record is an alliance, and the following is not\n      if (\n        indexedCorpHistory[id].alliance_id !== undefined\n        && i < recordIDs.length - 1\n        && indexedCorpHistory[recordIDs[i + 1]].alliance_id === undefined\n      ) {\n        indexedCorpHistory[id].end_date = indexedCorpHistory[recordIDs[i + 1]].start_date;\n      }\n\n      // Add to the elements to return if it's an alliance\n      if (indexedCorpHistory[id].alliance_id !== undefined) {\n        historyToReturn.unshift(indexedCorpHistory[id]);\n      }\n    }\n\n    return historyToReturn;\n  }\n\n  private _pushUnique(inputArray: number[], value: number): number[] {\n    if (!inputArray.includes(value)) {\n      inputArray.push(value);\n    }\n\n    return inputArray;\n  }\n}\n\nexport default CorporationRepository;\n","import FactionRepositoryInterface from \"./FactionRepositoryInterface\";\nimport RepoFactionInterface from \"./RepoFactionInterface\";\nimport AbstractRepository from \"../AbstractRepository/AbstractRepository\";\nimport FactionCallInterface from \"../../service/Call/FactionCall/FactionCallInterface\";\nimport NameRepositoryInterface from \"../NameRepository/NameRepositoryInterface\";\nimport EsiUniverseNamesInterface from \"../../service/Call/UniverseNamesCall/EsiUniverseNamesInterface\";\nimport EsiFactionInterface from \"../../service/Call/FactionCall/EsiFactionInterface\";\n\nclass FactionRepository extends AbstractRepository implements FactionRepositoryInterface {\n  private readonly _factionCall;\n  private readonly _nameRepo;\n\n  constructor(\n    factionCall: FactionCallInterface,\n    nameRepo: NameRepositoryInterface\n  ) {\n    super();\n    this._factionCall = factionCall;\n    this._nameRepo = nameRepo;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getAll(): Promise<RepoFactionInterface[]> {\n    let esiFactions = await this._factionCall.get();\n    let idsToResolve: number[] = this._getIDsToResolve(esiFactions);\n    let indexedNames: {[key: string]: EsiUniverseNamesInterface} = {}\n    if (idsToResolve.length > 0) {\n      indexedNames = this._orderNamesByID(await this._nameRepo.resolveGeneric(idsToResolve));\n    }\n\n    let repoFactions: RepoFactionInterface[] = [];\n    esiFactions.forEach(esiFaction => {\n      repoFactions.push(this._assembleRepoFaction(esiFaction, indexedNames));\n    });\n\n    return repoFactions;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getOne(id: number): Promise<RepoFactionInterface> {\n    let foundFaction = await this._getEsiFaction(id);\n\n    let idsToResolve = this._getIDsToResolve([foundFaction]);\n    let indexedNames: {[key: string]: EsiUniverseNamesInterface} = {}\n    if (idsToResolve.length > 0) {\n      indexedNames = this._orderNamesByID(await this._nameRepo.resolveGeneric(idsToResolve));\n    }\n\n    return this._assembleRepoFaction(foundFaction, indexedNames);\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getName(id: number): Promise<string> {\n    let foundFaction = await this._getEsiFaction(id);\n\n    return foundFaction.name;\n  }\n\n  /**\n   * @throws Error\n   */\n  private async _getEsiFaction(id: number): Promise<EsiFactionInterface> {\n    let esiFactions = await this._factionCall.get();\n    let foundFaction: EsiFactionInterface | null = null;\n    for (let esiFaction of esiFactions) {\n      if (esiFaction.faction_id === id) {\n        foundFaction = esiFaction;\n        break;\n      }\n    }\n    if (foundFaction === null) {\n      throw new Error(\"Faction not found\");\n    }\n\n    return foundFaction;\n  }\n\n  private _getIDsToResolve(factions: EsiFactionInterface[]): number[] {\n    let idsToResolve: number[] = [];\n\n    factions.forEach(faction => {\n      let {\n        corporation_id,\n        militia_corporation_id,\n        solar_system_id\n      } = faction;\n      if (corporation_id !== undefined) {\n        this._pushUnique(idsToResolve, corporation_id);\n      }\n      if (militia_corporation_id !== undefined) {\n        this._pushUnique(idsToResolve, militia_corporation_id);\n      }\n      if (solar_system_id !== undefined) {\n        this._pushUnique(idsToResolve, solar_system_id);\n      }\n    });\n\n    return idsToResolve;\n  }\n\n  private _assembleRepoFaction(\n    esiFaction: EsiFactionInterface,\n    indexedNames: {[key: string]: EsiUniverseNamesInterface}\n  ): RepoFactionInterface {\n    let {\n      corporation_id,\n      militia_corporation_id,\n      solar_system_id\n    } = esiFaction;\n\n    let corporation_name = undefined;\n    let militia_corporation_name = undefined;\n    let solar_system_name = undefined;\n\n    if (corporation_id !== undefined) {\n      corporation_name = indexedNames[corporation_id].name ?? \"#error\";\n    }\n    if (militia_corporation_id !== undefined) {\n      militia_corporation_name = indexedNames[militia_corporation_id].name ?? \"#error\";\n    }\n    if (solar_system_id !== undefined) {\n      solar_system_name = indexedNames[solar_system_id].name ?? \"#error\";\n    }\n\n    return {\n      ...esiFaction,\n      corporation_name: corporation_name,\n      militia_corporation_name: militia_corporation_name,\n      solar_system_name: solar_system_name\n    };\n  }\n}\n\nexport default FactionRepository;\n","import RSSRepositoryInterface from \"./RSSRepositoryInterface\";\nimport RSSFeedEntryInterface from \"./RSSFeedEntryInterface\";\n\nclass RSSRepository implements RSSRepositoryInterface {\n  public async getEveNewsFeed(): Promise<RSSFeedEntryInterface[]> {\n    return this._fetch(\"https://www.eveonline.com/rss/json/news\");\n  }\n\n  public async getDevBlogsFeed(): Promise<RSSFeedEntryInterface[]> {\n    return this._fetch(\"https://www.eveonline.com/rss/json/dev-blogs\");\n  }\n\n  public async getPatchNotesFeed(): Promise<RSSFeedEntryInterface[]> {\n    return this._fetch(\"https://www.eveonline.com/rss/json/patch-notes\");\n  }\n\n  private async _fetch(url: string): Promise<RSSFeedEntryInterface[]> {\n    let response = await fetch(\n      url,\n      {\n        cache: \"default\",\n      }\n    );\n\n    return response.json();\n  }\n}\n\nexport default RSSRepository;\n","import StatusRepositoryInterface from \"./StatusRepositoryInterface\";\nimport StatusCallInterface from \"../../service/Call/StatusCall/StatusCallInterface\";\n\nclass StatusRepository implements StatusRepositoryInterface {\n  private readonly _statusCall;\n\n  constructor(statusCall: StatusCallInterface) {\n    this._statusCall = statusCall;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async isEveOnline(): Promise<boolean> {\n    let status = await this._statusCall.get();\n\n    return status.players > 100;\n  }\n}\n\nexport default StatusRepository;\n","import EsiClient from \"../EsiClient/EsiClient\";\nimport EsiErrorManagerInterface from \"../EsiErrorManager/EsiErrorManagerInterface\";\nimport EsiErrorManager from \"../EsiErrorManager/EsiErrorManager\";\nimport QueryFactoryInterface from \"../QueryFactory/QueryFactoryInterface\";\nimport QueryFactory from \"../QueryFactory/QueryFactory\";\nimport StatusCall from \"../Call/StatusCall/StatusCall\";\nimport StatusCallInterface from \"../Call/StatusCall/StatusCallInterface\";\nimport UniverseNamesCallInterface from \"../Call/UniverseNamesCall/UniverseNamesCallInterface\";\nimport UniverseNamesCall from \"../Call/UniverseNamesCall/UniverseNamesCall\";\nimport AllianceListCallInterface from \"../Call/AllianceListCall/AllianceListCallInterface\";\nimport AllianceListCall from \"../Call/AllianceListCall/AllianceListCall\";\nimport AllianceInfoCallInterface from \"../Call/AllianceInfoCall/AllianceInfoCallInterface\";\nimport AllianceInfoCall from \"../Call/AllianceInfoCall/AllianceInfoCall\";\nimport NameRepositoryInterface from \"../../repository/NameRepository/NameRepositoryInterface\";\nimport NameRepository from \"../../repository/NameRepository/NameRepository\";\nimport AllianceCorporationsCallInterface from \"../Call/AllianceCorporationsCall/AllianceCorporationsCallInterface\";\nimport AllianceCorporationsCall from \"../Call/AllianceCorporationsCall/AllianceCorporationsCall\";\nimport PublicSearchCallInterface from \"../Call/PublicSearchCall/PublicSearchCallInterface\";\nimport PublicSearchCall from \"../Call/PublicSearchCall/PublicSearchCall\";\nimport AllianceRepositoryInterface from \"../../repository/AllianceRepository/AllianceRepositoryInterface\";\nimport AllianceRepository from \"../../repository/AllianceRepository/AllianceRepository\";\nimport SearchRepositoryInterface from \"../../repository/SearchRepository/SearchRepositoryInterface\";\nimport SearchRepository from \"../../repository/SearchRepository/SearchRepository\";\nimport CharacterInfoCallInterface from \"../Call/CharacterInfoCall/CharacterInfoCallInterface\";\nimport CharacterInfoCall from \"../Call/CharacterInfoCall/CharacterInfoCall\";\nimport ConstellationInfoCallInterface from \"../Call/ConstellationInfoCall/ConstellationInfoCallInterface\";\nimport ConstellationInfoCall from \"../Call/ConstellationInfoCall/ConstellationInfoCall\";\nimport CorporationInfoCall from \"../Call/CorporationInfoCall/CorporationInfoCall\";\nimport TypeInfoCallInterface from \"../Call/TypeInfoCall/TypeInfoCallInterface\";\nimport TypeInfoCall from \"../Call/TypeInfoCall/TypeInfoCall\";\nimport RegionInfoCallInterface from \"../Call/RegionInfoCall/RegionInfoCallInterface\";\nimport RegionInfoCall from \"../Call/RegionInfoCall/RegionInfoCall\";\nimport SystemInfoCallInterface from \"../Call/SystemInfoCall/SystemInfoCallInterface\";\nimport SystemInfoCall from \"../Call/SystemInfoCall/SystemInfoCall\";\nimport StationInfoCall from \"../Call/StationInfoCall/StationInfoCall\";\nimport StationInfoCallInterface from \"../Call/StationInfoCall/StationInfoCallInterface\";\nimport FactionCallInterface from \"../Call/FactionCall/FactionCallInterface\";\nimport CorporationInfoCallInterface from \"../Call/CorporationInfoCall/CorporationInfoCallInterface\";\nimport FactionCall from \"../Call/FactionCall/FactionCall\";\nimport AncestryCallInterface from \"../Call/AncestryCall/AncestryCallInterface\";\nimport AncestryCall from \"../Call/AncestryCall/AncestryCall\";\nimport BloodlineCallInterface from \"../Call/BloodlineCall/BloodlineCallInterface\";\nimport BloodlineCall from \"../Call/BloodlineCall/BloodlineCall\";\nimport AncestryRepositoryInterface from \"../../repository/AncestryRepository/AncestryRepositoryInterface\";\nimport AncestryRepository from \"../../repository/AncestryRepository/AncestryRepository\";\nimport BloodlineRepositoryInterface from \"../../repository/BloodlineRepository/BloodlineRepositoryInterface\";\nimport BloodlineRepository from \"../../repository/BloodlineRepository/BloodlineRepository\";\nimport CharacterRepository from \"../../repository/CharacterRepository/CharacterRepository\";\nimport CharacterRepositoryInterface from \"../../repository/CharacterRepository/CharacterRepositoryInterface\";\nimport RaceCallInterface from \"../Call/RaceCall/RaceCallInterface\";\nimport RaceCall from \"../Call/RaceCall/RaceCall\";\nimport RaceRepositoryInterface from \"../../repository/RaceRepository/RaceRepositoryInterface\";\nimport RaceRepository from \"../../repository/RaceRepository/RaceRepository\";\nimport CharacterCorpHistoryCallInterface from \"../Call/CharacterCorpHistoryCall/CharacterCorpHistoryCallInterface\";\nimport CharacterCorpHistoryCall from \"../Call/CharacterCorpHistoryCall/CharacterCorpHistoryCall\";\nimport DateFormatterInterface from \"../DateFormatter/DateFormatterInterface\";\nimport DateFormatter from \"../DateFormatter/DateFormatter\";\nimport CorporationAllianceHistoryCallInterface\n  from \"../Call/CorporationAllianceHistoryCall/CorporationAllianceHistoryCallInterface\";\nimport CorporationAllianceHistoryCall from \"../Call/CorporationAllianceHistoryCall/CorporationAllianceHistoryCall\";\nimport CorporationRepositoryInterface from \"../../repository/CorporationRepository/CorporationRepositoryInterface\";\nimport CorporationRepository from \"../../repository/CorporationRepository/CorporationRepository\";\nimport FactionRepositoryInterface from \"../../repository/FactionRepository/FactionRepositoryInterface\";\nimport FactionRepository from \"../../repository/FactionRepository/FactionRepository\";\nimport RSSRepositoryInterface from \"../../repository/RSSRepository/RSSRepositoryInterface\";\nimport RSSRepository from \"../../repository/RSSRepository/RSSRepository\";\nimport StatusRepositoryInterface from \"../../repository/StatusRepository/StatusRepositoryInterface\";\nimport StatusRepository from \"../../repository/StatusRepository/StatusRepository\";\n\nclass Container {\n  private _esi: EsiClient | null = null;\n  private _esiErrorManager: EsiErrorManagerInterface | null = null;\n\n  get dateFormatter(): DateFormatterInterface {\n    return new DateFormatter();\n  }\n\n  get esi(): EsiClient {\n    if (this._esi === null) {\n      this._esi = new EsiClient(\n        (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n          return fetch(input, init);\n        },\n        this.esiErrorManager\n      );\n    }\n\n    return this._esi;\n  }\n\n  get esiErrorManager(): EsiErrorManagerInterface {\n    if (this._esiErrorManager === null) {\n      this._esiErrorManager = new EsiErrorManager();\n    }\n\n    return this._esiErrorManager;\n  }\n\n  get queryFactory(): QueryFactoryInterface {\n    return new QueryFactory();\n  }\n\n  // CALL //-------------------------------------------------------------------\n\n  get allianceCorporationsCall(): AllianceCorporationsCallInterface {\n    return new AllianceCorporationsCall(this.esi);\n  }\n\n  get allianceInfoCall(): AllianceInfoCallInterface {\n    return new AllianceInfoCall(this.esi);\n  }\n\n  get allianceListCall(): AllianceListCallInterface {\n    return new AllianceListCall(this.esi);\n  }\n\n  get ancestryCall(): AncestryCallInterface {\n    return new AncestryCall(this.esi);\n  }\n\n  get bloodlineCall(): BloodlineCallInterface {\n    return new BloodlineCall(this.esi);\n  }\n\n  get characterCorpHistoryCall(): CharacterCorpHistoryCallInterface {\n    return new CharacterCorpHistoryCall(this.esi);\n  }\n\n  get characterInfoCall(): CharacterInfoCallInterface {\n    return new CharacterInfoCall(this.esi);\n  }\n\n  get constellationInfoCall(): ConstellationInfoCallInterface {\n    return new ConstellationInfoCall(this.esi);\n  }\n\n  get corporationAllianceHistoryCall(): CorporationAllianceHistoryCallInterface {\n    return new CorporationAllianceHistoryCall(this.esi);\n  }\n\n  get corporationInfoCall(): CorporationInfoCallInterface {\n    return new CorporationInfoCall(this.esi);\n  }\n\n  get factionCall(): FactionCallInterface {\n    return new FactionCall(this.esi);\n  }\n\n  get publicSearchCall(): PublicSearchCallInterface {\n    return new PublicSearchCall(this.esi, this.queryFactory);\n  }\n\n  get raceCall(): RaceCallInterface {\n    return new RaceCall(this.esi);\n  }\n\n  get regionInfoCall(): RegionInfoCallInterface {\n    return new RegionInfoCall(this.esi);\n  }\n\n  get statusCall(): StatusCallInterface {\n    return new StatusCall(this.esi);\n  }\n\n  get stationInfoCall(): StationInfoCallInterface {\n    return new StationInfoCall(this.esi);\n  }\n\n  get systemInfoCall(): SystemInfoCallInterface {\n    return new SystemInfoCall(this.esi);\n  }\n\n  get typeInfoCall(): TypeInfoCallInterface {\n    return new TypeInfoCall(this.esi);\n  }\n\n  get universeNamesCall(): UniverseNamesCallInterface {\n    return new UniverseNamesCall(this.esi);\n  }\n\n  // CALL - END // ------------------------------------------------------------\n\n  // REPOSITORY //-------------------------------------------------------------\n\n  get allianceRepository(): AllianceRepositoryInterface {\n    return new AllianceRepository(\n      this.allianceListCall,\n      this.allianceInfoCall,\n      this.allianceCorporationsCall,\n      this.nameRepository\n    );\n  }\n\n  get ancestryRepository(): AncestryRepositoryInterface {\n    return new AncestryRepository(this.ancestryCall);\n  }\n\n  get bloodlineRepository(): BloodlineRepositoryInterface {\n    return new BloodlineRepository(\n      this.bloodlineCall,\n      this.raceRepository,\n      this.nameRepository\n    );\n  }\n\n  get characterRepository(): CharacterRepositoryInterface {\n    return new CharacterRepository(\n      this.characterInfoCall,\n      this.characterCorpHistoryCall,\n      this.ancestryRepository,\n      this.bloodlineRepository,\n      this.nameRepository,\n      this.raceRepository\n    );\n  }\n\n  get corporationRepository(): CorporationRepositoryInterface {\n    return new CorporationRepository(\n      this.corporationInfoCall,\n      this.corporationAllianceHistoryCall,\n      this.nameRepository\n    );\n  }\n\n  get factionRepository(): FactionRepositoryInterface {\n    return new FactionRepository(\n      this.factionCall,\n      this.nameRepository\n    );\n  }\n\n  get nameRepository(): NameRepositoryInterface {\n    return new NameRepository(this.universeNamesCall);\n  }\n\n  get raceRepository(): RaceRepositoryInterface {\n    return new RaceRepository(\n      this.raceCall,\n      this.nameRepository,\n      this.factionRepository\n    );\n  }\n\n  get rssRepository(): RSSRepositoryInterface {\n    return new RSSRepository();\n  }\n\n  get searchRepository(): SearchRepositoryInterface {\n    return new SearchRepository(this.nameRepository, this.publicSearchCall);\n  }\n\n  get statusRepository(): StatusRepositoryInterface {\n    return new StatusRepository(this.statusCall);\n  }\n}\n\nexport default Container;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MyApp from \"./component/MyApp/MyApp\";\nimport store from \"./store\";\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from \"react-router-dom\";\nimport '@fontsource/roboto';\nimport { SnackbarProvider } from 'notistack';\n\nimport { DepsProvider } from \"./context/DepsContext/DepsContext\";\nimport Container from \"./service/Container/Container\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <DepsProvider container={new Container()}>\n        <HashRouter>\n          <SnackbarProvider maxSnack={3}>\n            <MyApp />\n          </SnackbarProvider>\n        </HashRouter>\n      </DepsProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}