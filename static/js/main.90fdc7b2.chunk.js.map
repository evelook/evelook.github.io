{"version":3,"sources":["component/AppBar/AppBar.tsx","component/Home/Home.tsx","repository/SearchRepository/RepoCategory.ts","context/DepsContext/DepsContext.tsx","component/LoadingFullPage/LoadingFullPage.tsx","component/Search/SearchForm/SearchForm.tsx","component/Search/ResultTable/ResultTable.tsx","component/Search/ResultContainer/ResultContainer.tsx","component/ApiErrorFullPage/ApiErrorFullPage.tsx","component/Search/SearchResult/SearchResult.tsx","component/Search/SearchEmpty/SearchEmpty.tsx","component/Search/Search.tsx","component/AllianceInfo/CorpListTable/CorpListTable.tsx","component/AllianceInfo/AllianceInfoContent/AllianceInfoContent.tsx","component/AllianceInfo/AllianceInfo.tsx","component/CharacterInfo/CorpHistoryTable/CorpHistoryTable.tsx","component/EntityDescription/EntityDescription.tsx","component/CharacterInfo/CharacterInfoContent/CharacterInfoContent.tsx","component/CharacterInfo/CharacterInfo.tsx","component/ConstellationInfo/ConstellationInfo.tsx","component/CorporationInfo/AllianceHistoryTable/AllianceHistoryTable.tsx","component/CorporationInfo/CorporationInfoContent/CorporationInfoContent.tsx","component/CorporationInfo/CorporationInfo.tsx","component/TypeInfo/TypeInfo.tsx","component/RegionInfo/RegionInfo.tsx","component/SystemInfo/SystemInfo.tsx","component/StationInfo/StationInfo.tsx","component/FactionInfo/FactionInfo.tsx","component/RaceInfo/RaceInfo.tsx","component/AncestryInfo/AncestryInfo.tsx","component/BloodlineInfo/BloodlineInfo.tsx","component/Dashboard/Dashboard.tsx","component/MyApp/MyApp.tsx","feature/drawer/drawerSlice.ts","feature/theme/themeSlice.ts","reducer.ts","store.ts","serviceWorker.ts","service/EsiClient/EsiClient.ts","service/EsiErrorManager/EsiErrorManager.ts","service/QueryFactory/Query.ts","service/QueryFactory/QueryFactory.ts","error/EsiError/EsiError.ts","service/Call/StatusCall/StatusCall.ts","service/Call/UniverseNamesCall/UniverseNamesCall.ts","service/Call/AllianceListCall/AllianceListCall.ts","service/Call/AllianceInfoCall/AllianceInfoCall.ts","repository/NameRepository/NameRepository.ts","service/Call/AllianceCorporationsCall/AllianceCorporationsCall.ts","service/Call/PublicSearchCall/PublicSearchCall.ts","repository/AllianceRepository/AllianceRepository.ts","service/Call/PublicSearchCall/EsiCategory.ts","repository/SearchRepository/SearchRepository.ts","service/Call/CharacterInfoCall/CharacterInfoCall.ts","service/Call/ConstellationInfoCall/ConstellationInfoCall.ts","service/Call/CorporationInfoCall/CorporationInfoCall.ts","service/Call/TypeInfoCall/TypeInfoCall.ts","service/Call/RegionInfoCall/RegionInfoCall.ts","service/Call/SystemInfoCall/SystemInfoCall.ts","service/Call/StationInfoCall/StationInfoCall.ts","service/Call/FactionCall/FactionCall.ts","service/Call/AncestryCall/AncestryCall.ts","service/Call/BloodlineCall/BloodlineCall.ts","repository/AncestryRepository/AncestryRepository.ts","repository/AbstractRepository/AbstractRepository.ts","repository/BloodlineRepository/BloodlineRepository.ts","repository/CharacterRepository/CharacterRepository.ts","service/Call/RaceCall/RaceCall.ts","repository/RaceRepository/RaceRepository.ts","service/Call/CharacterCorpHistoryCall/CharacterCorpHistoryCall.ts","service/DateFormatter/DateFormatter.ts","service/Call/CorporationAllianceHistoryCall/CorporationAllianceHistoryCall.ts","repository/CorporationRepository/CorporationRepository.ts","repository/FactionRepository/FactionRepository.ts","service/Container/Container.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","display","appBar","breakpoints","up","width","marginLeft","menuButton","marginRight","spacing","AppBar","title","children","Fragment","useTheme","classes","dispatch","useDispatch","toolbarVariant","useMediaQuery","position","className","Toolbar","variant","IconButton","color","aria-label","edge","onClick","type","Typography","noWrap","content","flexGrow","padding","toolbar","minHeight","Home","props","paragraph","Fab","repoCategories","DepsContext","createContext","useDeps","useContext","DepsProvider","container","Provider","value","circularProgress","alignItems","justifyContent","marginTop","LoadingFullPage","CircularProgress","form","marginBottom","down","paddingLeft","paddingRight","formSelect","formSearch","filledGrid","emptyGrid","SearchForm","category","needle","strict","history","useHistory","useState","categoryValue","setCategoryValue","strictValue","setStrictValue","searchTextErrorText","setSearchTextErrorText","searchTextIsError","setSearchTextIsError","searchTextRef","useRef","submit","searchTextElement","current","length","text","replace","String","autoComplete","Grid","item","xs","sm","FormControl","fullWidth","InputLabel","id","Select","labelId","onChange","e","target","label","MenuItem","TextField","error","helperText","onKeyPress","key","InputProps","endAdornment","InputAdornment","inputRef","defaultValue","FormControlLabel","control","Checkbox","checked","name","arrowRightIconStyle","verticalAlign","emptyIconCell","ResultTable","data","denseTable","tableOptions","download","elevation","filterType","print","responsive","rowsPerPage","rowsPerPageOptions","search","selectableRows","setTableProps","size","viewColumns","columns","options","filter","sort","customHeadRender","customBodyRender","tableMeta","updateValue","link","rowData","component","Link","to","setCellProps","style","ResultContainer","resultData","maxWidth","Alert","severity","ApiErrorFullPage","retry","action","Button","AlertTitle","height","SearchResult","resultComponent","setResultComponent","setRetry","searchRepository","useEffect","publicSearch","then","catch","message","SearchEmpty","Search","query","URLSearchParams","useLocation","queryCategory","get","includes","queryStrict","queryNeedle","fixedHeader","rowHover","CorpListTable","corpList","paddingTop","paddingBottom","corpID","push","Number","buttonCell","gridContainer","gridWithTable","logo","textAlign","nameCell","backgroundColor","palette","secondary","main","contrastText","AllianceInfoContent","isSmall","alt","src","TableContainer","Paper","Table","TableBody","TableRow","TableCell","colSpan","align","ticker","creator_name","creator_id","creator_corporation_name","creator_corporation_id","date_founded","undefined","executor_corporation_name","executor_corporation_id","faction_name","faction_id","corporations","AllianceInfo","apiResult","setApiResult","allianceRepository","useParams","getOne","styles","corpImg","extractCorpID","CorpHistoryTable","dateFormatter","withDateTime","Date","EntityDescription","paragraphs","bio","split","map","entityLogoCell","entityLogoGrid","entityLogoImg","bioCell","successColorText","success","errorColorText","CharacterInfoContent","md","corporation_id","corporation_name","alliance_name","alliance_id","birthday","security_status","race_name","race_id","ancestry_id","ancestry_name","bloodline_name","bloodline_id","gender","toUpperCase","substr","description","corporation_history","CharacterInfo","characterRepository","ConstellationInfo","allianceImg","extractAllianceID","AllianceHistoryTable","alliances","isDeleted","start","end","direction","whiteSpace","noWrapCell","CorporationInfoContent","ceo_id","ceo_name","member_count","home_station_id","home_station_name","tax_rate","shares","war_eligible","url","href","alliance_history","CorporationInfo","corporationRepository","TypeInfo","RegionInfo","SystemInfo","StationInfo","FactionInfo","RaceInfo","AncestryInfo","BloodlineInfo","drawer","flexShrink","drawerPaper","logoText","fontFamily","join","fontWeight","darkModeToggle","nested","ResponsiveDrawer","window","mobileOpen","useSelector","state","darkMode","handleCloseDrawer","Divider","FormGroup","row","List","ListItem","button","ListItemIcon","ListItemText","primary","document","body","Hidden","lgUp","implementation","Drawer","anchor","open","onClose","paper","ModalProps","keepMounted","mdDown","exact","path","createMuiTheme","MyApp","ThemeProvider","CssBaseline","initialState","rootReducer","combineReducers","store","createStore","Boolean","location","hostname","match","EsiClient","fetchClient","esiErrorManager","_baseUrl","_userAgent","_fetchClient","_esiErrorManager","this","endUrl","method","isErrorWindowBroken","Error","headers","cache","uri","isEmpty","concat","toString","JSON","stringify","response","saveErrorWindowInfo","ok","status","flagWindowAsBroken","incrementError","EsiErrorManager","_errorReset","now","_errorRemain","_resetErrorWindow","limitReset","limitRemain","headerErrorReset","headerErrorRemain","Query","spaceDelimiter","_spaceDelimiter","_query","attribute","values","Object","keys","queryString","hasOwnProperty","forEach","index","encodeURIComponent","QueryFactory","EsiError","statusText","StatusCall","esiClient","_esiClient","_url","a","getResponse","json","UniverseNamesCall","ids","AllianceListCall","AllianceInfoCall","_getUrl","NameRepository","universeNamesCaller","_universeNamesCaller","_removeBannedIDs","allResolvedIDs","failuresCount","maxAllowedFailures","chunks","splice","chunk","localResolvedIDs","Math","round","indexOf","AllianceCorporationsCall","PublicSearchCall","queryFactory","_queryFactory","searchString","categories","make","add","AllianceRepository","allianceListCall","allianceInfoCall","allianceCorpsCall","nameRepo","_allianceListCall","_allianceInfoCall","_allianceCorpsCall","_nameRepo","esiAlliancePromise","esiAllianceCorpsPromise","esiAlliance","repoAlliance","idsToResolve","_pushUnique","esiAllianceCorps","corpsNamesPromise","resolveGeneric","allianceNamesPromise","resolvedName","corpName","allianceIDs","names","resolved","unresolved","inputArray","esiCategories","SearchRepository","publicSearchCall","_publicSearchCall","categoriesForCall","entries","_composeResult","result","prettyCategory","CharacterInfoCall","ConstellationInfoCall","CorporationInfoCall","TypeInfoCall","RegionInfoCall","SystemInfoCall","StationInfoCall","FactionCall","AncestryCall","BloodlineCall","AncestryRepository","ancestryCall","_ancestryCall","ancestries","foundAncestry","ancestry","AbstractRepository","orderedNames","BloodlineRepository","bloodlineCall","raceRepo","_bloodlineCall","_raceRepo","_getEsiBloodline","foundBloodline","ship_type_id","raceNamePromise","getName","_getIDsToResolve","indexedNames","_orderNamesByID","ship_type_name","bloodlines","bloodline","CharacterRepository","characterInfoCall","characterCorpHistoryCall","ancestryRepo","bloodlineRepo","_characterInfoCall","_characterCorpHistoryCall","_ancestryRepo","_bloodlineRepo","esiCharPromise","repoCorpHistoryPromise","_getCorpHistory","esiChar","repoChar","ancestryPromise","bloodlinePromise","namesPromise","racePromise","corpHistory","corp","is_deleted","repoCorpHistory","foundName","RaceCall","RaceRepository","raceCall","factionRepo","_raceCall","_factionRepo","esiRaces","repoRaces","esiRace","repoRace","_getEsiRace","foundRace","races","race","CharacterCorpHistoryCall","DateFormatter","date","yyyy","getUTCFullYear","mm","toStringWithLeadingZero","getUTCMonth","dd","getUTCDate","hr","getUTCHours","min","getUTCMinutes","sec","getUTCSeconds","CorporationAllianceHistoryCall","CorporationRepository","corpInfoCall","corpAllianceHistoryCall","_corpInfoCall","_corpAllianceHistoryCall","allianceHistoryPromise","getAllianceHistory","esiCorp","repoCorp","recordIDs","indexedCorpHistory","record","allianceNamePlaceholder","record_id","end_date","historyToReturn","b","i","start_date","unshift","FactionRepository","factionCall","_factionCall","esiFactions","repoFactions","esiFaction","_assembleRepoFaction","_getEsiFaction","foundFaction","factions","faction","militia_corporation_id","solar_system_id","militia_corporation_name","solar_system_name","Container","_esi","input","init","fetch","esi","allianceCorporationsCall","nameRepository","raceRepository","ancestryRepository","bloodlineRepository","corporationInfoCall","corporationAllianceHistoryCall","universeNamesCall","factionRepository","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.90fdc7b2.chunk.js","sourcesContent":["import React from 'react';\nimport MUIAppBar from '@material-ui/core/AppBar';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport IconButton from '@material-ui/core/IconButton';\nimport { useDispatch } from 'react-redux';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Typography from '@material-ui/core/Typography';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n    },\n    appBar: {\n      [theme.breakpoints.up('lg')]: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth,\n      },\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n      [theme.breakpoints.up('lg')]: {\n        display: 'none',\n      },\n    },\n  }),\n);\n\nexport default function AppBar(\n  {\n    title = \"\",\n    children = <React.Fragment />\n  }: {\n    title: string,\n    children?: React.ReactNode\n  }\n) {\n  const theme = useTheme();\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n  const toolbarVariant = useMediaQuery(theme.breakpoints.up('sm')) ? \"dense\" : \"regular\";\n\n  return (\n    <MUIAppBar position=\"fixed\" className={classes.appBar}>\n      <Toolbar variant={toolbarVariant}>\n        <IconButton\n          color=\"inherit\"\n          aria-label=\"open drawer\"\n          edge=\"start\"\n          onClick={() => dispatch({type: 'drawer/mobileOpen'})}\n          className={classes.menuButton}\n        >\n          <MenuIcon />\n        </IconButton>\n        <Typography variant=\"h6\" noWrap>\n          {title}\n        </Typography>\n        {children}\n      </Toolbar>\n    </MUIAppBar>\n  );\n}\n","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\n\nimport AppBar from \"../AppBar/AppBar\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n    },\n    // necessary for content to be below app bar\n    toolbar: {\n      minHeight: 56,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 48,\n      }\n    },\n  }),\n);\n\nexport default function Home(props: {}) {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <AppBar title=\"Home\" />\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Typography paragraph>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\n          ut labore et dolore magna aliqua. Rhoncus dolor purus non enim praesent elementum\n          facilisis leo vel. Risus at ultrices mi tempus imperdiet. Semper risus in hendrerit\n          gravida rutrum quisque non tellus. Convallis convallis tellus id interdum velit laoreet id\n          donec ultrices. Odio morbi quis commodo odio aenean sed adipiscing. Amet nisl suscipit\n          adipiscing bibendum est ultricies integer quis. Cursus euismod quis viverra nibh cras.\n          Metus vulputate eu scelerisque felis imperdiet proin fermentum leo. Mauris commodo quis\n          imperdiet massa tincidunt. Cras tincidunt lobortis feugiat vivamus at augue. At augue eget\n          arcu dictum varius duis at consectetur lorem. Velit sed ullamcorper morbi tincidunt. Lorem\n          donec massa sapien faucibus et molestie ac.\n        </Typography>\n        <Typography paragraph>\n          Consequat mauris nunc congue nisi vitae suscipit. Fringilla est ullamcorper eget nulla\n          facilisi etiam dignissim diam. Pulvinar elementum integer enim neque volutpat ac\n          tincidunt. Ornare suspendisse sed nisi lacus sed viverra tellus. Purus sit amet volutpat\n          consequat mauris. Elementum eu facilisis sed odio morbi. Euismod lacinia at quis risus sed\n          vulputate odio. Morbi tincidunt ornare massa eget egestas purus viverra accumsan in. In\n          hendrerit gravida rutrum quisque non tellus orci ac. Pellentesque nec nam aliquam sem et\n          tortor. Habitant morbi tristique senectus et. Adipiscing elit duis tristique sollicitudin\n          nibh sit. Ornare aenean euismod elementum nisi quis eleifend. Commodo viverra maecenas\n          accumsan lacus vel facilisis. Nulla posuere sollicitudin aliquam ultrices sagittis orci a.\n        </Typography>\n        <Fab color=\"secondary\" aria-label=\"edit\">\n          <AddIcon />\n        </Fab>\n      </main>\n    </React.Fragment>\n  );\n}\n","const repoCategories = [\"all\", \"agent\", \"alliance\", \"character\", \"constellation\", \"corporation\", \"faction\", \"inventory_type\", \"region\", \"solar_system\", \"station\"] as const;\n\ntype RepoCategory = typeof repoCategories[number];\n\nexport default RepoCategory;\nexport { repoCategories };\n","import React, { createContext, useContext } from \"react\";\nimport Container from \"../../service/Container/Container\";\n\nlet DepsContext = createContext({});\n\nexport function useDeps(): any {\n  return useContext(DepsContext);\n}\n\nexport function DepsProvider({children, container}: {children: any, container: Container}) {\n  return (\n    <DepsContext.Provider value={container}>\n      {children}\n    </DepsContext.Provider>\n  )\n}\n","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    circularProgress: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      marginTop: theme.spacing(3),\n    }\n  }),\n);\n\nexport default function LoadingFullPage() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.circularProgress}>\n      <CircularProgress color=\"secondary\" />\n    </div>\n  );\n}\n","import Grid from \"@material-ui/core/Grid\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport React, {ReactElement, useRef, useState} from \"react\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    form: {\n      width: \"100%\",\n      marginBottom: theme.spacing(0.5),\n      [theme.breakpoints.down('xs')]: {\n        paddingLeft: theme.spacing(3),\n        paddingRight: theme.spacing(3)\n      }\n    },\n    formSelect: {\n      //margin: theme.spacing(1),\n      //minWidth: 150,\n    },\n    formSearch: {\n      //marginTop: theme.spacing(1),\n      //marginBottom: theme.spacing(1),\n    },\n    filledGrid: {\n      padding: theme.spacing(0.5),\n    },\n    emptyGrid: {\n      padding: theme.spacing(0.5),\n      // Removing the border when hitting the breakpoint\n      [theme.breakpoints.down('xs')]: {\n        padding: 0,\n      }\n    }\n  }),\n);\n\nexport default function SearchForm(\n  {\n    category,\n    needle,\n    strict\n  }: {\n    category: string,\n    needle: string,\n    strict: boolean\n  }\n) {\n  let classes = useStyles();\n  let history = useHistory();\n  let [categoryValue, setCategoryValue] = useState(category);\n  let [strictValue, setStrictValue] = useState(strict);\n  let [searchTextErrorText, setSearchTextErrorText] = useState(\"\");\n  let [searchTextIsError, setSearchTextIsError] = useState(false);\n  let searchTextRef = useRef<HTMLInputElement | null>(null);\n\n  let submit = (): ReactElement | void => {\n    let searchTextElement = searchTextRef.current;\n    if (searchTextElement === null || searchTextElement.value.length < 3) {\n      setSearchTextIsError(true);\n      setSearchTextErrorText(\"It must be at least 3 characters long.\")\n\n      return;\n    }\n\n    let text = searchTextElement.value;\n    history.replace(`/search?category=${categoryValue}&strict=${String(strictValue)}&needle=${text}`);\n  }\n\n  let handleEnterPress = (e: React.KeyboardEvent): void => {\n    if (e.key === \"Enter\") {\n      submit();\n    }\n  }\n\n  return(\n    <form autoComplete=\"off\" className={classes.form}>\n      <Grid container>\n        <Grid item xs={12} sm={4} className={classes.filledGrid}>\n          <FormControl\n            variant=\"outlined\"\n            className={classes.formSelect}\n            fullWidth\n          >\n            <InputLabel id=\"demo-simple-select-outlined-label\">Category</InputLabel>\n            <Select\n              labelId=\"demo-simple-select-outlined-label\"\n              id=\"demo-simple-select-outlined\"\n              value={categoryValue}\n              onChange={e => setCategoryValue(e.target.value as string)}\n              label=\"Category\"\n              color=\"secondary\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"agent\"}>Agent</MenuItem>\n              <MenuItem value={\"alliance\"}>Alliance</MenuItem>\n              <MenuItem value={\"character\"}>Character</MenuItem>\n              <MenuItem value={\"constellation\"}>Constellation</MenuItem>\n              <MenuItem value={\"corporation\"}>Corporation</MenuItem>\n              <MenuItem value={\"faction\"}>Faction</MenuItem>\n              <MenuItem value={\"inventory_type\"}>Item</MenuItem>\n              <MenuItem value={\"region\"}>Region</MenuItem>\n              <MenuItem value={\"solar_system\"}>System</MenuItem>\n              <MenuItem value={\"station\"}>Station</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12} sm={8} className={classes.filledGrid}>\n          <TextField\n            id=\"outlined-basic\"\n            error={searchTextIsError}\n            helperText={searchTextErrorText}\n            label=\"Search\"\n            variant=\"outlined\"\n            className={classes.formSearch}\n            color=\"secondary\"\n            fullWidth\n            onKeyPress={handleEnterPress}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    aria-label=\"toggle password visibility\"\n                    onClick={submit}\n                    edge=\"end\"\n                  >\n                    <SearchIcon />\n                  </IconButton>\n                </InputAdornment>\n              )\n            }}\n            inputRef={searchTextRef}\n            defaultValue={needle}\n          />\n        </Grid>\n        <Grid item xs={12} sm={4} className={classes.emptyGrid}>\n        </Grid>\n        <Grid item xs={12} sm={8} className={classes.filledGrid}>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={strictValue}\n                onChange={e => setStrictValue(e.target.checked as boolean)}\n                name=\"checkedA\"\n              />\n            }\n            label=\"Strict\"\n          />\n        </Grid>\n      </Grid>\n    </form>\n  );\n}\n","import React from 'react';\nimport MUIDataTable, {MUIDataTableColumnDef, MUIDataTableOptions} from \"mui-datatables\";\nimport { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\nimport ResultWithLinkInterface from \"../../../repository/SearchRepository/ResulWithLinkInterface\";\nimport { Link } from \"react-router-dom\";\nimport IconButton from '@material-ui/core/IconButton';\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    arrowRightIconStyle: {\n      verticalAlign: \"middle\",\n    },\n    emptyIconCell: {\n      minHeight: \"30px\"\n    }\n  }),\n);\n\nexport default function ResultTable(\n  {\n    data\n  }: {\n    data: ResultWithLinkInterface[]\n  }\n) {\n  const theme = useTheme();\n  let classes = useStyles();\n  const denseTable = useMediaQuery(theme.breakpoints.up('sm'));\n\n  let tableOptions: MUIDataTableOptions = {\n    download: false,\n    elevation: 1,\n    filterType: \"checkbox\",\n    print: false,\n    responsive: \"standard\",\n    rowsPerPage: 25,\n    rowsPerPageOptions: [],\n    search: false,\n    selectableRows: \"none\",\n    setTableProps: () => {\n      return {\n        size: denseTable ? \"small\" : \"medium\"\n      };\n    },\n    viewColumns: false\n  };\n\n  const columns: MUIDataTableColumnDef[] = [\n    {\n      name: \"name\",\n      label: \"Name\",\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    {\n      name: \"prettyCategory\",\n      label: \"Category\",\n      options: {\n        filter: true,\n        sort: true,\n      }\n    },\n    {\n      name: \"link\",\n      options: {\n        filter: false,\n        sort: false,\n        display: false,\n      }\n    },\n    {\n      name: \"id\",\n      options: {\n        filter: false,\n        sort: false,\n        display: false,\n      }\n    },\n    {\n      name: \"icon\",\n      label: \"\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          let link = tableMeta.rowData[2];\n          let id = tableMeta.rowData[3];\n\n          if (link === null) {\n            return <div className={classes.emptyIconCell} />;\n          }\n\n          return (\n            <IconButton\n              size=\"small\"\n              aria-label=\"open\"\n              component={Link}\n              to={`${link}${id}`}\n            >\n              <ArrowRightIcon className={classes.arrowRightIconStyle}/>\n            </IconButton>\n\n          );\n        },\n        filter: false,\n        setCellProps: () => ({ style: { width: \"0\"}}),\n        sort: false,\n      }\n    }\n  ];\n\n  return (\n    <MUIDataTable\n      title={\"\"}\n      data={data}\n      columns={columns}\n      options={tableOptions}\n    />\n  );\n}\n","import React from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport SearchForm from \"../SearchForm/SearchForm\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport ResultTable from \"../ResultTable/ResultTable\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport ResultWithLinkInterface from \"../../../repository/SearchRepository/ResulWithLinkInterface\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      padding: 0,\n    }\n  })\n);\n\nexport default function ResultContainer(\n  {\n    category,\n    needle,\n    strict,\n    resultData\n  }: {\n    category: string,\n    needle: string,\n    strict: boolean\n    resultData: ResultWithLinkInterface[]\n  }\n) {\n  let classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <Container maxWidth=\"sm\" className={classes.container}>\n        <SearchForm\n          category={category}\n          needle={needle}\n          strict={strict}\n        />\n        {resultData.length >= 500 &&\n        <Alert severity=\"warning\">More than 500 records found, the API hasn't performed a full search. Try refining your parameters if you need more accuracy.</Alert>\n        }\n        <ResultTable data={resultData}/>\n      </Container>\n    </React.Fragment>\n  )\n}\n","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Alert from '@material-ui/lab/Alert';\nimport { AlertTitle } from \"@material-ui/lab\";\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      '& > * + *': {\n        marginTop: theme.spacing(2),\n      },\n      [theme.breakpoints.down('xs')]: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2),\n      }\n    },\n  }),\n);\n\nexport default function ApiErrorFullPage(\n  {\n    retry,\n    text\n  }: {\n    retry: () => void,\n    text: string\n  }\n) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Alert\n        severity=\"error\"\n        action={\n          <Button color=\"inherit\" size=\"small\" onClick={retry}>\n            <strong>RETRY</strong>\n          </Button>\n        }\n        variant=\"outlined\"\n      >\n        <AlertTitle>Error</AlertTitle>\n        {text}\n      </Alert>\n    </div>\n  );\n}\n","import React, {useEffect, useState} from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\n\nimport { useDeps } from \"../../../context/DepsContext/DepsContext\";\nimport AppBar from \"../../AppBar/AppBar\";\nimport SearchRepositoryInterface from \"../../../repository/SearchRepository/SearchRepositoryInterface\";\nimport RepoCategory from \"../../../repository/SearchRepository/RepoCategory\";\nimport LoadingFullPage from \"../../LoadingFullPage/LoadingFullPage\";\nimport ResultContainer from \"../ResultContainer/ResultContainer\";\nimport ApiErrorFullPage from \"../../ApiErrorFullPage/ApiErrorFullPage\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n      height: \"100vh\",\n      [theme.breakpoints.down('xs')]: {\n        paddingLeft: 0,\n        paddingRight: 0\n      }\n    },\n    // necessary for content to be below app bar\n    toolbar: {\n      minHeight: 56,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 48,\n      }\n    },\n  }),\n);\n\nexport default function SearchResult(\n  {\n    category,\n    needle,\n    strict\n  }: {\n    category: string,\n    needle: string,\n    strict: boolean\n  }\n) {\n  let classes = useStyles();\n  let [resultComponent, setResultComponent] = useState<any>(<LoadingFullPage />);\n  let [retry, setRetry] = useState(false);\n  let {\n    searchRepository\n  }: {\n    searchRepository: SearchRepositoryInterface\n  } = useDeps();\n\n  useEffect(() => {\n    setResultComponent(<LoadingFullPage />);\n    setRetry(false);\n\n    searchRepository.publicSearch(needle, category as RepoCategory, strict)  // FIX typescript\n      .then(data => {\n        setResultComponent(\n          <ResultContainer\n            category={category}\n            needle={needle}\n            strict={strict}\n            resultData={data}\n          />\n        );\n      }).catch(e => {\n        setResultComponent(\n          <ApiErrorFullPage\n            retry={() => setRetry(true)}\n            text={e.message}\n          />\n        );\n      }\n    );\n  }, [category, needle, strict, retry]);\n\n  return (\n    <React.Fragment>\n      <AppBar title=\"Search\" />\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        {resultComponent}\n      </main>\n    </React.Fragment>\n  );\n}\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport AppBar from \"../../AppBar/AppBar\";\nimport Container from \"@material-ui/core/Container\";\nimport SearchForm from \"../SearchForm/SearchForm\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n      height: \"100vh\",\n    },\n    // necessary for content to be below app bar\n    toolbar: {\n      minHeight: 56,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 48,\n      }\n    },\n    container: {\n      padding: 0,\n      display: \"flex\",\n      alignItems: \"center\",\n      height: \"70vh\"\n    },\n  }),\n);\n\nexport default function SearchEmpty(\n  {\n    category\n  }: {\n    category: string\n  }\n) {\n  let classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <AppBar title=\"Search\" />\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Container maxWidth=\"sm\" className={classes.container}>\n          <SearchForm\n            category={category}\n            needle={\"\"}\n            strict={false}\n          />\n        </Container>\n      </main>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport RepoCategory, { repoCategories } from \"../../repository/SearchRepository/RepoCategory\";\nimport SearchResult from \"./SearchResult/SearchResult\";\nimport SearchEmpty from \"./SearchEmpty/SearchEmpty\";\n\nexport default function Search() {\n  let query = new URLSearchParams(useLocation().search);\n\n  let category: RepoCategory = \"all\";\n  let queryCategory = query.get(\"category\");\n  if (queryCategory !== null && repoCategories.includes(queryCategory as RepoCategory)) {\n    category = queryCategory as RepoCategory;\n  }\n\n  let queryStrict = query.get(\"strict\");\n  let queryNeedle = query.get(\"needle\");\n  if (queryStrict !== null && queryNeedle !== null) {\n    return (\n      <SearchResult\n        category={category}\n        needle={queryNeedle}\n        strict={queryStrict === \"true\"}\n      />\n    );\n  }\n\n  return (\n    <SearchEmpty category={category} />\n  );\n}\n","import MUIDataTable, {MUIDataTableColumnDef, MUIDataTableOptions} from \"mui-datatables\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Link} from \"react-router-dom\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport React from \"react\";\n\nconst options: MUIDataTableOptions = {\n  elevation: 1,\n  filter: false,\n  fixedHeader: false,\n  print: false,\n  responsive: \"standard\",\n  rowHover: false,\n  rowsPerPageOptions: [],\n  selectableRows: \"none\",\n  viewColumns: false,\n};\n\nexport default function CorpListTable(\n  {\n    corpList\n  }: {\n    corpList: { [key:string]: string }\n  }\n) {\n  const columns: MUIDataTableColumnDef[] = [\n    {\n      name: \"name\",\n      label: \"Name\",\n      options: {\n        customHeadRender: () => null\n      }\n    },\n    {\n      name: \"id\",\n      label: \"ID\",\n      options: {\n        customHeadRender: () => null,\n        display: false,\n      }\n    },\n    {\n      name: \"icon\",\n      label: \"\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          let id = tableMeta.rowData[1];\n\n          return (\n            <IconButton\n              size=\"small\"\n              aria-label=\"open\"\n              component={Link}\n              to={`/corporation/${id}`}\n            >\n              <ArrowRightIcon />\n            </IconButton>\n          );\n        },\n        download: false,\n        setCellProps: () => ({ style: { width: 0, paddingTop: 0, paddingBottom: 0 }}),\n      }\n    }\n  ];\n\n  let data: { name: string, id: number }[] = [];\n  for (let corpID in corpList) {\n    data.push({ name: corpList[corpID], id: Number(corpID) });\n  }\n\n  return(\n    <MUIDataTable\n      title={\"Corporations\"}\n      data={data}\n      columns={columns}\n      options={options}\n    />\n  );\n}\n","import React from 'react';\nimport RepoAllianceInterface from \"../../../repository/AllianceRepository/RepoAllianceInterface\";\nimport {createStyles, makeStyles, Theme, useTheme} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Link} from \"react-router-dom\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Typography from \"@material-ui/core/Typography\";\nimport CorpListTable from \"../CorpListTable/CorpListTable\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    buttonCell: {\n      paddingTop: 0,\n      paddingBottom: 0,\n      width: 0,\n    },\n    gridContainer: {\n      marginTop: 0,\n    },\n    gridWithTable: {\n      [theme.breakpoints.down('xs')]: {\n        paddingBottom: theme.spacing(3),\n      },\n    },\n    title: {\n      [theme.breakpoints.down('xs')]: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2)\n      },\n    },\n    logo: {\n      textAlign: \"center\",\n      //marginTop: -(theme.spacing(3)),\n      paddingTop: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n    },\n    nameCell: {\n      backgroundColor: theme.palette.secondary.main,\n      color: theme.palette.secondary.contrastText,\n    }\n  }),\n);\n\nexport default function AllianceInfoContent(\n  {\n    content\n  }: {\n    content: RepoAllianceInterface\n  }\n) {\n  let classes = useStyles();\n  let theme = useTheme();\n  let isSmall = useMediaQuery(theme.breakpoints.down('xs'));\n\n  return (\n    <React.Fragment>\n      <Grid container spacing={isSmall ? 0 : 3} className={classes.gridContainer}>\n        <Grid item xs={12} className={classes.logo}>\n          <img\n            alt=\"alliance logo\"\n            src={`https://images.evetech.net/alliances/${content.id}/logo`}\n            height=\"180\"\n            width=\"180\"\n          />\n        </Grid>\n        <Grid item xs={12} sm={6} className={classes.gridWithTable}>\n          <TableContainer component={Paper}>\n            <Table aria-label=\"alliance information\">\n              <TableBody>\n                <TableRow>\n                  <TableCell\n                    colSpan={3}\n                    align=\"center\"\n                    className={classes.nameCell}\n                  >\n                    <Typography variant=\"h6\">{ content.name }</Typography>\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Ticker:</TableCell>\n                  <TableCell>{ content.ticker }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>ID:</TableCell>\n                  <TableCell>{ content.id }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Creator (char):</TableCell>\n                  <TableCell>{ content.creator_name }</TableCell>\n                  <TableCell align=\"right\" className={classes.buttonCell}>\n                    <IconButton\n                      size=\"small\"\n                      aria-label=\"open character\"\n                      component={Link}\n                      to={`/character/${content.creator_id}`}\n                    >\n                      <ArrowRightIcon />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Creator (corp):</TableCell>\n                  <TableCell>{ content.creator_corporation_name }</TableCell>\n                  <TableCell align=\"right\" className={classes.buttonCell}>\n                    <IconButton\n                      size=\"small\"\n                      aria-label=\"open character\"\n                      component={Link}\n                      to={`/corporation/${content.creator_corporation_id}`}\n                    >\n                      <ArrowRightIcon />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Date founded:</TableCell>\n                  <TableCell>{ content.date_founded }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n                {content.executor_corporation_name !== undefined &&\n                  <TableRow>\n                      <TableCell>Executor:</TableCell>\n                      <TableCell>{ content.executor_corporation_name }</TableCell>\n                      <TableCell align=\"right\" className={classes.buttonCell}>\n                          <IconButton\n                              size=\"small\"\n                              aria-label=\"open character\"\n                              component={Link}\n                              to={`/corporation/${content.executor_corporation_id}`}\n                          >\n                              <ArrowRightIcon />\n                          </IconButton>\n                      </TableCell>\n                  </TableRow>\n                }\n                {content.faction_name !== undefined &&\n                  <TableRow>\n                      <TableCell>Faction:</TableCell>\n                      <TableCell>{ content.faction_name }</TableCell>\n                      <TableCell align=\"right\">\n                          <TableCell align=\"right\" className={classes.buttonCell}>\n                              <IconButton\n                                  size=\"small\"\n                                  aria-label=\"open character\"\n                                  component={Link}\n                                  to={`/faction/${content.faction_id}`}\n                              >\n                                  <ArrowRightIcon />\n                              </IconButton>\n                          </TableCell>\n                      </TableCell>\n                  </TableRow>\n                }\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Grid>\n        <Grid item xs={12} sm={6} className={classes.gridWithTable}>\n          <CorpListTable corpList={content.corporations} />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}\n\n/*\nexport default function AllianceInfoContent(\n  {\n    content\n  }: {\n    content: RepoAllianceInterface\n  }\n) {\n  return (\n    <React.Fragment>\n      <h1>{content.name}</h1>\n      <ul>\n        <li>\n          <details>\n            <summary>Corporations:</summary>\n            <ul>\n              {Object.keys(content.corporations).map(key => {\n                return <li key={key}>{content.corporations[key]}</li>\n              })}\n            </ul>\n          </details>\n        </li>\n      </ul>\n    </React.Fragment>\n  );\n}\n*/","import React, {useState, useEffect} from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Container from \"@material-ui/core/Container\";\n\nimport { useDeps } from \"../../context/DepsContext/DepsContext\";\nimport AppBar from \"../AppBar/AppBar\";\nimport LoadingFullPage from \"../LoadingFullPage/LoadingFullPage\";\nimport AllianceRepositoryInterface from \"../../repository/AllianceRepository/AllianceRepositoryInterface\";\nimport ApiErrorFullPage from \"../ApiErrorFullPage/ApiErrorFullPage\";\nimport AllianceInfoContent from \"./AllianceInfoContent/AllianceInfoContent\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      //paddingTop: theme.spacing(3),\n      paddingBottom: 0,\n      paddingLeft: 0,\n      paddingRight: 0,\n    },\n    content: {\n      flexGrow: 1,\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3),\n      [theme.breakpoints.down('xs')]: {\n        padding: 0,\n      }\n    },\n    // necessary for content to be below app bar\n    toolbar: {\n      minHeight: 56,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 48,\n      }\n    },\n  }),\n);\n\nexport default function AllianceInfo() {\n  let classes = useStyles();\n  let [apiResult, setApiResult] = useState(<LoadingFullPage />);\n  let [retry, setRetry] = useState(false);\n  let {\n    allianceRepository\n  }: {\n    allianceRepository: AllianceRepositoryInterface\n  } = useDeps();\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  useEffect(() => {\n    if (id === undefined) {\n      return;\n    }\n\n    setApiResult(<LoadingFullPage />);\n    setRetry(false);\n\n    allianceRepository.getOne(Number(id))\n      .then(data => {\n        setApiResult(\n          <AllianceInfoContent content={data} />\n        );\n      }).catch(e => {\n        setApiResult(\n          <ApiErrorFullPage\n            retry={() => setRetry(true)}\n            text={e.message}\n          />\n        );\n      });\n  }, [retry, id]);\n\n  return (\n    <React.Fragment>\n      <AppBar title=\"Alliance\" />\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          {apiResult}\n        </Container>\n      </main>\n    </React.Fragment>\n  );\n}\n","import MUIDataTable, {MUIDataTableColumnDef, MUIDataTableMeta, MUIDataTableOptions} from \"mui-datatables\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Link} from \"react-router-dom\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport React from \"react\";\nimport {createStyles, makeStyles, Theme, useTheme} from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\n\nimport { useDeps } from \"../../../context/DepsContext/DepsContext\";\nimport RepoCharacterCorpHistoryInterface\n  from \"../../../repository/CharacterRepository/RepoCharacterCorpHistoryInterface\";\nimport DateFormatterInterface from \"../../../service/DateFormatter/DateFormatterInterface\";\n\nconst options: MUIDataTableOptions = {\n  download: false,\n  elevation: 1,\n  filter: false,\n  fixedHeader: false,\n  print: false,\n  responsive: \"standard\",\n  rowHover: false,\n  rowsPerPage: 100,\n  rowsPerPageOptions: [],\n  search: false,\n  selectableRows: \"none\",\n  viewColumns: false,\n};\n\nconst styles = {\n  corpImg: {\n    display: \"flex\",\n  }\n};\n\nconst extractCorpID = (tableMeta: MUIDataTableMeta): number => {\n  return tableMeta.rowData[3];\n};\n\nexport default function CorpHistoryTable(\n  {\n    corporations\n  }: {\n    corporations: RepoCharacterCorpHistoryInterface[]\n  }\n) {\n  let theme = useTheme();\n  let isSmall = useMediaQuery(theme.breakpoints.down('xs'));\n  let {\n    dateFormatter\n  }: {\n    dateFormatter: DateFormatterInterface\n  } = useDeps();\n\n  const columns: MUIDataTableColumnDef[] = [\n    {\n      name: \"logo\",\n      label: \"\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          let id = extractCorpID(tableMeta);\n\n          return (\n            <img\n              src={`https://images.evetech.net/corporations/${id}/logo?size=64`}\n              alt=\"corporation logo\"\n              height={48}\n              width={48}\n              style={styles.corpImg}\n            />\n          );\n        },\n        display: !isSmall,\n        setCellProps: () => ({ style: { width: 0, paddingTop: 0, paddingBottom: 0, paddingRight: 0 }}),\n      }\n    },\n    {\n      name: \"corporation_name\",\n      label: \"Name\",\n      options: {\n        customHeadRender: () => null\n      }\n    },\n    {\n      name: \"start_date\",\n      label: \"From\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          return dateFormatter.withDateTime(new Date(value));\n        },\n      }\n    },\n    {\n      name: \"corporation_id\",\n      label: \"ID\",\n      options: {\n        customHeadRender: () => null,\n        display: false,\n      }\n    },\n    {\n      name: \"icon\",\n      label: \"\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          let id = extractCorpID(tableMeta);\n\n          return (\n            <IconButton\n              size=\"small\"\n              aria-label=\"open\"\n              component={Link}\n              to={`/corporation/${id}`}\n            >\n              <ArrowRightIcon />\n            </IconButton>\n          );\n        },\n        download: false,\n        setCellProps: () => ({ style: { width: 0, paddingTop: 0, paddingBottom: 0 }}),\n      }\n    }\n  ];\n\n  return(\n    <MUIDataTable\n      title={\"Corp History\"}\n      data={corporations}\n      columns={columns}\n      options={options}\n    />\n  );\n}\n","import React from 'react';\nimport Typography from \"@material-ui/core/Typography\";\n\nexport default function EntityDescription(\n  {\n    bio\n  }: {\n    bio: string\n  }\n) {\n  let paragraphs = bio.split(\"<br>\");\n\n  return (\n    <React.Fragment>\n      {paragraphs.map((paragraph, key) => {\n        return <Typography>{ paragraph.replace(/(<([^>]+)>)/gi, \"\") }</Typography>\n      })}\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport {createStyles, makeStyles, Theme, useTheme} from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport RepoCharacterInterface from \"../../../repository/CharacterRepository/RepoCharacterInterface\";\nimport CorpHistoryTable from \"../CorpHistoryTable/CorpHistoryTable\";\nimport { useDeps } from \"../../../context/DepsContext/DepsContext\";\nimport DateFormatterInterface from \"../../../service/DateFormatter/DateFormatterInterface\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Link} from \"react-router-dom\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport EntityDescription from \"../../EntityDescription/EntityDescription\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    buttonCell: {\n      paddingTop: 0,\n      paddingBottom: 0,\n      width: 0,\n    },\n    gridContainer: {\n      marginTop: 0,\n    },\n    gridWithTable: {\n      [theme.breakpoints.down('xs')]: {\n        paddingBottom: theme.spacing(3),\n      },\n    },\n    title: {\n      [theme.breakpoints.down('xs')]: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2)\n      },\n    },\n    logo: {\n      textAlign: \"center\",\n      paddingTop: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n    },\n    nameCell: {\n      backgroundColor: theme.palette.secondary.main,\n      color: theme.palette.secondary.contrastText,\n    },\n    entityLogoCell: {\n      paddingTop: 0,\n      paddingRight: 0,\n      paddingBottom: 0\n    },\n    entityLogoGrid: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    entityLogoImg: {\n      marginRight: theme.spacing(1),\n      [theme.breakpoints.down('xs')]: {\n        display: \"none\",\n      },\n    },\n    bioCell: {\n      verticalAlign: \"top\",\n    },\n    successColorText: {\n      color: theme.palette.success.main,\n    },\n    errorColorText: {\n      color: theme.palette.error.main,\n    },\n  }),\n);\n\nexport default function CharacterInfoContent(\n  {\n    content\n  }: {\n    content: RepoCharacterInterface\n  }\n) {\n  let classes = useStyles();\n  let theme = useTheme();\n  let isSmall = useMediaQuery(theme.breakpoints.down('xs'));\n  let {\n    dateFormatter\n  }: {\n    dateFormatter: DateFormatterInterface\n  } = useDeps();\n\n  return (\n    <React.Fragment>\n      <Grid container spacing={isSmall ? 0 : 3} className={classes.gridContainer}>\n        <Grid item xs={12} className={classes.logo}>\n          <img\n            alt=\"character portrait\"\n            src={`https://images.evetech.net/characters/${content.id}/portrait`}\n            height=\"180\"\n            width=\"180\"\n          />\n        </Grid>\n        <Grid item xs={12} md={6} className={classes.gridWithTable}>\n          <TableContainer component={Paper}>\n            <Table aria-label=\"character information\">\n              <TableBody>\n                <TableRow>\n                  <TableCell\n                    colSpan={3}\n                    align=\"center\"\n                    className={classes.nameCell}\n                  >\n                    <Typography variant=\"h6\">{ content.name }</Typography>\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Corporation:</TableCell>\n                  <TableCell className={classes.entityLogoCell}>\n                    <Grid container>\n                      <Grid item className={classes.entityLogoGrid}>\n                        <img\n                          src={`https://images.evetech.net/corporations/${content.corporation_id}/logo?size=64`}\n                          alt=\"corporation logo\"\n                          height={48}\n                          width={48}\n                          className={classes.entityLogoImg}\n                        />\n                      </Grid>\n                      <Grid item className={classes.entityLogoGrid}>\n                        { content.corporation_name }\n                      </Grid>\n                    </Grid>\n                  </TableCell>\n                  <TableCell align=\"right\" className={classes.buttonCell}>\n                    <IconButton\n                      size=\"small\"\n                      aria-label=\"open corporation\"\n                      component={Link}\n                      to={`/corporation/${content.corporation_id}`}\n                    >\n                      <ArrowRightIcon />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n                {content.alliance_name !== undefined &&\n                  <TableRow>\n                      <TableCell>Alliance:</TableCell>\n                      <TableCell className={classes.entityLogoCell}>\n                          <Grid container>\n                              <Grid item className={classes.entityLogoGrid}>\n                                  <img\n                                      src={`https://images.evetech.net/alliances/${content.alliance_id}/logo?size=64`}\n                                      alt=\"alliance logo\"\n                                      height={48}\n                                      width={48}\n                                      className={classes.entityLogoImg}\n                                  />\n                              </Grid>\n                              <Grid item className={classes.entityLogoGrid}>\n                                { content.alliance_name }\n                              </Grid>\n                          </Grid>\n                      </TableCell>\n                      <TableCell align=\"right\" className={classes.buttonCell}>\n                          <IconButton\n                              size=\"small\"\n                              aria-label=\"open alliance\"\n                              component={Link}\n                              to={`/alliance/${content.alliance_id}`}\n                          >\n                              <ArrowRightIcon />\n                          </IconButton>\n                      </TableCell>\n                  </TableRow>\n                }\n                <TableRow>\n                  <TableCell>Birthday:</TableCell>\n                  <TableCell>{ dateFormatter.withDateTime(new Date(content.birthday)) }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n                {content.security_status !== undefined &&\n                  <TableRow>\n                      <TableCell>Sec status:</TableCell>\n                      <TableCell\n                          className={content.security_status < 0 ? classes.errorColorText : classes.successColorText}>\n                        {content.security_status}\n                      </TableCell>\n                      <TableCell align=\"right\"> </TableCell>\n                  </TableRow>\n                }\n                <TableRow>\n                  <TableCell>Title</TableCell>\n                  <TableCell>{ content.title }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Race:</TableCell>\n                  <TableCell>{ content.race_name }</TableCell>\n                  <TableCell align=\"right\" className={classes.buttonCell}>\n                    <IconButton\n                      size=\"small\"\n                      aria-label=\"open race\"\n                      component={Link}\n                      to={`/race/${content.race_id}`}\n                    >\n                      <ArrowRightIcon />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n                {content.ancestry_id !== undefined && content.ancestry_id > 0 && // 0 is possible even if it's not valid\n                  <TableRow>\n                      <TableCell>Ancestry:</TableCell>\n                      <TableCell>{ content.ancestry_name }</TableCell>\n                      <TableCell align=\"right\" className={classes.buttonCell}>\n                          <IconButton\n                              size=\"small\"\n                              aria-label=\"open ancestry\"\n                              component={Link}\n                              to={`/ancestry/${content.ancestry_id}`}\n                          >\n                              <ArrowRightIcon />\n                          </IconButton>\n                      </TableCell>\n                  </TableRow>\n                }\n                <TableRow>\n                  <TableCell>Bloodline:</TableCell>\n                  <TableCell>{ content.bloodline_name }</TableCell>\n                  <TableCell align=\"right\" className={classes.buttonCell}>\n                    <IconButton\n                      size=\"small\"\n                      aria-label=\"open bloodline\"\n                      component={Link}\n                      to={`/bloodline/${content.bloodline_id}`}\n                    >\n                      <ArrowRightIcon />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n                {content.faction_name !== undefined &&\n                  <TableRow>\n                      <TableCell>Faction:</TableCell>\n                      <TableCell>{ content.faction_name }</TableCell>\n                      <TableCell align=\"right\" className={classes.buttonCell}>\n                          <IconButton\n                              size=\"small\"\n                              aria-label=\"open faction\"\n                              component={Link}\n                              to={`/faction/${content.faction_id}`}\n                          >\n                              <ArrowRightIcon />\n                          </IconButton>\n                      </TableCell>\n                  </TableRow>\n                }\n                <TableRow>\n                  <TableCell>Gender:</TableCell>\n                  <TableCell>{ `${content.gender[0].toUpperCase()}${content.gender.substr(1)}` }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n                {content.description !== undefined &&\n                  <TableRow>\n                      <TableCell className={classes.bioCell}>Bio:</TableCell>\n                      <TableCell colSpan={2}><EntityDescription bio={content.description} /></TableCell>\n                  </TableRow>\n                }\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Grid>\n        <Grid item xs={12} md={6} className={classes.gridWithTable}>\n          <CorpHistoryTable corporations={content.corporation_history} />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}\n","import React, {useEffect, useState} from 'react';\nimport { useParams } from \"react-router-dom\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport AppBar from \"../AppBar/AppBar\";\nimport CharacterInfoContent from \"./CharacterInfoContent/CharacterInfoContent\";\nimport Container from \"@material-ui/core/Container\";\nimport LoadingFullPage from \"../LoadingFullPage/LoadingFullPage\";\nimport { useDeps } from \"../../context/DepsContext/DepsContext\";\nimport CharacterRepositoryInterface from \"../../repository/CharacterRepository/CharacterRepositoryInterface\";\nimport ApiErrorFullPage from \"../ApiErrorFullPage/ApiErrorFullPage\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      paddingBottom: 0,\n      paddingLeft: 0,\n      paddingRight: 0,\n    },\n    content: {\n      flexGrow: 1,\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3),\n      [theme.breakpoints.down('xs')]: {\n        padding: 0,\n      }\n    },\n    // necessary for content to be below app bar\n    toolbar: {\n      minHeight: 56,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 48,\n      }\n    },\n  }),\n);\n\nexport default function CharacterInfo() {\n  let classes = useStyles();\n  let [apiResult, setApiResult] = useState(<LoadingFullPage />);\n  let [retry, setRetry] = useState(false);\n  let {\n    characterRepository\n  }: {\n    characterRepository: CharacterRepositoryInterface\n  } = useDeps();\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  useEffect(() => {\n    if (id === undefined) {\n      return;\n    }\n\n    setApiResult(<LoadingFullPage />);\n    setRetry(false);\n\n    characterRepository.getOne(Number(id))\n      .then(data => {\n        setApiResult(\n          <CharacterInfoContent content={data} />\n        )\n      }).catch(e => {\n        setApiResult(\n          <ApiErrorFullPage\n            retry={() => setRetry(true)}\n            text={e.message}\n          />\n        );\n      });\n  }, [retry, id]);\n\n  return (\n    <React.Fragment>\n      <AppBar title=\"Character\" />\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          {apiResult}\n        </Container>\n      </main>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function ConstellationInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>constellation {id}</h1>\n  );\n}\n","import MUIDataTable, {MUIDataTableColumnDef, MUIDataTableMeta, MUIDataTableOptions} from \"mui-datatables\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Link} from \"react-router-dom\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport React from \"react\";\nimport {createStyles, makeStyles, Theme, useTheme} from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport Grid from '@material-ui/core/Grid';\nimport { useDeps } from \"../../../context/DepsContext/DepsContext\";\nimport RepoCharacterCorpHistoryInterface\n  from \"../../../repository/CharacterRepository/RepoCharacterCorpHistoryInterface\";\nimport DateFormatterInterface from \"../../../service/DateFormatter/DateFormatterInterface\";\nimport RepoCorpAllianceHistoryInterface\n  from \"../../../repository/CorporationRepository/RepoCorpAllianceHistoryInterface\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst options: MUIDataTableOptions = {\n  download: false,\n  elevation: 1,\n  filter: false,\n  fixedHeader: false,\n  print: false,\n  responsive: \"standard\",\n  rowHover: false,\n  rowsPerPage: 100,\n  rowsPerPageOptions: [],\n  search: false,\n  selectableRows: \"none\",\n  viewColumns: false,\n};\n\nconst styles = {\n  allianceImg: {\n    display: \"flex\",\n  }\n};\n\nconst extractAllianceID = (tableMeta: MUIDataTableMeta): number => {\n  return tableMeta.rowData[5];\n};\n\nexport default function AllianceHistoryTable(\n  {\n    alliances\n  }: {\n    alliances: RepoCorpAllianceHistoryInterface[]\n  }\n) {\n  let theme = useTheme();\n  let isSmall = useMediaQuery(theme.breakpoints.down('xs'));\n  let {\n    dateFormatter\n  }: {\n    dateFormatter: DateFormatterInterface\n  } = useDeps();\n\n  const columns: MUIDataTableColumnDef[] = [\n    {\n      name: \"logo\",\n      label: \"\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          let id = extractAllianceID(tableMeta);\n\n          return (\n            <img\n              src={`https://images.evetech.net/alliances/${id}/logo?size=64`}\n              alt=\"alliance logo\"\n              height={48}\n              width={48}\n              style={styles.allianceImg}\n            />\n          );\n        },\n        display: !isSmall,\n        setCellProps: () => ({ style: { width: 0, paddingTop: 0, paddingBottom: 0, paddingRight: 0 }}),\n      }\n    },\n    {\n      name: \"alliance_name\",\n      label: \"Name\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          let isDeleted = tableMeta.rowData[7];\n\n          return `${value}${isDeleted === true ? \" (Closed)\" : \"\"}`;\n        },\n      }\n    },\n    {\n      name: \"start_date\",\n      label: \"From\",\n      options: {\n        display: false,\n      }\n    },\n    {\n      name: \"end_date\",\n      label: \"To\",\n      options: {\n        display: false,\n      }\n    },\n    {\n      name: \"stacked_dates\",\n      label: \"From To\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          let start = tableMeta.rowData[2];\n          let end = tableMeta.rowData[3];\n\n          return (\n            <React.Fragment>\n              <Grid container direction=\"column\">\n                {end !== undefined &&\n                  <Grid item xs style={{ whiteSpace: \"nowrap\" }}>\n                    {dateFormatter.withDateTime(new Date(end))}\n                  </Grid>\n                }\n                <Grid item xs style={{ whiteSpace: \"nowrap\" }}>\n                  {dateFormatter.withDateTime(new Date(start))}\n                </Grid>\n              </Grid>\n            </React.Fragment>\n          );\n        },\n        setCellProps: () => ({ style: { paddingTop: 0, paddingBottom: 0 }}),\n      }\n    },\n    {\n      name: \"alliance_id\",\n      label: \"ID\",\n      options: {\n        customHeadRender: () => null,\n        display: false,\n      }\n    },\n    {\n      name: \"icon\",\n      label: \"\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          let id = extractAllianceID(tableMeta);\n\n          return (\n            <IconButton\n              size=\"small\"\n              aria-label=\"open\"\n              component={Link}\n              to={`/alliance/${id}`}\n            >\n              <ArrowRightIcon/>\n            </IconButton>\n          );\n        },\n        download: false,\n        setCellProps: () => ({style: {width: 0, paddingTop: 0, paddingBottom: 0}}),\n      }\n    },\n    {\n      name: \"is_deleted\",\n      label: \"Is deleted\",\n      options: {\n        display: false,\n      }\n    },\n  ];\n\n  return(\n    <MUIDataTable\n      title={\"Alliance History\"}\n      data={alliances}\n      columns={columns}\n      options={options}\n    />\n  );\n}","import RepoCorporationInterface from \"../../../repository/CorporationRepository/RepoCorporationInterface\";\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport {createStyles, makeStyles, Theme, useTheme} from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport RepoCharacterInterface from \"../../../repository/CharacterRepository/RepoCharacterInterface\";\nimport { useDeps } from \"../../../context/DepsContext/DepsContext\";\nimport DateFormatterInterface from \"../../../service/DateFormatter/DateFormatterInterface\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Link} from \"react-router-dom\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport ClearIcon from '@material-ui/icons/Clear';\nimport CheckIcon from '@material-ui/icons/Check';\nimport EntityDescription from \"../../EntityDescription/EntityDescription\";\nimport AllianceHistoryTable from \"../AllianceHistoryTable/AllianceHistoryTable\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    buttonCell: {\n      paddingTop: 0,\n      paddingBottom: 0,\n      width: 0,\n    },\n    gridContainer: {\n      marginTop: 0,\n    },\n    gridWithTable: {\n      [theme.breakpoints.down('xs')]: {\n        paddingBottom: theme.spacing(3),\n      },\n    },\n    title: {\n      [theme.breakpoints.down('xs')]: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2)\n      },\n    },\n    logo: {\n      textAlign: \"center\",\n      paddingTop: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n    },\n    nameCell: {\n      backgroundColor: theme.palette.secondary.main,\n      color: theme.palette.secondary.contrastText,\n    },\n    entityLogoCell: {\n      paddingTop: 0,\n      paddingRight: 0,\n      paddingBottom: 0\n    },\n    entityLogoGrid: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    entityLogoImg: {\n      marginRight: theme.spacing(1),\n      [theme.breakpoints.down('xs')]: {\n        display: \"none\",\n      },\n    },\n    noWrapCell: {\n      whiteSpace: \"nowrap\",\n      [theme.breakpoints.down('xs')]: {\n        whiteSpace: \"normal\",\n      },\n    },\n    bioCell: {\n      verticalAlign: \"top\",\n    },\n    successColorText: {\n      color: theme.palette.success.main,\n    },\n    errorColorText: {\n      color: theme.palette.error.main,\n    },\n  }),\n);\n\nexport default function CorporationInfoContent(\n  {\n    content\n  }: {\n    content: RepoCorporationInterface\n  }\n) {\n  let classes = useStyles();\n  let theme = useTheme();\n  let isSmall = useMediaQuery(theme.breakpoints.down('xs'));\n  let {\n    dateFormatter\n  }: {\n    dateFormatter: DateFormatterInterface\n  } = useDeps();\n\n  return (\n    <React.Fragment>\n      <Grid container spacing={isSmall ? 0 : 3} className={classes.gridContainer}>\n        <Grid item xs={12} className={classes.logo}>\n          <img\n            alt=\"corporation logo\"\n            src={`https://images.evetech.net/corporations/${content.id}/logo`}\n            height=\"180\"\n            width=\"180\"\n          />\n        </Grid>\n        <Grid item xs={12} md={6} className={classes.gridWithTable}>\n          <TableContainer component={Paper}>\n            <Table aria-label=\"corporation information\">\n              <TableBody>\n\n                <TableRow>\n                  <TableCell\n                    colSpan={3}\n                    align=\"center\"\n                    className={classes.nameCell}\n                  >\n                    <Typography variant=\"h6\">{ content.name }</Typography>\n                  </TableCell>\n                </TableRow>\n\n                <TableRow>\n                  <TableCell>Ticker:</TableCell>\n                  <TableCell>{ content.ticker }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n\n                {content.alliance_id !== undefined &&\n                  <TableRow>\n                    <TableCell>Alliance:</TableCell>\n                    <TableCell className={classes.entityLogoCell}>\n                      <Grid container>\n                        <Grid item className={classes.entityLogoGrid}>\n                          <img\n                              src={`https://images.evetech.net/alliances/${content.alliance_id}/logo?size=64`}\n                              alt=\"alliance logo\"\n                              height={48}\n                              width={48}\n                              className={classes.entityLogoImg}\n                          />\n                        </Grid>\n                        <Grid item className={classes.entityLogoGrid}>\n                          { content.alliance_name }\n                        </Grid>\n                      </Grid>\n                    </TableCell>\n                    <TableCell align=\"right\" className={classes.buttonCell}>\n                      <IconButton\n                        size=\"small\"\n                        aria-label=\"open alliance\"\n                        component={Link}\n                        to={`/alliance/${content.alliance_id}`}\n                      >\n                        <ArrowRightIcon />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                }\n\n                <TableRow>\n                  <TableCell>CEO:</TableCell>\n                  <TableCell className={classes.entityLogoCell}>\n                    <Grid container>\n                      <Grid item className={classes.entityLogoGrid}>\n                        <img\n                          src={`https://images.evetech.net/characters/${content.ceo_id}/portrait?size=64`}\n                          alt=\"character portrait\"\n                          height={48}\n                          width={48}\n                          className={classes.entityLogoImg}\n                        />\n                      </Grid>\n                      <Grid item className={classes.entityLogoGrid}>\n                        { content.ceo_name }\n                      </Grid>\n                    </Grid>\n                  </TableCell>\n                  <TableCell align=\"right\" className={classes.buttonCell}>\n                    <IconButton\n                      size=\"small\"\n                      aria-label=\"open character\"\n                      component={Link}\n                      to={`/character/${content.ceo_id}`}\n                    >\n                      <ArrowRightIcon />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n\n                {content.creator_id !== 1 && // 1 when it's created manually by CCP\n                  <TableRow>\n                    <TableCell>Founder:</TableCell>\n                    <TableCell className={classes.entityLogoCell}>\n                      <Grid container>\n                        <Grid item className={classes.entityLogoGrid}>\n                          <img\n                            src={`https://images.evetech.net/characters/${content.creator_id}/portrait?size=64`}\n                            alt=\"character portrait\"\n                            height={48}\n                            width={48}\n                            className={classes.entityLogoImg}\n                          />\n                        </Grid>\n                        <Grid item className={classes.entityLogoGrid}>\n                          { content.creator_name }\n                        </Grid>\n                      </Grid>\n                    </TableCell>\n                    <TableCell align=\"right\" className={classes.buttonCell}>\n                      <IconButton\n                        size=\"small\"\n                        aria-label=\"open character\"\n                        component={Link}\n                        to={`/character/${content.creator_id}`}\n                      >\n                        <ArrowRightIcon />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                }\n\n                <TableRow>\n                  <TableCell>Members:</TableCell>\n                  <TableCell>{ content.member_count }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n\n                {content.date_founded !== undefined &&\n                  <TableRow>\n                    <TableCell>Creation date:</TableCell>\n                    <TableCell>{ dateFormatter.withDateTime(new Date(content.date_founded)) }</TableCell>\n                    <TableCell align=\"right\"> </TableCell>\n                  </TableRow>\n                }\n\n                {content.faction_id !== undefined &&\n                  <TableRow>\n                    <TableCell>Faction:</TableCell>\n                    <TableCell>{ content.faction_name }</TableCell>\n                    <TableCell align=\"right\"> </TableCell>\n                  </TableRow>\n                }\n\n                {content.home_station_id !== undefined &&\n                  <TableRow>\n                    <TableCell className={classes.noWrapCell}>Home station:</TableCell>\n                    <TableCell>{ content.home_station_name }</TableCell>\n                    <TableCell align=\"right\" className={classes.buttonCell}>\n                      <IconButton\n                        size=\"small\"\n                        aria-label=\"open station\"\n                        component={Link}\n                        to={`/station/${content.home_station_id}`}\n                      >\n                        <ArrowRightIcon />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                }\n\n                <TableRow>\n                  <TableCell>Tax rate:</TableCell>\n                  <TableCell>{ content.tax_rate }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n\n                {content.shares !== undefined &&\n                  <TableRow>\n                    <TableCell>Shares:</TableCell>\n                    <TableCell>{ content.shares }</TableCell>\n                    <TableCell align=\"right\"> </TableCell>\n                  </TableRow>\n                }\n\n                <TableRow>\n                  <TableCell>War eligible:</TableCell>\n                  <TableCell className={classes.entityLogoCell}>\n                    {content.war_eligible === true\n                      ? <CheckIcon className={classes.successColorText} />\n                      : <ClearIcon className={classes.errorColorText} />\n                    }\n                  </TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n\n                <TableRow>\n                  <TableCell>ID:</TableCell>\n                  <TableCell>{ content.id }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n\n                {content.url !== undefined &&\n                  <TableRow>\n                    <TableCell>Url:</TableCell>\n                    <TableCell><a href={ content.url}>{ content.url }</a></TableCell>\n                    <TableCell align=\"right\"> </TableCell>\n                  </TableRow>\n                }\n\n                {content.description !== undefined &&\n                  <TableRow>\n                    <TableCell className={classes.bioCell}>Description:</TableCell>\n                    <TableCell colSpan={2}><EntityDescription bio={content.description} /></TableCell>\n                  </TableRow>\n                }\n                </TableBody>\n            </Table>\n          </TableContainer>\n        </Grid>\n        <Grid item xs={12} md={6} className={classes.gridWithTable}>\n          <AllianceHistoryTable alliances={content.alliance_history} />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  )\n}\n","import React, {useEffect, useState} from 'react';\nimport { useParams } from \"react-router-dom\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport AppBar from \"../AppBar/AppBar\";\nimport Container from \"@material-ui/core/Container\";\nimport LoadingFullPage from \"../LoadingFullPage/LoadingFullPage\";\nimport { useDeps } from \"../../context/DepsContext/DepsContext\";\nimport ApiErrorFullPage from \"../ApiErrorFullPage/ApiErrorFullPage\";\nimport CorporationRepositoryInterface from \"../../repository/CorporationRepository/CorporationRepositoryInterface\";\nimport CorporationInfoContent from \"./CorporationInfoContent/CorporationInfoContent\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      paddingBottom: 0,\n      paddingLeft: 0,\n      paddingRight: 0,\n    },\n    content: {\n      flexGrow: 1,\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3),\n      [theme.breakpoints.down('xs')]: {\n        padding: 0,\n      }\n    },\n    // necessary for content to be below app bar\n    toolbar: {\n      minHeight: 56,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 48,\n      }\n    },\n  }),\n);\n\nexport default function CorporationInfo() {\n  let classes = useStyles();\n  let [apiResult, setApiResult] = useState(<LoadingFullPage />);\n  let [retry, setRetry] = useState(false);\n  let {\n    corporationRepository\n  }: {\n    corporationRepository: CorporationRepositoryInterface\n  } = useDeps();\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  useEffect(() => {\n    if (id === undefined) {\n      return;\n    }\n\n    setApiResult(<LoadingFullPage />);\n    setRetry(false);\n\n    corporationRepository.getOne(Number(id))\n      .then(data => {\n        setApiResult(\n          <CorporationInfoContent content={data} />\n        )\n      }).catch(e => {\n        setApiResult(\n          <ApiErrorFullPage\n            retry={() => setRetry(true)}\n            text={e.message}\n          />\n        );\n      });\n  }, [retry, id]);\n\n  return (\n    <React.Fragment>\n      <AppBar title=\"Corporation\" />\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          {apiResult}\n        </Container>\n      </main>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function TypeInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>type {id}</h1>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function RegionInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>region {id}</h1>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function SystemInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>system {id}</h1>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function StationInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>station {id}</h1>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function FactionInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>faction {id}</h1>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function RaceInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>race {id}</h1>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function AncestryInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>ancestry {id}</h1>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function BloodlineInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>bloodline {id}</h1>\n);\n}\n","import React from 'react';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport { useSelector, useDispatch } from 'react-redux';\nimport \"typeface-rajdhani\";\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport MUISwitch from '@material-ui/core/Switch';\nimport { Route, Switch } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport SearchIcon from '@material-ui/icons/Search';\n\nimport Home from \"../Home/Home\";\nimport Search from \"../Search/Search\";\nimport AllianceInfo from \"../AllianceInfo/AllianceInfo\";\nimport CharacterInfo from \"../CharacterInfo/CharacterInfo\";\nimport ConstellationInfo from \"../ConstellationInfo/ConstellationInfo\";\nimport CorporationInfo from \"../CorporationInfo/CorporationInfo\";\nimport TypeInfo from \"../TypeInfo/TypeInfo\";\nimport RegionInfo from \"../RegionInfo/RegionInfo\";\nimport SystemInfo from \"../SystemInfo/SystemInfo\";\nimport StationInfo from \"../StationInfo/StationInfo\";\nimport FactionInfo from \"../FactionInfo/FactionInfo\";\nimport RaceInfo from \"../RaceInfo/RaceInfo\";\nimport AncestryInfo from \"../AncestryInfo/AncestryInfo\";\nimport BloodlineInfo from \"../BloodlineInfo/BloodlineInfo\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n    },\n    drawer: {\n      [theme.breakpoints.up('lg')]: {\n        width: drawerWidth,\n        flexShrink: 0,\n      },\n    },\n    // necessary for content to be below app bar\n    toolbar: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: 56,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 48,\n      }\n    },\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    logoText: {\n      fontFamily: [\n        'Rajdhani',\n        'sans-serif',\n      ].join(','),\n      fontWeight: 600,\n    },\n    darkModeToggle: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: 48,\n    },\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\ninterface Props {\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  window?: () => Window;\n}\n\nexport default function ResponsiveDrawer(props: Props) {\n  const { window } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  // FIXME\n  // @ts-ignore\n  const mobileOpen = useSelector(state => state.drawer.mobileOpen);\n  // @ts-ignore\n  const darkMode = useSelector(state => state.theme.darkMode);\n  const dispatch = useDispatch();\n\n  const handleCloseDrawer = () => dispatch({type: 'drawer/mobileClose'});\n\n  const darkModeToggle = (\n    <React.Fragment>\n      <Divider />\n      <FormGroup row className={classes.darkModeToggle}>\n        <FormControlLabel\n          control={\n            <MUISwitch\n              checked={darkMode}\n              onChange={() => dispatch({type: 'theme/changeMode'})}\n              name=\"checkedB\"\n              //color=\"primary\"\n              size=\"small\"\n            />\n          }\n          label=\"Dark mode\"\n        />\n      </FormGroup>\n    </React.Fragment>\n  );\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar}>\n        <Typography variant=\"h4\" align=\"center\" className={classes.logoText}>\n          evelook\n        </Typography>\n      </div>\n      <Divider />\n      <List>\n        <ListItem\n          button\n          component={Link}\n          to=\"/search\"\n          onClick={handleCloseDrawer}\n        >\n          <ListItemIcon>\n            <SearchIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Search\" />\n        </ListItem>\n      </List>\n      {\n        darkModeToggle\n      }\n    </div>\n  );\n\n  const container = window !== undefined ? () => window().document.body : undefined;\n\n  return (\n    <div className={classes.root}>\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden lgUp implementation=\"css\">\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleCloseDrawer}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden mdDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route exact path=\"/search\">\n          <Search />\n        </Route>\n        <Route path=\"/alliance/:id\">\n          <AllianceInfo />\n        </Route>\n        <Route path=\"/ancestry/:id\">\n          <AncestryInfo />\n        </Route>\n        <Route path=\"/bloodline/:id\">\n          <BloodlineInfo />\n        </Route>\n        <Route path=\"/character/:id\">\n          <CharacterInfo />\n        </Route>\n        <Route path=\"/constellation/:id\">\n          <ConstellationInfo />\n        </Route>\n        <Route path=\"/corporation/:id\">\n          <CorporationInfo />\n        </Route>\n        <Route path=\"/type/:id\">\n          <TypeInfo />\n        </Route>\n        <Route path=\"/race/:id\">\n          <RaceInfo />\n        </Route>\n        <Route path=\"/region/:id\">\n          <RegionInfo />\n        </Route>\n        <Route path=\"/system/:id\">\n          <SystemInfo />\n        </Route>\n        <Route path=\"/station/:id\">\n          <StationInfo />\n        </Route>\n        <Route path=\"/faction/:id\">\n          <FactionInfo />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { useSelector } from 'react-redux';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport Dashboard from \"../Dashboard/Dashboard\";\n\nconst theme = (darkMode: boolean) => createMuiTheme({\n  palette: {\n    primary: {\n      main: '#263238',\n    },\n    secondary: {\n      main: '#607d8b',\n    },\n    type: darkMode ? 'dark' : 'light',\n  },\n});\n\nfunction MyApp() {\n  // @ts-ignore\n  const darkMode = useSelector(state => state.theme.darkMode);\n\n  return (\n    <ThemeProvider theme={theme(darkMode)}>\n      <CssBaseline />\n      <Dashboard />\n    </ThemeProvider>\n  );\n}\n\nexport default MyApp;\n","const initialState = {\n  mobileOpen: false,\n}\n\nexport default function drawerReducer(\n  state = initialState,\n  action: {type: string, payload?: any}\n) {\n  switch (action.type) {\n    case 'drawer/mobileOpen': {\n      return {\n        ...state,\n        mobileOpen: true,\n      };\n    }\n    case 'drawer/mobileClose': {\n      return {\n        ...state,\n        mobileOpen: false\n      };\n    }\n    default:\n      return state;\n  }\n}\n","const initialState = {\n  darkMode: false,\n}\n\nexport default function themeReducer(\n  state = initialState,\n  action: {type: string, payload?: any}\n) {\n  switch (action.type) {\n    case 'theme/changeMode': {\n      return {\n        ...state,\n        darkMode: !state.darkMode,\n      };\n    }\n    default:\n      return state;\n  }\n}","import {combineReducers} from 'redux';\n\nimport drawerReducer from './feature/drawer/drawerSlice';\nimport themeReducer from './feature/theme/themeSlice';\n\nconst rootReducer = combineReducers({\n  // keys of this object will become the keys of the root state object\n  drawer: drawerReducer,\n  theme: themeReducer,\n});\n\nexport default rootReducer;\n","import {createStore} from 'redux';\n\nimport rootReducer from \"./reducer\";\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import EsiClientInterface from \"./EsiClientInterface\";\nimport EsiErrorManagerInterface from \"../EsiErrorManager/EsiErrorManagerInterface\";\nimport Query from \"../QueryFactory/Query\";\n\nclass EsiClient implements EsiClientInterface {\n  private readonly _baseUrl = \"https://esi.evetech.net\";\n  private readonly _userAgent = \"evelook\";\n  private readonly _fetchClient;\n  private readonly _esiErrorManager;\n\n  constructor(\n    fetchClient: (\n      input: RequestInfo,\n      init?: RequestInit\n    ) => Promise<Response>,\n    esiErrorManager: EsiErrorManagerInterface\n  ) {\n    this._fetchClient = fetchClient;\n    this._esiErrorManager = esiErrorManager;\n  }\n\n  /**\n   * @throws Error On network error or broken error window.\n   */\n  public async getResponse(\n    endUrl: string,\n    method: \"GET\" | \"POST\" | \"DELETE\" | \"PUT\",\n    query: Query | null = null,\n    body: object | null = null\n  ): Promise<Response> {\n    if (this._esiErrorManager.isErrorWindowBroken()) {\n      throw new Error(\"Aborting, too many errors.\");\n    }\n\n    let headers = {\n      \"X-User-Agent\": this._userAgent,\n    };\n\n    let options: RequestInit = {\n      method: method,\n      cache: \"default\",\n      headers: headers\n    };\n\n    let uri = `${this._baseUrl}${endUrl}`;\n    if (query !== null && !query.isEmpty()) {\n      uri = uri.concat(`?${query.toString()}`);\n    }\n\n    if (body !== null) {\n      options[\"body\"] = JSON.stringify(body);\n    }\n\n    let response = await this._fetchClient(uri, options);\n    this._esiErrorManager.saveErrorWindowInfo(response.headers);\n    if (!response.ok) {\n      if (response.status === 420) {  // We are error limited\n        this._esiErrorManager.flagWindowAsBroken();\n      } else {\n        this._esiErrorManager.incrementError();\n      }\n    }\n\n    return response;\n  }\n}\n\nexport default EsiClient;\n","import EsiErrorManagerInterface from \"./EsiErrorManagerInterface\";\n\nclass EsiErrorManager implements EsiErrorManagerInterface {\n  private _errorReset = Date.now() + 60000;\n  private _errorRemain = 100;\n\n  public isErrorWindowBroken(): boolean {\n    if (this._errorReset < Date.now()) {\n      this._resetErrorWindow();\n    }\n\n    return this._errorRemain <= 1;\n  }\n\n  public incrementError(): void {\n    this._errorRemain--;\n  }\n\n  public saveErrorWindowInfo(headers: Headers): void {\n    let limitReset = headers.get(\"x-esi-error-limit-reset\");\n    let limitRemain = headers.get(\"x-esi-error-limit-remain\");\n    if (limitReset === null || limitRemain === null) {\n      return;\n    }\n\n    let headerErrorReset = Number(limitReset);\n    let headerErrorRemain = Number(limitRemain);\n\n    this._errorReset = Date.now() + (headerErrorReset * 1000);\n    if (headerErrorRemain < this._errorRemain) {\n      this._errorRemain = headerErrorRemain;\n    }\n  }\n\n  public flagWindowAsBroken(): void {\n    this._errorRemain = 0;\n  }\n\n  private _resetErrorWindow(): void {\n    this._errorReset = Date.now() + 60000;\n    this._errorRemain = 100;\n  }\n}\n\nexport default EsiErrorManager;\n","import QueryDictionaryInterface from \"./QueryDictionaryInterface\";\n\nclass Query  {\n  private readonly _spaceDelimiter;\n  private _query: QueryDictionaryInterface = {};\n\n  constructor(spaceDelimiter: string = \",\") {\n    this._spaceDelimiter = spaceDelimiter;\n  }\n\n  add(attribute: string, values: string[]): void {\n    this._query[attribute] = values;\n  }\n\n  isEmpty(): boolean {\n    return Object.keys(this._query).length === 0;\n  }\n\n  toString(): string {\n    let queryString = \"\";\n\n    for (let attribute in this._query) {\n      if (!this._query.hasOwnProperty(attribute)) {\n        continue;\n      }\n\n      if (queryString.length > 0) {\n        queryString = queryString.concat(\"&\");\n      }\n\n      let values = \"\";\n      this._query[attribute].forEach((value, index) => {\n        if (index > 0) {\n          values = values.concat(this._spaceDelimiter);\n        }\n\n        values = values.concat(encodeURIComponent(value));\n      });\n\n      queryString = queryString.concat(`${attribute}=${values}`);\n    }\n\n    return queryString;\n  }\n}\n\nexport default Query;\n","import Query from \"./Query\";\n\nclass QueryFactory {\n  public make(): Query {\n    return new Query();\n  }\n}\n\nexport default QueryFactory;\n","class EsiError extends Error {\n  constructor(response: Response) {\n    super(`Esi error code ${response.status}: ${response.statusText}`);\n  }\n}\n\nexport default EsiError;\n","import EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiStatusInterface from \"./EsiStatusInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\nimport StatusCallInterface from \"./StatusCallInterface\";\n\nclass StatusCall implements StatusCallInterface{\n  private readonly _esiClient;\n  private readonly _url = \"/v2/status/\";\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  async get(): Promise<EsiStatusInterface> {\n    let response = await this._esiClient.getResponse(this._url, \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n}\n\nexport default StatusCall;\n","import UniverseNamesCallInterface from \"./UniverseNamesCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\nimport EsiUniverseNamesInterface from \"./EsiUniverseNamesInterface\";\n\nclass UniverseNamesCall implements UniverseNamesCallInterface {\n  private readonly _esiClient;\n  private readonly _url = \"/v3/universe/names/\";\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  async get(ids: number[]): Promise<EsiUniverseNamesInterface[]> {\n    let response = await this._esiClient.getResponse(\n      this._url,\n      \"POST\",\n      null,\n      ids\n    );\n\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n}\n\nexport default UniverseNamesCall;\n","import AllianceListCallInterface from \"./AllianceListCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass AllianceListCall implements AllianceListCallInterface {\n  private readonly _esiClient;\n  private readonly _url = \"/v2/alliances/\";\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  async get(): Promise<number[]> {\n    let response = await this._esiClient.getResponse(this._url, \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n}\n\nexport default AllianceListCall;\n","import AllianceInfoCallInterface from \"./AllianceInfoCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\nimport EsiAllianceInfoInterface from \"./EsiAllianceInfoInterface\";\n\nclass AllianceInfoCall implements AllianceInfoCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  async get(id: number): Promise<EsiAllianceInfoInterface> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v4/alliances/${id}/`;\n  }\n}\n\nexport default AllianceInfoCall;\n","import NameRepositoryInterface from \"./NameRepositoryInterface\";\nimport UniverseNamesCallInterface from \"../../service/Call/UniverseNamesCall/UniverseNamesCallInterface\";\nimport EsiUniverseNamesInterface from \"../../service/Call/UniverseNamesCall/EsiUniverseNamesInterface\";\n\nclass NameRepository implements NameRepositoryInterface {\n  private readonly _universeNamesCaller;\n\n  constructor(universeNamesCaller: UniverseNamesCallInterface) {\n    this._universeNamesCaller = universeNamesCaller;\n  }\n\n  public async resolveGeneric(ids: number[]): Promise<EsiUniverseNamesInterface[]> {\n    this._removeBannedIDs(ids);\n\n    let allResolvedIDs: EsiUniverseNamesInterface[] = [];\n    let failuresCount = 0;\n    let maxAllowedFailures = 20;\n\n    let chunks: number[][] = [];\n    while (ids.length > 0) {\n      chunks.push(ids.splice(0, 999));\n    }\n\n    for (let chunk of chunks) {\n      if (failuresCount >= maxAllowedFailures) {\n        throw new Error(\"\");  // TODO\n      }\n\n      try {\n        let localResolvedIDs = await this._universeNamesCaller.get(chunk);\n        allResolvedIDs = allResolvedIDs.concat(localResolvedIDs);\n      } catch (e) {\n        failuresCount++;\n\n        if (chunk.length > 1) {\n          // We split the chunk in half for retries\n          chunks.push(chunk.splice(0, Math.round(chunk.length / 2)));\n          chunks.push(chunk);\n        }\n      }\n    }\n\n    return allResolvedIDs;\n  }\n\n  private _removeBannedIDs(ids: number[]): void {\n    let index = ids.indexOf(1);\n    if (index !== -1) {\n      ids.splice(index, 1);\n    }\n  }\n}\n\nexport default NameRepository;\n","import AllianceCorporationsCallInterface from \"./AllianceCorporationsCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass AllianceCorporationsCall implements AllianceCorporationsCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  async get(id: number): Promise<number[]> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v2/alliances/${id}/corporations/`;\n  }\n}\n\nexport default AllianceCorporationsCall;\n","import EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiPublicSearchInterface from \"./EsiPublicSearchInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\nimport QueryFactoryInterface from \"../../QueryFactory/QueryFactoryInterface\";\nimport PublicSearchCallInterface from \"./PublicSearchCallInterface\";\nimport EsiCategory from \"./EsiCategory\";\n\nclass PublicSearchCall implements PublicSearchCallInterface {\n  private readonly _esiClient;\n  private readonly _queryFactory;\n  private readonly _url = \"/v2/search/\";\n\n  constructor(\n    esiClient: EsiClientInterface,\n    queryFactory: QueryFactoryInterface\n  ) {\n    this._esiClient = esiClient;\n    this._queryFactory = queryFactory;\n  }\n\n  /**\n   * @throws Error\n   */\n  async get(\n    searchString: string,\n    categories: EsiCategory[],\n    strict?: boolean\n  ): Promise<EsiPublicSearchInterface> {\n    let query = this._queryFactory.make();\n    query.add(\"search\", [searchString]);\n    query.add(\"categories\", categories);\n    if (strict !== undefined) {\n      query.add(\"strict\", [String(strict)]);\n    }\n\n    let response = await this._esiClient.getResponse(this._url, \"GET\", query);\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n}\n\nexport default PublicSearchCall;\n","import AllianceListCallInterface from \"../../service/Call/AllianceListCall/AllianceListCallInterface\";\nimport NameRepositoryInterface from \"../NameRepository/NameRepositoryInterface\";\nimport AllianceRepositoryInterface from \"./AllianceRepositoryInterface\";\nimport AllianceInfoCallInterface from \"../../service/Call/AllianceInfoCall/AllianceInfoCallInterface\";\nimport RepoAllianceInterface from \"./RepoAllianceInterface\";\nimport AllianceCorporationsCallInterface\n  from \"../../service/Call/AllianceCorporationsCall/AllianceCorporationsCallInterface\";\n\nclass AllianceRepository implements AllianceRepositoryInterface {\n  private readonly _allianceListCall;\n  private readonly _allianceInfoCall;\n  private readonly _allianceCorpsCall;\n  private readonly _nameRepo;\n\n  constructor(\n    allianceListCall: AllianceListCallInterface,\n    allianceInfoCall: AllianceInfoCallInterface,\n    allianceCorpsCall: AllianceCorporationsCallInterface,\n    nameRepo: NameRepositoryInterface\n  ) {\n    this._allianceListCall = allianceListCall;\n    this._allianceInfoCall = allianceInfoCall;\n    this._allianceCorpsCall = allianceCorpsCall;\n    this._nameRepo = nameRepo;\n  }\n\n  public async getOne(id: number): Promise<RepoAllianceInterface> {\n    let esiAlliancePromise = this._allianceInfoCall.get(id);\n    let esiAllianceCorpsPromise = this._allianceCorpsCall.get(id);\n\n    let esiAlliance = await esiAlliancePromise;\n    let repoAlliance: RepoAllianceInterface = {\n      ...esiAlliance,\n      id: id,\n      creator_corporation_name: \"#error\",\n      creator_name: \"#error\",\n      executor_corporation_name: undefined,\n      faction_name: undefined,\n      corporations: {}\n    };\n\n    let {\n      creator_corporation_id,\n      creator_id,\n      executor_corporation_id,\n      faction_id\n    } = esiAlliance;\n    let idsToResolve: number[] = [];\n    this._pushUnique(idsToResolve, creator_corporation_id);\n    this._pushUnique(idsToResolve, creator_id);\n    if (executor_corporation_id !== undefined) {\n      this._pushUnique(idsToResolve, executor_corporation_id);\n    }\n    if (faction_id !== undefined) {\n      this._pushUnique(idsToResolve, faction_id);\n    }\n\n    let esiAllianceCorps = await esiAllianceCorpsPromise;\n    let corpsNamesPromise = this._nameRepo.resolveGeneric(esiAllianceCorps);\n    let allianceNamesPromise = this._nameRepo.resolveGeneric(idsToResolve);\n\n    let allianceNames = await allianceNamesPromise;\n    allianceNames.forEach(resolvedName => {\n      let { id, name } = resolvedName;\n      if (id === creator_corporation_id) {\n        repoAlliance.creator_corporation_name = name;\n      }\n      if (id === creator_id) {\n        repoAlliance.creator_name = name;\n      }\n      if (id === executor_corporation_id) {\n        repoAlliance.executor_corporation_name = name;\n      }\n      if (id === faction_id) {\n        repoAlliance.faction_name = name;\n      }\n    });\n\n    let corpsNames = await corpsNamesPromise;\n    corpsNames.forEach(corpName => {\n      repoAlliance.corporations[corpName.id] = corpName.name;\n    });\n\n    return repoAlliance;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getList(): Promise<{\n    [key: string]: string\n  }> {\n    let allianceIDs = await this._allianceListCall.get();\n    let names = await this._nameRepo.resolveGeneric(allianceIDs);\n\n    let resolved: { [key: string]: string } = {};\n    names.forEach(({id, name}) => {\n      resolved[id] = name;\n    });\n\n    let unresolved: number[] = [];\n    allianceIDs.forEach(id => {\n      if (!resolved.hasOwnProperty(id)) {\n        unresolved.push(id);\n      }\n    });\n    unresolved.forEach(id => {\n      resolved[id] = `UNRESOLVED#${id}`;\n    });\n\n    return resolved;\n  }\n\n  private _pushUnique(inputArray: number[], value: number): number[] {\n    if (!inputArray.includes(value)) {\n      inputArray.push(value);\n    }\n\n    return inputArray;\n  }\n}\n\nexport default AllianceRepository;\n","const categoriesForType = [\"agent\", \"alliance\", \"character\", \"constellation\", \"corporation\", \"faction\", \"inventory_type\", \"region\", \"solar_system\", \"station\"] as const;\ntype EsiCategory = typeof categoriesForType[number];\nconst esiCategories: EsiCategory[] = [\"agent\", \"alliance\", \"character\", \"constellation\", \"corporation\", \"faction\", \"inventory_type\", \"region\", \"solar_system\", \"station\"];\n\nexport default EsiCategory;\nexport { esiCategories };","import SearchRepositoryInterface from \"./SearchRepositoryInterface\";\nimport NameRepositoryInterface from \"../NameRepository/NameRepositoryInterface\";\nimport PublicSearchCallInterface from \"../../service/Call/PublicSearchCall/PublicSearchCallInterface\";\nimport RepoCategory from \"./RepoCategory\";\nimport EsiCategory, {esiCategories} from \"../../service/Call/PublicSearchCall/EsiCategory\";\nimport EsiUniverseNamesInterface from \"../../service/Call/UniverseNamesCall/EsiUniverseNamesInterface\";\nimport ResultWithLinkInterface from \"./ResulWithLinkInterface\";\n\nclass SearchRepository implements SearchRepositoryInterface {\n  private readonly _nameRepo;\n  private readonly _publicSearchCall;\n\n  constructor(\n    nameRepo: NameRepositoryInterface,\n    publicSearchCall: PublicSearchCallInterface\n  ) {\n    this._nameRepo = nameRepo;\n    this._publicSearchCall = publicSearchCall;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async publicSearch(\n    searchString: string,\n    category: RepoCategory,\n    strict: boolean\n  ): Promise<ResultWithLinkInterface[]> {\n    let categoriesForCall: EsiCategory[];\n    if (category === \"all\") {\n      categoriesForCall = esiCategories;\n    } else {\n      categoriesForCall = [category];\n    }\n    let search = await this._publicSearchCall.get(searchString, categoriesForCall, strict);\n\n    let ids: number[] = [];\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (let [key, value] of Object.entries(search)) {\n      ids = ids.concat(value);\n    }\n    let names = await this._nameRepo.resolveGeneric(ids);\n\n    return this._composeResult(names);\n  }\n\n  private _composeResult(names: EsiUniverseNamesInterface[]): ResultWithLinkInterface[] {\n    let result: ResultWithLinkInterface[] = [];\n    names.forEach(name => {\n      let prettyCategory;\n      let link;\n      switch (name.category) {\n        case \"alliance\":\n          prettyCategory = \"Alliance\";\n          link = \"/alliance/\";\n          break;\n        case \"character\":\n          prettyCategory = \"Character\";\n          link = \"/character/\";\n          break;\n        case \"constellation\":\n          prettyCategory = \"Constellation\";\n          link = \"/constellation/\";\n          break;\n        case \"corporation\":\n          prettyCategory = \"Corporation\";\n          link = \"/corporation/\";\n          break;\n        case \"inventory_type\":\n          prettyCategory = \"Item\";\n          link = \"/type/\";\n          break;\n        case \"region\":\n          prettyCategory = \"Region\";\n          link = \"/region/\";\n          break;\n        case \"solar_system\":\n          prettyCategory = \"System\";\n          link = \"/system/\";\n          break;\n        case \"station\":\n          prettyCategory = \"Station\";\n          link = \"/station/\";\n          break;\n        case \"faction\":\n          prettyCategory = \"Faction\";\n          link = \"/faction/\";\n          break;\n        default:\n          prettyCategory = name.category;\n          link = null;\n      }\n\n      result.push({\n        ...name,\n        prettyCategory: prettyCategory,\n        link: link\n      });\n    });\n\n    return result;\n  }\n}\n\nexport default SearchRepository;\n","import CharacterInfoCallInterface from \"./CharacterInfoCallInterface\";\nimport EsiCharacterInfoInterface from \"./EsiCharacterInfoInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass CharacterInfoCall implements CharacterInfoCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(id: number): Promise<EsiCharacterInfoInterface> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v4/characters/${id}/`;\n  }\n}\n\nexport default CharacterInfoCall;\n","import ConstellationInfoCallInterface from \"./ConstellationInfoCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiConstellationInfoInterface from \"./EsiConstellationInfoInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass ConstellationInfoCall implements ConstellationInfoCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  public async get(id: number): Promise<EsiConstellationInfoInterface> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v1/universe/constellations/${id}/`;\n  }\n}\n\nexport default ConstellationInfoCall;\n","import CorporationInfoCallInterface from \"./CorporationInfoCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiCorporationInfoInterface from \"./EsiCorporationInfoInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass CorporationInfoCall implements CorporationInfoCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(id: number): Promise<EsiCorporationInfoInterface> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v5/corporations/${id}/`;\n  }\n}\n\nexport default CorporationInfoCall;\n","import TypeInfoCallInterface from \"./TypeInfoCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiTypeInfoInterface from \"./EsiTypeInfoInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass TypeInfoCall implements TypeInfoCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(id: number): Promise<EsiTypeInfoInterface> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v3/universe/types/${id}/`;\n  }\n}\n\nexport default TypeInfoCall;\n","import RegionInfoCallInterface from \"./RegionInfoCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiRegionInfoInterface from \"./EsiRegionInfoInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass RegionInfoCall implements RegionInfoCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(id: number): Promise<EsiRegionInfoInterface> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v1/universe/regions/${id}/`;\n  }\n}\n\nexport default RegionInfoCall;\n","import SystemInfoCallInterface from \"./SystemInfoCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiSystemInfoInterface from \"./EsiSystemInfoInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass SystemInfoCall implements SystemInfoCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(id: number): Promise<EsiSystemInfoInterface> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v4/universe/systems/${id}/`;\n  }\n}\n\nexport default SystemInfoCall;\n","import StationInfoCallInterface from \"./StationInfoCallInterface\";\nimport EsiStationInfoInterface from \"./EsiStationInfoInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass StationInfoCall implements StationInfoCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  public async get(id: number): Promise<EsiStationInfoInterface> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v2/universe/stations/${id}/`;\n  }\n}\n\nexport default StationInfoCall;\n","import FactionCallInterface from \"./FactionCallInterface\";\nimport EsiFactionInterface from \"./EsiFactionInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass FactionCall implements FactionCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(): Promise<EsiFactionInterface[]> {\n    let response = await this._esiClient.getResponse(this._getUrl(), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(): string {\n    return `/v2/universe/factions/`;\n  }\n}\n\nexport default FactionCall;\n","import AncestryCallInterface from \"./AncestryCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiAncestryInterface from \"./EsiAncestryInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass AncestryCall implements AncestryCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(): Promise<EsiAncestryInterface[]> {\n    let response = await this._esiClient.getResponse(this._getUrl(), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(): string {\n    return `/v1/universe/ancestries/`;\n  }\n}\n\nexport default AncestryCall;\n","import BloodlineCallInterface from \"./BloodlineCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiBloodlineInterface from \"./EsiBloodlineInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass BloodlineCall implements BloodlineCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(): Promise<EsiBloodlineInterface[]> {\n    let response = await this._esiClient.getResponse(this._getUrl(), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(): string {\n    return `/v1/universe/bloodlines/`;\n  }\n}\n\nexport default BloodlineCall;\n","import AncestryRepositoryInterface from \"./AncestryRepositoryInterface\";\nimport EsiAncestryInterface from \"../../service/Call/AncestryCall/EsiAncestryInterface\";\nimport AncestryCallInterface from \"../../service/Call/AncestryCall/AncestryCallInterface\";\n\nclass AncestryRepository implements AncestryRepositoryInterface {\n  private readonly _ancestryCall;\n\n  constructor(ancestryCall: AncestryCallInterface) {\n    this._ancestryCall = ancestryCall;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getName(id: number): Promise<string> {\n    let ancestries = await this._ancestryCall.get();\n    let foundAncestry: EsiAncestryInterface | null = null;\n    for (let ancestry of ancestries) {\n      if (ancestry.id === id) {\n        foundAncestry = ancestry;\n        break;\n      }\n    }\n\n    if (foundAncestry === null) {\n      throw new Error(\"Ancestry not found\");\n    }\n\n    return foundAncestry.name;\n  }\n}\n\nexport default AncestryRepository;\n","import EsiUniverseNamesInterface from \"../../service/Call/UniverseNamesCall/EsiUniverseNamesInterface\";\n\nabstract class AbstractRepository {\n  protected _pushUnique(inputArray: number[], value: number): number[] {\n    if (!inputArray.includes(value)) {\n      inputArray.push(value);\n    }\n\n    return inputArray;\n  }\n\n  protected _orderNamesByID(\n    names: EsiUniverseNamesInterface[]\n  ): {\n    [key: string]: EsiUniverseNamesInterface\n  } {\n    let orderedNames: {[key: string]: EsiUniverseNamesInterface} = {};\n    names.forEach(name => {\n      orderedNames[String(name.id)] = name;\n    });\n\n    return orderedNames;\n  }\n}\n\nexport default AbstractRepository;\n","import BloodlineRepositoryInterface from \"./BloodlineRepositoryInterface\";\nimport BloodlineCallInterface from \"../../service/Call/BloodlineCall/BloodlineCallInterface\";\nimport EsiBloodlineInterface from \"../../service/Call/BloodlineCall/EsiBloodlineInterface\";\nimport RepoBloodlineInterface from \"./RepoBloodlineInterface\";\nimport RaceRepositoryInterface from \"../RaceRepository/RaceRepositoryInterface\";\nimport NameRepositoryInterface from \"../NameRepository/NameRepositoryInterface\";\nimport AbstractRepository from \"../AbstractRepository/AbstractRepository\";\nimport EsiUniverseNamesInterface from \"../../service/Call/UniverseNamesCall/EsiUniverseNamesInterface\";\n\nclass BloodlineRepository extends AbstractRepository implements BloodlineRepositoryInterface {\n  private readonly _bloodlineCall;\n  private readonly _raceRepo;\n  private readonly _nameRepo;\n\n  constructor(\n    bloodlineCall: BloodlineCallInterface,\n    raceRepo: RaceRepositoryInterface,\n    nameRepo: NameRepositoryInterface\n  ) {\n    super();\n    this._bloodlineCall = bloodlineCall;\n    this._raceRepo = raceRepo;\n    this._nameRepo = nameRepo;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getAll(): Promise<RepoBloodlineInterface[]> {\n    return [];\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getOne(id: number): Promise<RepoBloodlineInterface> {\n    let foundBloodline = await this._getEsiBloodline(id);\n    let {\n      race_id,\n      corporation_id,\n      ship_type_id\n    } = foundBloodline;\n\n    let raceNamePromise = this._raceRepo.getName(race_id);\n\n    let idsToResolve = this._getIDsToResolve([foundBloodline]);\n    let indexedNames: {[key: string]: EsiUniverseNamesInterface} = {};\n    if (idsToResolve.length > 0) {\n      indexedNames = this._orderNamesByID(await this._nameRepo.resolveGeneric(idsToResolve));\n    }\n\n    let ship_type_name = undefined;\n    if (ship_type_id !== undefined && ship_type_id !== null) {\n      ship_type_name = indexedNames[ship_type_id].name ?? \"#error\";\n    }\n\n    return {\n      ...foundBloodline,\n      corporation_name: indexedNames[corporation_id].name ?? \"#error\",\n      race_name: await raceNamePromise,\n      ship_type_name: ship_type_name\n    }\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getName(id: number): Promise<string> {\n    let foundBloodline = await this._getEsiBloodline(id);\n\n    return foundBloodline.name;\n  }\n\n  private _getIDsToResolve(bloodlines: EsiBloodlineInterface[]): number[] {\n    let idsToResolve: number[] = [];\n\n    bloodlines.forEach(bloodline => {\n      let {\n        corporation_id,\n        ship_type_id\n      } = bloodline;\n      this._pushUnique(idsToResolve, corporation_id);\n      if (ship_type_id !== undefined && ship_type_id !== null) {\n        this._pushUnique(idsToResolve, ship_type_id);\n      }\n    });\n\n    return idsToResolve;\n  }\n\n  /**\n   * @throws Error\n   */\n  private async _getEsiBloodline(id: number): Promise<EsiBloodlineInterface> {\n    let bloodlines = await this._bloodlineCall.get();\n    let foundBloodline: EsiBloodlineInterface | null = null;\n    for (let bloodline of bloodlines) {\n      if (bloodline.bloodline_id === id) {\n        foundBloodline = bloodline;\n        break;\n      }\n    }\n\n    if (foundBloodline === null) {\n      throw new Error(\"Bloodline not found\");\n    }\n\n    return foundBloodline;\n  }\n}\n\nexport default BloodlineRepository;\n","import CharacterRepositoryInterface from \"./CharacterRepositoryInterface\";\nimport RepoCharacterInterface from \"./RepoCharacterInterface\";\nimport AncestryRepositoryInterface from \"../AncestryRepository/AncestryRepositoryInterface\";\nimport CharacterInfoCallInterface from \"../../service/Call/CharacterInfoCall/CharacterInfoCallInterface\";\nimport BloodlineRepositoryInterface from \"../BloodlineRepository/BloodlineRepositoryInterface\";\nimport NameRepositoryInterface from \"../NameRepository/NameRepositoryInterface\";\nimport RaceRepositoryInterface from \"../RaceRepository/RaceRepositoryInterface\";\nimport CharacterCorpHistoryCallInterface\n  from \"../../service/Call/CharacterCorpHistoryCall/CharacterCorpHistoryCallInterface\";\nimport RepoCharacterCorpHistoryInterface from \"./RepoCharacterCorpHistoryInterface\";\n\nclass CharacterRepository implements CharacterRepositoryInterface {\n  private readonly _characterInfoCall;\n  private readonly _characterCorpHistoryCall;\n  private readonly _ancestryRepo;\n  private readonly _bloodlineRepo;\n  private readonly _nameRepo;\n  private readonly _raceRepo;\n\n  constructor(\n    characterInfoCall: CharacterInfoCallInterface,\n    characterCorpHistoryCall: CharacterCorpHistoryCallInterface,\n    ancestryRepo: AncestryRepositoryInterface,\n    bloodlineRepo: BloodlineRepositoryInterface,\n    nameRepo: NameRepositoryInterface,\n    raceRepo: RaceRepositoryInterface\n  ) {\n    this._characterInfoCall = characterInfoCall;\n    this._characterCorpHistoryCall = characterCorpHistoryCall;\n    this._ancestryRepo = ancestryRepo;\n    this._bloodlineRepo = bloodlineRepo;\n    this._nameRepo = nameRepo;\n    this._raceRepo = raceRepo;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getOne(id: number): Promise<RepoCharacterInterface> {\n    let esiCharPromise = this._characterInfoCall.get(id);\n    let repoCorpHistoryPromise = this._getCorpHistory(id);\n    let esiChar = await esiCharPromise;\n    let repoChar: RepoCharacterInterface = {\n      ...esiChar,\n      alliance_name: esiChar.alliance_id === undefined ? undefined : \"#error\",\n      ancestry_name: esiChar.ancestry_id === undefined ? undefined : \"#error\",\n      bloodline_name: \"#error\",\n      corporation_name: \"#name\",\n      faction_name: esiChar.faction_id === undefined ? undefined : \"#error\",\n      race_name: \"#error\",\n      id: id,\n      corporation_history: []\n    }\n\n    let {\n      alliance_id,\n      ancestry_id,\n      bloodline_id,\n      corporation_id,\n      faction_id,\n      race_id\n    } = esiChar;\n    let idsToResolve: number[] = [];\n    idsToResolve.push(corporation_id);\n    if (alliance_id !== undefined) {\n      idsToResolve.push(alliance_id);\n    }\n    if (faction_id !== undefined) {\n      idsToResolve.push(faction_id);\n    }\n\n    let ancestryPromise = null; // Because ancestry is optional\n    if (ancestry_id !== undefined) {\n      ancestryPromise = this._ancestryRepo.getName(ancestry_id);\n    }\n    let bloodlinePromise = this._bloodlineRepo.getName(bloodline_id);\n    let namesPromise = this._nameRepo.resolveGeneric(idsToResolve);\n    let racePromise = this._raceRepo.getName(race_id);\n\n    if (ancestryPromise !== null) {\n      try {\n        repoChar.ancestry_name = await ancestryPromise;\n      } catch (e) {\n        // Intentionally left blank, it's a call of secondary importance\n      }\n    }\n    try {\n      repoChar.bloodline_name = await bloodlinePromise;\n    } catch (e) {\n      // Intentionally left blank, it's a call of secondary importance\n    }\n    try {\n      repoChar.race_name = await racePromise;\n    } catch (e) {\n      // Intentionally left blank, it's a call of secondary importance\n    }\n    try {\n      let charNames = await namesPromise;\n      charNames.forEach(resolvedName => {\n        let { id, name } = resolvedName;\n        if (id === corporation_id) {\n          repoChar.corporation_name = name;\n        }\n        if (id === alliance_id) {\n          repoChar.alliance_name = name;\n        }\n        if (id === faction_id) {\n          repoChar.faction_name = name;\n        }\n      });\n    } catch (e) {\n      // Intentionally left blank, it's a call of secondary importance\n    }\n\n    repoChar.corporation_history = await repoCorpHistoryPromise;\n\n    return repoChar;\n  }\n\n  private async _getCorpHistory(id: number): Promise<RepoCharacterCorpHistoryInterface[]> {\n    let corpHistory = await this._characterCorpHistoryCall.get(id);\n    let idsToResolve: number[] = [];\n    corpHistory.forEach(corp => {\n      if (corp.is_deleted === undefined || !corp.is_deleted) {\n        idsToResolve = this._pushUnique(idsToResolve, corp.corporation_id);\n      }\n    });\n\n    let names = await this._nameRepo.resolveGeneric(idsToResolve);\n    let repoCorpHistory: RepoCharacterCorpHistoryInterface[] = [];\n    corpHistory.forEach(corp => {\n      let { corporation_id } = corp;\n      let foundName = `#${corporation_id}`;\n      for (let name of names) {\n        if (name.id === corporation_id) {\n          foundName = name.name;\n          break;\n        }\n      }\n\n      repoCorpHistory.push({\n        ...corp,\n        corporation_name: foundName\n      });\n    });\n\n    return repoCorpHistory;\n  }\n\n  private _pushUnique(inputArray: number[], value: number): number[] {\n    if (!inputArray.includes(value)) {\n      inputArray.push(value);\n    }\n\n    return inputArray;\n  }\n}\n\nexport default CharacterRepository;\n","import RaceCallInterface from \"./RaceCallInterface\";\nimport EsiRaceInterface from \"./EsiRaceInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass RaceCall implements RaceCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(): Promise<EsiRaceInterface[]> {\n    let response = await this._esiClient.getResponse(this._getUrl(), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(): string {\n    return `/v1/universe/races/`;\n  }\n}\n\nexport default RaceCall;\n","import RaceRepositoryInterface from \"./RaceRepositoryInterface\";\nimport RaceCallInterface from \"../../service/Call/RaceCall/RaceCallInterface\";\nimport EsiRaceInterface from \"../../service/Call/RaceCall/EsiRaceInterface\";\nimport RepoRaceInterface from \"./RepoRaceInterface\";\nimport NameRepositoryInterface from \"../NameRepository/NameRepositoryInterface\";\nimport AbstractRepository from \"../AbstractRepository/AbstractRepository\";\nimport FactionRepositoryInterface from \"../FactionRepository/FactionRepositoryInterface\";\n\nclass RaceRepository extends AbstractRepository implements RaceRepositoryInterface {\n  private readonly _raceCall;\n  private readonly _nameRepo;\n  private readonly _factionRepo;\n\n  constructor(\n    raceCall: RaceCallInterface,\n    nameRepo: NameRepositoryInterface,\n    factionRepo: FactionRepositoryInterface\n  ) {\n    super();\n    this._raceCall = raceCall;\n    this._nameRepo = nameRepo;\n    this._factionRepo = factionRepo;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getAll(): Promise<RepoRaceInterface[]> {\n    let esiRaces = await this._raceCall.get();\n    let idsToResolve: number[] = [];\n    let repoRaces: RepoRaceInterface[] = [];\n    esiRaces.forEach(esiRace => {\n      this._pushUnique(idsToResolve, esiRace.alliance_id);\n      repoRaces.push({\n        ...esiRace,\n        alliance_name: \"#error\",\n      });\n    });\n\n    let names = this._orderNamesByID(await this._nameRepo.resolveGeneric(idsToResolve));\n    repoRaces.forEach(repoRace => {\n      if (names[String(repoRace.alliance_id)] !== undefined) {\n        repoRace.alliance_name = names[String(repoRace.alliance_id)].name;\n      }\n    });\n\n    return repoRaces;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getOne(id: number): Promise<RepoRaceInterface> {\n    let foundRace = await this._getEsiRace(id);\n\n    return {\n      ...foundRace,\n      alliance_name: await this._factionRepo.getName(foundRace.alliance_id)\n    };\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getName(id: number): Promise<string> {\n    let foundRace = await this._getEsiRace(id);\n\n    return foundRace.name;\n  }\n\n  /**\n   * @throws Error\n   */\n  private async _getEsiRace(id: number): Promise<EsiRaceInterface> {\n    let races = await this._raceCall.get();\n    let foundRace: EsiRaceInterface | null = null;\n    for (let race of races) {\n      if (race.race_id === id) {\n        foundRace = race;\n        break;\n      }\n    }\n\n    if (foundRace === null) {\n      throw new Error(\"Race not found\");\n    }\n\n    return foundRace;\n  }\n}\n\nexport default RaceRepository;\n","import CharacterCorpHistoryCallInterface from \"./CharacterCorpHistoryCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiCharacterCorpHistoryInterface from \"./EsiCharacterCorpHistoryInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass CharacterCorpHistoryCall implements CharacterCorpHistoryCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  public async get(id: number): Promise<EsiCharacterCorpHistoryInterface[]> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v1/characters/${id}/corporationhistory/`;\n  }\n}\n\nexport default CharacterCorpHistoryCall;\n","import DateFormatterInterface from \"./DateFormatterInterface\";\n\nclass DateFormatter implements DateFormatterInterface {\n  public withDateTime(date: Date): string {\n    let yyyy = `${date.getUTCFullYear()}`;\n    let mm = this.toStringWithLeadingZero(date.getUTCMonth() + 1);\n    let dd = this.toStringWithLeadingZero(date.getUTCDate());\n    let hr = this.toStringWithLeadingZero(date.getUTCHours());\n    let min = this.toStringWithLeadingZero(date.getUTCMinutes());\n    let sec = this.toStringWithLeadingZero(date.getUTCSeconds());\n\n    return `${yyyy}.${mm}.${dd} ${hr}:${min}:${sec}`;\n  }\n\n  private toStringWithLeadingZero(value: number): string {\n    if (value < 10) {\n      return `0${value}`;\n    }\n\n    return `${value}`;\n  }\n}\n\nexport default DateFormatter;\n","import CorporationAllianceHistoryCallInterface from \"./CorporationAllianceHistoryCallInterface\";\nimport EsiCorporationAllianceHistoryInterface from \"./EsiCorporationAllianceHistoryInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass CorporationAllianceHistoryCall implements CorporationAllianceHistoryCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  public async get(id: number): Promise<EsiCorporationAllianceHistoryInterface[]> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v3/corporations/${id}/alliancehistory/`;\n  }\n}\n\nexport default CorporationAllianceHistoryCall;\n","import CorporationRepositoryInterface from \"./CorporationRepositoryInterface\";\nimport RepoCorporationInterface from \"./RepoCorporationInterface\";\nimport CorporationInfoCallInterface from \"../../service/Call/CorporationInfoCall/CorporationInfoCallInterface\";\nimport NameRepositoryInterface from \"../NameRepository/NameRepositoryInterface\";\nimport CorporationAllianceHistoryCallInterface\n  from \"../../service/Call/CorporationAllianceHistoryCall/CorporationAllianceHistoryCallInterface\";\nimport RepoCorpAllianceHistoryInterface from \"./RepoCorpAllianceHistoryInterface\";\n\nclass CorporationRepository implements CorporationRepositoryInterface {\n  private readonly _corpInfoCall;\n  private readonly _corpAllianceHistoryCall;\n  private readonly _nameRepo;\n\n  constructor(\n    corpInfoCall: CorporationInfoCallInterface,\n    corpAllianceHistoryCall: CorporationAllianceHistoryCallInterface,\n    nameRepo: NameRepositoryInterface\n  ) {\n    this._corpInfoCall = corpInfoCall;\n    this._corpAllianceHistoryCall = corpAllianceHistoryCall;\n    this._nameRepo = nameRepo;\n  }\n\n  public async getOne(id: number): Promise<RepoCorporationInterface> {\n    let allianceHistoryPromise = this.getAllianceHistory(id);\n\n    let esiCorp = await this._corpInfoCall.get(id);\n    let repoCorp: RepoCorporationInterface = {\n      ...esiCorp,\n      alliance_name: undefined,\n      ceo_name: \"#error\",\n      creator_name: \"#error\",\n      faction_name: undefined,\n      home_station_name: undefined,\n      alliance_history: [],\n      id: id,\n    };\n\n    let {\n      alliance_id,\n      ceo_id,\n      creator_id,\n      faction_id,\n      home_station_id\n    } = esiCorp;\n    let idsToResolve: number[] = [];\n    this._pushUnique(idsToResolve, ceo_id);\n    this._pushUnique(idsToResolve, creator_id);\n    if (alliance_id !== undefined) {\n      this._pushUnique(idsToResolve, alliance_id);\n    }\n    if (faction_id !== undefined) {\n      this._pushUnique(idsToResolve, faction_id);\n    }\n    if (home_station_id !== undefined) {\n      this._pushUnique(idsToResolve, home_station_id);\n    }\n\n    let corpNames = await this._nameRepo.resolveGeneric(idsToResolve);\n    corpNames.forEach(resolvedName => {\n      let { id, name } = resolvedName;\n\n      if (id === alliance_id) {\n        repoCorp.alliance_name = name;\n      }\n      if (id === ceo_id) {\n        repoCorp.ceo_name = name;\n      }\n      if (id === creator_id) {\n        repoCorp.creator_name = name;\n      }\n      if (id === faction_id) {\n        repoCorp.faction_name = name;\n      }\n      if (id === home_station_id) {\n        repoCorp.home_station_name = name;\n      }\n    });\n\n    repoCorp.alliance_history = await allianceHistoryPromise;\n\n    return repoCorp;\n  }\n\n  public async getAllianceHistory(id: number): Promise<RepoCorpAllianceHistoryInterface[]> {\n    let corpHistory = await this._corpAllianceHistoryCall.get(id);\n\n    let idsToResolve: number[] = [];\n    let recordIDs: number[] = [];\n    let indexedCorpHistory: { [key: string]: RepoCorpAllianceHistoryInterface } = {};\n    corpHistory.forEach(record => {\n      let allianceNamePlaceholder = undefined;\n      if (record.alliance_id !== undefined) {\n        idsToResolve = this._pushUnique(idsToResolve, record.alliance_id);\n        allianceNamePlaceholder = \"#error\";\n      }\n      recordIDs.push(record.record_id);\n      indexedCorpHistory[record.record_id] = {\n        ...record,\n        end_date: undefined,\n        alliance_name: allianceNamePlaceholder,\n      };\n    });\n    let names = await this._nameRepo.resolveGeneric(idsToResolve);\n\n    let historyToReturn: RepoCorpAllianceHistoryInterface[] = [];\n    recordIDs.sort((a, b) => a - b);\n    for (let i = 0; i < recordIDs.length; i++) {\n      let id = recordIDs[i];\n\n      // Add alliance name, if the record has the id\n      if (indexedCorpHistory[id].alliance_id !== undefined) {\n        for (let name of names) {\n          if (name.id === indexedCorpHistory[id].alliance_id) {\n            indexedCorpHistory[id].alliance_name = name.name;\n            break;\n          }\n        }\n      }\n\n      // Add end date, if the current record is an alliance, and the following is not\n      if (\n        indexedCorpHistory[id].alliance_id !== undefined\n        && i < recordIDs.length - 1\n        && indexedCorpHistory[recordIDs[i + 1]].alliance_id === undefined\n      ) {\n        indexedCorpHistory[id].end_date = indexedCorpHistory[recordIDs[i + 1]].start_date;\n      }\n\n      // Add to the elements to return if it's an alliance\n      if (indexedCorpHistory[id].alliance_id !== undefined) {\n        historyToReturn.unshift(indexedCorpHistory[id]);\n      }\n    }\n\n    return historyToReturn;\n  }\n\n  private _pushUnique(inputArray: number[], value: number): number[] {\n    if (!inputArray.includes(value)) {\n      inputArray.push(value);\n    }\n\n    return inputArray;\n  }\n}\n\nexport default CorporationRepository;\n","import FactionRepositoryInterface from \"./FactionRepositoryInterface\";\nimport RepoFactionInterface from \"./RepoFactionInterface\";\nimport AbstractRepository from \"../AbstractRepository/AbstractRepository\";\nimport FactionCallInterface from \"../../service/Call/FactionCall/FactionCallInterface\";\nimport NameRepositoryInterface from \"../NameRepository/NameRepositoryInterface\";\nimport EsiUniverseNamesInterface from \"../../service/Call/UniverseNamesCall/EsiUniverseNamesInterface\";\nimport EsiFactionInterface from \"../../service/Call/FactionCall/EsiFactionInterface\";\n\nclass FactionRepository extends AbstractRepository implements FactionRepositoryInterface {\n  private readonly _factionCall;\n  private readonly _nameRepo;\n\n  constructor(\n    factionCall: FactionCallInterface,\n    nameRepo: NameRepositoryInterface\n  ) {\n    super();\n    this._factionCall = factionCall;\n    this._nameRepo = nameRepo;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getAll(): Promise<RepoFactionInterface[]> {\n    let esiFactions = await this._factionCall.get();\n    let idsToResolve: number[] = this._getIDsToResolve(esiFactions);\n    let indexedNames: {[key: string]: EsiUniverseNamesInterface} = {}\n    if (idsToResolve.length > 0) {\n      indexedNames = this._orderNamesByID(await this._nameRepo.resolveGeneric(idsToResolve));\n    }\n\n    let repoFactions: RepoFactionInterface[] = [];\n    esiFactions.forEach(esiFaction => {\n      repoFactions.push(this._assembleRepoFaction(esiFaction, indexedNames));\n    });\n\n    return repoFactions;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getOne(id: number): Promise<RepoFactionInterface> {\n    let foundFaction = await this._getEsiFaction(id);\n\n    let idsToResolve = this._getIDsToResolve([foundFaction]);\n    let indexedNames: {[key: string]: EsiUniverseNamesInterface} = {}\n    if (idsToResolve.length > 0) {\n      indexedNames = this._orderNamesByID(await this._nameRepo.resolveGeneric(idsToResolve));\n    }\n\n    return this._assembleRepoFaction(foundFaction, indexedNames);\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getName(id: number): Promise<string> {\n    let foundFaction = await this._getEsiFaction(id);\n\n    return foundFaction.name;\n  }\n\n  /**\n   * @throws Error\n   */\n  private async _getEsiFaction(id: number): Promise<EsiFactionInterface> {\n    let esiFactions = await this._factionCall.get();\n    let foundFaction: EsiFactionInterface | null = null;\n    for (let esiFaction of esiFactions) {\n      if (esiFaction.faction_id === id) {\n        foundFaction = esiFaction;\n        break;\n      }\n    }\n    if (foundFaction === null) {\n      throw new Error(\"Faction not found\");\n    }\n\n    return foundFaction;\n  }\n\n  private _getIDsToResolve(factions: EsiFactionInterface[]): number[] {\n    let idsToResolve: number[] = [];\n\n    factions.forEach(faction => {\n      let {\n        corporation_id,\n        militia_corporation_id,\n        solar_system_id\n      } = faction;\n      if (corporation_id !== undefined) {\n        this._pushUnique(idsToResolve, corporation_id);\n      }\n      if (militia_corporation_id !== undefined) {\n        this._pushUnique(idsToResolve, militia_corporation_id);\n      }\n      if (solar_system_id !== undefined) {\n        this._pushUnique(idsToResolve, solar_system_id);\n      }\n    });\n\n    return idsToResolve;\n  }\n\n  private _assembleRepoFaction(\n    esiFaction: EsiFactionInterface,\n    indexedNames: {[key: string]: EsiUniverseNamesInterface}\n  ): RepoFactionInterface {\n    let {\n      corporation_id,\n      militia_corporation_id,\n      solar_system_id\n    } = esiFaction;\n\n    let corporation_name = undefined;\n    let militia_corporation_name = undefined;\n    let solar_system_name = undefined;\n\n    if (corporation_id !== undefined) {\n      corporation_name = indexedNames[corporation_id].name ?? \"#error\";\n    }\n    if (militia_corporation_id !== undefined) {\n      militia_corporation_name = indexedNames[militia_corporation_id].name ?? \"#error\";\n    }\n    if (solar_system_id !== undefined) {\n      solar_system_name = indexedNames[solar_system_id].name ?? \"#error\";\n    }\n\n    return {\n      ...esiFaction,\n      corporation_name: corporation_name,\n      militia_corporation_name: militia_corporation_name,\n      solar_system_name: solar_system_name\n    };\n  }\n}\n\nexport default FactionRepository;\n","import EsiClient from \"../EsiClient/EsiClient\";\nimport EsiErrorManagerInterface from \"../EsiErrorManager/EsiErrorManagerInterface\";\nimport EsiErrorManager from \"../EsiErrorManager/EsiErrorManager\";\nimport QueryFactoryInterface from \"../QueryFactory/QueryFactoryInterface\";\nimport QueryFactory from \"../QueryFactory/QueryFactory\";\nimport StatusCall from \"../Call/StatusCall/StatusCall\";\nimport StatusCallInterface from \"../Call/StatusCall/StatusCallInterface\";\nimport UniverseNamesCallInterface from \"../Call/UniverseNamesCall/UniverseNamesCallInterface\";\nimport UniverseNamesCall from \"../Call/UniverseNamesCall/UniverseNamesCall\";\nimport AllianceListCallInterface from \"../Call/AllianceListCall/AllianceListCallInterface\";\nimport AllianceListCall from \"../Call/AllianceListCall/AllianceListCall\";\nimport AllianceInfoCallInterface from \"../Call/AllianceInfoCall/AllianceInfoCallInterface\";\nimport AllianceInfoCall from \"../Call/AllianceInfoCall/AllianceInfoCall\";\nimport NameRepositoryInterface from \"../../repository/NameRepository/NameRepositoryInterface\";\nimport NameRepository from \"../../repository/NameRepository/NameRepository\";\nimport AllianceCorporationsCallInterface from \"../Call/AllianceCorporationsCall/AllianceCorporationsCallInterface\";\nimport AllianceCorporationsCall from \"../Call/AllianceCorporationsCall/AllianceCorporationsCall\";\nimport PublicSearchCallInterface from \"../Call/PublicSearchCall/PublicSearchCallInterface\";\nimport PublicSearchCall from \"../Call/PublicSearchCall/PublicSearchCall\";\nimport AllianceRepositoryInterface from \"../../repository/AllianceRepository/AllianceRepositoryInterface\";\nimport AllianceRepository from \"../../repository/AllianceRepository/AllianceRepository\";\nimport SearchRepositoryInterface from \"../../repository/SearchRepository/SearchRepositoryInterface\";\nimport SearchRepository from \"../../repository/SearchRepository/SearchRepository\";\nimport CharacterInfoCallInterface from \"../Call/CharacterInfoCall/CharacterInfoCallInterface\";\nimport CharacterInfoCall from \"../Call/CharacterInfoCall/CharacterInfoCall\";\nimport ConstellationInfoCallInterface from \"../Call/ConstellationInfoCall/ConstellationInfoCallInterface\";\nimport ConstellationInfoCall from \"../Call/ConstellationInfoCall/ConstellationInfoCall\";\nimport CorporationInfoCall from \"../Call/CorporationInfoCall/CorporationInfoCall\";\nimport TypeInfoCallInterface from \"../Call/TypeInfoCall/TypeInfoCallInterface\";\nimport TypeInfoCall from \"../Call/TypeInfoCall/TypeInfoCall\";\nimport RegionInfoCallInterface from \"../Call/RegionInfoCall/RegionInfoCallInterface\";\nimport RegionInfoCall from \"../Call/RegionInfoCall/RegionInfoCall\";\nimport SystemInfoCallInterface from \"../Call/SystemInfoCall/SystemInfoCallInterface\";\nimport SystemInfoCall from \"../Call/SystemInfoCall/SystemInfoCall\";\nimport StationInfoCall from \"../Call/StationInfoCall/StationInfoCall\";\nimport StationInfoCallInterface from \"../Call/StationInfoCall/StationInfoCallInterface\";\nimport FactionCallInterface from \"../Call/FactionCall/FactionCallInterface\";\nimport CorporationInfoCallInterface from \"../Call/CorporationInfoCall/CorporationInfoCallInterface\";\nimport FactionCall from \"../Call/FactionCall/FactionCall\";\nimport AncestryCallInterface from \"../Call/AncestryCall/AncestryCallInterface\";\nimport AncestryCall from \"../Call/AncestryCall/AncestryCall\";\nimport BloodlineCallInterface from \"../Call/BloodlineCall/BloodlineCallInterface\";\nimport BloodlineCall from \"../Call/BloodlineCall/BloodlineCall\";\nimport AncestryRepositoryInterface from \"../../repository/AncestryRepository/AncestryRepositoryInterface\";\nimport AncestryRepository from \"../../repository/AncestryRepository/AncestryRepository\";\nimport BloodlineRepositoryInterface from \"../../repository/BloodlineRepository/BloodlineRepositoryInterface\";\nimport BloodlineRepository from \"../../repository/BloodlineRepository/BloodlineRepository\";\nimport CharacterRepository from \"../../repository/CharacterRepository/CharacterRepository\";\nimport CharacterRepositoryInterface from \"../../repository/CharacterRepository/CharacterRepositoryInterface\";\nimport RaceCallInterface from \"../Call/RaceCall/RaceCallInterface\";\nimport RaceCall from \"../Call/RaceCall/RaceCall\";\nimport RaceRepositoryInterface from \"../../repository/RaceRepository/RaceRepositoryInterface\";\nimport RaceRepository from \"../../repository/RaceRepository/RaceRepository\";\nimport CharacterCorpHistoryCallInterface from \"../Call/CharacterCorpHistoryCall/CharacterCorpHistoryCallInterface\";\nimport CharacterCorpHistoryCall from \"../Call/CharacterCorpHistoryCall/CharacterCorpHistoryCall\";\nimport DateFormatterInterface from \"../DateFormatter/DateFormatterInterface\";\nimport DateFormatter from \"../DateFormatter/DateFormatter\";\nimport CorporationAllianceHistoryCallInterface\n  from \"../Call/CorporationAllianceHistoryCall/CorporationAllianceHistoryCallInterface\";\nimport CorporationAllianceHistoryCall from \"../Call/CorporationAllianceHistoryCall/CorporationAllianceHistoryCall\";\nimport CorporationRepositoryInterface from \"../../repository/CorporationRepository/CorporationRepositoryInterface\";\nimport CorporationRepository from \"../../repository/CorporationRepository/CorporationRepository\";\nimport FactionRepositoryInterface from \"../../repository/FactionRepository/FactionRepositoryInterface\";\nimport FactionRepository from \"../../repository/FactionRepository/FactionRepository\";\n\nclass Container {\n  private _esi: EsiClient | null = null;\n  private _esiErrorManager: EsiErrorManagerInterface | null = null;\n\n  get dateFormatter(): DateFormatterInterface {\n    return new DateFormatter();\n  }\n\n  get esi(): EsiClient {\n    if (this._esi === null) {\n      this._esi = new EsiClient(\n        (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n          return fetch(input, init);\n        },\n        this.esiErrorManager\n      );\n    }\n\n    return this._esi;\n  }\n\n  get esiErrorManager(): EsiErrorManagerInterface {\n    if (this._esiErrorManager === null) {\n      this._esiErrorManager = new EsiErrorManager();\n    }\n\n    return this._esiErrorManager;\n  }\n\n  get queryFactory(): QueryFactoryInterface {\n    return new QueryFactory();\n  }\n\n  // CALL //-------------------------------------------------------------------\n\n  get allianceCorporationsCall(): AllianceCorporationsCallInterface {\n    return new AllianceCorporationsCall(this.esi);\n  }\n\n  get allianceInfoCall(): AllianceInfoCallInterface {\n    return new AllianceInfoCall(this.esi);\n  }\n\n  get allianceListCall(): AllianceListCallInterface {\n    return new AllianceListCall(this.esi);\n  }\n\n  get ancestryCall(): AncestryCallInterface {\n    return new AncestryCall(this.esi);\n  }\n\n  get bloodlineCall(): BloodlineCallInterface {\n    return new BloodlineCall(this.esi);\n  }\n\n  get characterCorpHistoryCall(): CharacterCorpHistoryCallInterface {\n    return new CharacterCorpHistoryCall(this.esi);\n  }\n\n  get characterInfoCall(): CharacterInfoCallInterface {\n    return new CharacterInfoCall(this.esi);\n  }\n\n  get constellationInfoCall(): ConstellationInfoCallInterface {\n    return new ConstellationInfoCall(this.esi);\n  }\n\n  get corporationAllianceHistoryCall(): CorporationAllianceHistoryCallInterface {\n    return new CorporationAllianceHistoryCall(this.esi);\n  }\n\n  get corporationInfoCall(): CorporationInfoCallInterface {\n    return new CorporationInfoCall(this.esi);\n  }\n\n  get factionCall(): FactionCallInterface {\n    return new FactionCall(this.esi);\n  }\n\n  get publicSearchCall(): PublicSearchCallInterface {\n    return new PublicSearchCall(this.esi, this.queryFactory);\n  }\n\n  get raceCall(): RaceCallInterface {\n    return new RaceCall(this.esi);\n  }\n\n  get regionInfoCall(): RegionInfoCallInterface {\n    return new RegionInfoCall(this.esi);\n  }\n\n  get statusCall(): StatusCallInterface {\n    return new StatusCall(this.esi);\n  }\n\n  get stationInfoCall(): StationInfoCallInterface {\n    return new StationInfoCall(this.esi);\n  }\n\n  get systemInfoCall(): SystemInfoCallInterface {\n    return new SystemInfoCall(this.esi);\n  }\n\n  get typeInfoCall(): TypeInfoCallInterface {\n    return new TypeInfoCall(this.esi);\n  }\n\n  get universeNamesCall(): UniverseNamesCallInterface {\n    return new UniverseNamesCall(this.esi);\n  }\n\n  // CALL - END // ------------------------------------------------------------\n\n  // REPOSITORY //-------------------------------------------------------------\n\n  get allianceRepository(): AllianceRepositoryInterface {\n    return new AllianceRepository(\n      this.allianceListCall,\n      this.allianceInfoCall,\n      this.allianceCorporationsCall,\n      this.nameRepository\n    );\n  }\n\n  get ancestryRepository(): AncestryRepositoryInterface {\n    return new AncestryRepository(this.ancestryCall);\n  }\n\n  get bloodlineRepository(): BloodlineRepositoryInterface {\n    return new BloodlineRepository(\n      this.bloodlineCall,\n      this.raceRepository,\n      this.nameRepository\n    );\n  }\n\n  get characterRepository(): CharacterRepositoryInterface {\n    return new CharacterRepository(\n      this.characterInfoCall,\n      this.characterCorpHistoryCall,\n      this.ancestryRepository,\n      this.bloodlineRepository,\n      this.nameRepository,\n      this.raceRepository\n    );\n  }\n\n  get corporationRepository(): CorporationRepositoryInterface {\n    return new CorporationRepository(\n      this.corporationInfoCall,\n      this.corporationAllianceHistoryCall,\n      this.nameRepository\n    );\n  }\n\n  get factionRepository(): FactionRepositoryInterface {\n    return new FactionRepository(\n      this.factionCall,\n      this.nameRepository\n    );\n  }\n\n  get nameRepository(): NameRepositoryInterface {\n    return new NameRepository(this.universeNamesCall);\n  }\n\n  get raceRepository(): RaceRepositoryInterface {\n    return new RaceRepository(\n      this.raceCall,\n      this.nameRepository,\n      this.factionRepository\n    );\n  }\n\n  get searchRepository(): SearchRepositoryInterface {\n    return new SearchRepository(this.nameRepository, this.publicSearchCall);\n  }\n}\n\nexport default Container;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MyApp from \"./component/MyApp/MyApp\";\nimport store from \"./store\";\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from \"react-router-dom\";\nimport '@fontsource/roboto';\n\nimport { DepsProvider } from \"./context/DepsContext/DepsContext\";\nimport Container from \"./service/Container/Container\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <DepsProvider container={new Container()}>\n        <HashRouter>\n          <MyApp />\n        </HashRouter>\n      </DepsProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}