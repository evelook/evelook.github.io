{"version":3,"sources":["component/AppBar/AppBar.tsx","component/Home/Home.tsx","repository/SearchRepository/RepoCategory.ts","context/DepsContext/DepsContext.tsx","component/LoadingFullPage/LoadingFullPage.tsx","component/Search/SearchForm/SearchForm.tsx","component/Search/ResultTable/ResultTable.tsx","component/Search/ResultContainer/ResultContainer.tsx","component/ApiErrorFullPage/ApiErrorFullPage.tsx","component/Search/SearchResult/SearchResult.tsx","component/Search/SearchEmpty/SearchEmpty.tsx","component/Search/Search.tsx","component/AllianceInfo/CorpListTable/CorpListTable.tsx","component/AllianceInfo/AllianceInfoContent/AllianceInfoContent.tsx","component/AllianceInfo/AllianceInfo.tsx","component/CharacterInfo/CorpHistoryTable/CorpHistoryTable.tsx","component/EntityDescription/EntityDescription.tsx","component/CharacterInfo/CharacterInfoContent/CharacterInfoContent.tsx","component/CharacterInfo/CharacterInfo.tsx","component/ConstellationInfo/ConstellationInfo.tsx","component/CorporationInfo/AllianceHistoryTable/AllianceHistoryTable.tsx","component/CorporationInfo/CorporationInfoContent/CorporationInfoContent.tsx","component/CorporationInfo/CorporationInfo.tsx","component/TypeInfo/TypeInfo.tsx","component/RegionInfo/RegionInfo.tsx","component/SystemInfo/SystemInfo.tsx","component/StationInfo/StationInfo.tsx","component/FactionInfo/FactionInfo.tsx","component/RaceInfo/RaceInfo.tsx","component/AncestryInfo/AncestryInfo.tsx","component/BloodlineInfo/BloodlineInfo.tsx","component/Dashboard/Dashboard.tsx","component/MyApp/MyApp.tsx","feature/drawer/drawerSlice.ts","feature/theme/themeSlice.ts","reducer.ts","store.ts","serviceWorker.ts","service/EsiClient/EsiClient.ts","service/EsiErrorManager/EsiErrorManager.ts","service/QueryFactory/Query.ts","service/QueryFactory/QueryFactory.ts","error/EsiError/EsiError.ts","service/Call/StatusCall/StatusCall.ts","service/Call/UniverseNamesCall/UniverseNamesCall.ts","service/Call/AllianceListCall/AllianceListCall.ts","service/Call/AllianceInfoCall/AllianceInfoCall.ts","repository/NameRepository/NameRepository.ts","service/Call/AllianceCorporationsCall/AllianceCorporationsCall.ts","service/Call/PublicSearchCall/PublicSearchCall.ts","repository/AllianceRepository/AllianceRepository.ts","service/Call/PublicSearchCall/EsiCategory.ts","repository/SearchRepository/SearchRepository.ts","service/Call/CharacterInfoCall/CharacterInfoCall.ts","service/Call/ConstellationInfoCall/ConstellationInfoCall.ts","service/Call/CorporationInfoCall/CorporationInfoCall.ts","service/Call/TypeInfoCall/TypeInfoCall.ts","service/Call/RegionInfoCall/RegionInfoCall.ts","service/Call/SystemInfoCall/SystemInfoCall.ts","service/Call/StationInfoCall/StationInfoCall.ts","service/Call/FactionCall/FactionCall.ts","service/Call/AncestryCall/AncestryCall.ts","service/Call/BloodlineCall/BloodlineCall.ts","repository/AncestryRepository/AncestryRepository.ts","repository/AbstractRepository/AbstractRepository.ts","repository/BloodlineRepository/BloodlineRepository.ts","repository/CharacterRepository/CharacterRepository.ts","service/Call/RaceCall/RaceCall.ts","repository/RaceRepository/RaceRepository.ts","service/Call/CharacterCorpHistoryCall/CharacterCorpHistoryCall.ts","service/DateFormatter/DateFormatter.ts","service/Call/CorporationAllianceHistoryCall/CorporationAllianceHistoryCall.ts","repository/CorporationRepository/CorporationRepository.ts","repository/FactionRepository/FactionRepository.ts","service/Container/Container.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","display","appBar","breakpoints","up","width","marginLeft","menuButton","marginRight","spacing","AppBar","title","children","Fragment","useTheme","classes","dispatch","useDispatch","toolbarVariant","useMediaQuery","position","className","Toolbar","variant","IconButton","color","aria-label","edge","onClick","type","Typography","noWrap","content","flexGrow","padding","toolbar","minHeight","Home","props","repoCategories","DepsContext","createContext","useDeps","useContext","DepsProvider","container","Provider","value","circularProgress","alignItems","justifyContent","marginTop","LoadingFullPage","CircularProgress","form","marginBottom","down","paddingLeft","paddingRight","filledGrid","emptyGrid","selectGridItem","order","textGridItem","emptyGridItem","checkGridItem","SearchForm","category","needle","strict","history","useHistory","useState","categoryValue","setCategoryValue","strictValue","setStrictValue","searchTextErrorText","setSearchTextErrorText","searchTextIsError","setSearchTextIsError","searchTextRef","useRef","submit","searchTextElement","current","length","text","replace","String","autoComplete","Grid","item","xs","sm","FormControl","fullWidth","InputLabel","id","Select","labelId","onChange","e","target","label","MenuItem","TextField","autoFocus","error","helperText","onKeyPress","key","InputProps","endAdornment","InputAdornment","inputRef","defaultValue","FormControlLabel","control","Checkbox","checked","name","arrowRightIconStyle","verticalAlign","emptyIconCell","ResultTable","data","denseTable","tableOptions","download","elevation","filterType","print","responsive","rowsPerPage","rowsPerPageOptions","search","selectableRows","setTableProps","size","viewColumns","columns","options","filter","sort","customHeadLabelRender","customBodyRender","tableMeta","updateValue","link","rowData","component","Link","to","setCellProps","style","ResultContainer","resultData","maxWidth","Alert","severity","ApiErrorFullPage","retry","action","Button","AlertTitle","height","SearchResult","resultComponent","setResultComponent","setRetry","searchRepository","useEffect","publicSearch","then","catch","message","SearchEmpty","Search","query","URLSearchParams","useLocation","queryCategory","get","includes","queryStrict","queryNeedle","fixedHeader","rowHover","CorpListTable","corpList","customHeadRender","paddingTop","paddingBottom","corpID","push","Number","buttonCell","gridContainer","gridWithTable","logo","textAlign","nameCell","backgroundColor","palette","secondary","main","contrastText","AllianceInfoContent","isSmall","alt","src","TableContainer","Paper","Table","TableBody","TableRow","TableCell","colSpan","align","ticker","creator_name","creator_id","creator_corporation_name","creator_corporation_id","date_founded","undefined","executor_corporation_name","executor_corporation_id","faction_name","faction_id","corporations","AllianceInfo","apiResult","setApiResult","allianceRepository","useParams","getOne","styles","corpImg","extractCorpID","CorpHistoryTable","dateFormatter","withDateTime","Date","EntityDescription","paragraphs","bio","split","map","paragraph","entityLogoCell","entityLogoGrid","entityLogoImg","bioCell","successColorText","success","errorColorText","CharacterInfoContent","md","corporation_id","corporation_name","alliance_name","alliance_id","birthday","security_status","race_name","ancestry_id","ancestry_name","bloodline_name","gender","toUpperCase","substr","description","corporation_history","CharacterInfo","characterRepository","ConstellationInfo","allianceImg","extractAllianceID","AllianceHistoryTable","alliances","isDeleted","start","end","direction","whiteSpace","noWrapCell","CorporationInfoContent","ceo_id","ceo_name","member_count","home_station_id","home_station_name","tax_rate","shares","war_eligible","url","href","alliance_history","CorporationInfo","corporationRepository","TypeInfo","RegionInfo","SystemInfo","StationInfo","FactionInfo","RaceInfo","AncestryInfo","BloodlineInfo","drawer","flexShrink","drawerPaper","logoText","fontFamily","join","fontWeight","textDecoration","darkModeToggle","nested","ResponsiveDrawer","window","mobileOpen","useSelector","state","darkMode","handleCloseDrawer","Divider","FormGroup","row","List","ListItem","button","ListItemIcon","ListItemText","primary","document","body","Hidden","lgUp","implementation","Drawer","anchor","open","onClose","paper","ModalProps","keepMounted","mdDown","exact","path","createMuiTheme","MyApp","ThemeProvider","CssBaseline","initialState","rootReducer","combineReducers","store","createStore","Boolean","location","hostname","match","EsiClient","fetchClient","esiErrorManager","_baseUrl","_userAgent","_fetchClient","_esiErrorManager","this","endUrl","method","isErrorWindowBroken","Error","headers","cache","uri","isEmpty","concat","toString","JSON","stringify","response","saveErrorWindowInfo","ok","status","flagWindowAsBroken","incrementError","EsiErrorManager","_errorReset","now","_errorRemain","_resetErrorWindow","limitReset","limitRemain","headerErrorReset","headerErrorRemain","Query","spaceDelimiter","_spaceDelimiter","_query","attribute","values","Object","keys","queryString","hasOwnProperty","forEach","index","encodeURIComponent","QueryFactory","EsiError","statusText","StatusCall","esiClient","_esiClient","_url","a","getResponse","json","UniverseNamesCall","ids","AllianceListCall","AllianceInfoCall","_getUrl","NameRepository","universeNamesCaller","_universeNamesCaller","_removeBannedIDs","allResolvedIDs","failuresCount","maxAllowedFailures","chunks","splice","chunk","localResolvedIDs","Math","round","indexOf","AllianceCorporationsCall","PublicSearchCall","queryFactory","_queryFactory","searchString","categories","make","add","AllianceRepository","allianceListCall","allianceInfoCall","allianceCorpsCall","nameRepo","_allianceListCall","_allianceInfoCall","_allianceCorpsCall","_nameRepo","esiAlliancePromise","esiAllianceCorpsPromise","esiAlliance","repoAlliance","idsToResolve","_pushUnique","esiAllianceCorps","corpsNamesPromise","resolveGeneric","allianceNamesPromise","resolvedName","corpName","allianceIDs","names","resolved","unresolved","inputArray","esiCategories","SearchRepository","publicSearchCall","_publicSearchCall","categoriesForCall","entries","_composeResult","result","prettyCategory","CharacterInfoCall","ConstellationInfoCall","CorporationInfoCall","TypeInfoCall","RegionInfoCall","SystemInfoCall","StationInfoCall","FactionCall","AncestryCall","BloodlineCall","AncestryRepository","ancestryCall","_ancestryCall","ancestries","foundAncestry","ancestry","AbstractRepository","orderedNames","BloodlineRepository","bloodlineCall","raceRepo","_bloodlineCall","_raceRepo","_getEsiBloodline","foundBloodline","race_id","ship_type_id","raceNamePromise","getName","_getIDsToResolve","indexedNames","_orderNamesByID","ship_type_name","bloodlines","bloodline","bloodline_id","CharacterRepository","characterInfoCall","characterCorpHistoryCall","ancestryRepo","bloodlineRepo","_characterInfoCall","_characterCorpHistoryCall","_ancestryRepo","_bloodlineRepo","esiCharPromise","repoCorpHistoryPromise","_getCorpHistory","esiChar","repoChar","ancestryPromise","bloodlinePromise","namesPromise","racePromise","corpHistory","corp","is_deleted","repoCorpHistory","foundName","RaceCall","RaceRepository","raceCall","factionRepo","_raceCall","_factionRepo","esiRaces","repoRaces","esiRace","repoRace","_getEsiRace","foundRace","races","race","CharacterCorpHistoryCall","DateFormatter","date","yyyy","getUTCFullYear","mm","toStringWithLeadingZero","getUTCMonth","dd","getUTCDate","hr","getUTCHours","min","getUTCMinutes","sec","getUTCSeconds","CorporationAllianceHistoryCall","CorporationRepository","corpInfoCall","corpAllianceHistoryCall","_corpInfoCall","_corpAllianceHistoryCall","allianceHistoryPromise","getAllianceHistory","esiCorp","repoCorp","recordIDs","indexedCorpHistory","record","allianceNamePlaceholder","record_id","end_date","historyToReturn","b","i","start_date","unshift","FactionRepository","factionCall","_factionCall","esiFactions","repoFactions","esiFaction","_assembleRepoFaction","_getEsiFaction","foundFaction","factions","faction","militia_corporation_id","solar_system_id","militia_corporation_name","solar_system_name","Container","_esi","input","init","fetch","esi","allianceCorporationsCall","nameRepository","raceRepository","ancestryRepository","bloodlineRepository","corporationInfoCall","corporationAllianceHistoryCall","universeNamesCall","factionRepository","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.b002e74e.chunk.js","sourcesContent":["import React from 'react';\nimport MUIAppBar from '@material-ui/core/AppBar';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport IconButton from '@material-ui/core/IconButton';\nimport { useDispatch } from 'react-redux';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Typography from '@material-ui/core/Typography';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n    },\n    appBar: {\n      [theme.breakpoints.up('lg')]: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth,\n      },\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n      [theme.breakpoints.up('lg')]: {\n        display: 'none',\n      },\n    },\n  }),\n);\n\nexport default function AppBar(\n  {\n    title = \"\",\n    children = <React.Fragment />\n  }: {\n    title: string,\n    children?: React.ReactNode\n  }\n) {\n  const theme = useTheme();\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n  const toolbarVariant = useMediaQuery(theme.breakpoints.up('sm')) ? \"dense\" : \"regular\";\n\n  return (\n    <MUIAppBar position=\"fixed\" className={classes.appBar}>\n      <Toolbar variant={toolbarVariant}>\n        <IconButton\n          color=\"inherit\"\n          aria-label=\"open drawer\"\n          edge=\"start\"\n          onClick={() => dispatch({type: 'drawer/mobileOpen'})}\n          className={classes.menuButton}\n        >\n          <MenuIcon />\n        </IconButton>\n        <Typography variant=\"h6\" noWrap>\n          {title}\n        </Typography>\n        {children}\n      </Toolbar>\n    </MUIAppBar>\n  );\n}\n","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\n\nimport AppBar from \"../AppBar/AppBar\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n    },\n    // necessary for content to be below app bar\n    toolbar: {\n      minHeight: 56,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 48,\n      }\n    },\n  }),\n);\n\nexport default function Home(props: {}) {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <AppBar title=\"Home\" />\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n\n      </main>\n    </React.Fragment>\n  );\n}\n","const repoCategories = [\"all\", \"agent\", \"alliance\", \"character\", \"constellation\", \"corporation\", \"faction\", \"inventory_type\", \"region\", \"solar_system\", \"station\"] as const;\n\ntype RepoCategory = typeof repoCategories[number];\n\nexport default RepoCategory;\nexport { repoCategories };\n","import React, { createContext, useContext } from \"react\";\nimport Container from \"../../service/Container/Container\";\n\nlet DepsContext = createContext({});\n\nexport function useDeps(): any {\n  return useContext(DepsContext);\n}\n\nexport function DepsProvider({children, container}: {children: any, container: Container}) {\n  return (\n    <DepsContext.Provider value={container}>\n      {children}\n    </DepsContext.Provider>\n  )\n}\n","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    circularProgress: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      marginTop: theme.spacing(3),\n    }\n  }),\n);\n\nexport default function LoadingFullPage() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.circularProgress}>\n      <CircularProgress color=\"secondary\" />\n    </div>\n  );\n}\n","import Grid from \"@material-ui/core/Grid\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport React, {ReactElement, useRef, useState} from \"react\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    form: {\n      width: \"100%\",\n      marginBottom: theme.spacing(0.5),\n      [theme.breakpoints.down('xs')]: {\n        paddingLeft: theme.spacing(3),\n        paddingRight: theme.spacing(3)\n      }\n    },\n    filledGrid: {\n      padding: theme.spacing(0.5),\n    },\n    emptyGrid: {\n      padding: theme.spacing(0.5),\n      // Removing the border when hitting the breakpoint\n      [theme.breakpoints.down('xs')]: {\n        padding: 0,\n      }\n    },\n    selectGridItem: {\n      order: 1,\n      [theme.breakpoints.down('xs')]: {\n        order: 2,\n      }\n    },\n    textGridItem: {\n      order: 2,\n      [theme.breakpoints.down('xs')]: {\n        order: 1,\n        //paddingBottom: theme.spacing(2),\n      }\n    },\n    emptyGridItem: {\n      order: 3,\n    },\n    checkGridItem: {\n      order: 4,\n    }\n  }),\n);\n\nexport default function SearchForm(\n  {\n    category,\n    needle,\n    strict\n  }: {\n    category: string,\n    needle: string,\n    strict: boolean\n  }\n) {\n  let classes = useStyles();\n  let history = useHistory();\n  let [categoryValue, setCategoryValue] = useState(category);\n  let [strictValue, setStrictValue] = useState(strict);\n  let [searchTextErrorText, setSearchTextErrorText] = useState(\"\");\n  let [searchTextIsError, setSearchTextIsError] = useState(false);\n  let searchTextRef = useRef<HTMLInputElement | null>(null);\n\n  let submit = (): ReactElement | void => {\n    let searchTextElement = searchTextRef.current;\n    if (searchTextElement === null || searchTextElement.value.length < 3) {\n      setSearchTextIsError(true);\n      setSearchTextErrorText(\"It must be at least 3 characters long.\")\n\n      return;\n    }\n\n    let text = searchTextElement.value;\n    history.replace(`/search?category=${categoryValue}&strict=${String(strictValue)}&needle=${text}`);\n  }\n\n  let handleEnterPress = (e: React.KeyboardEvent): void => {\n    if (e.key === \"Enter\") {\n      submit();\n    }\n  }\n\n  return(\n    <form autoComplete=\"off\" className={classes.form}>\n      <Grid container>\n        <Grid item xs={12} sm={4} className={`${classes.filledGrid} ${classes.selectGridItem}`}>\n          <FormControl\n            variant=\"outlined\"\n            fullWidth\n          >\n            <InputLabel id=\"demo-simple-select-outlined-label\">Category</InputLabel>\n            <Select\n              labelId=\"demo-simple-select-outlined-label\"\n              id=\"demo-simple-select-outlined\"\n              value={categoryValue}\n              onChange={e => setCategoryValue(e.target.value as string)}\n              label=\"Category\"\n              color=\"secondary\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"agent\"}>Agent</MenuItem>\n              <MenuItem value={\"alliance\"}>Alliance</MenuItem>\n              <MenuItem value={\"character\"}>Character</MenuItem>\n              <MenuItem value={\"constellation\"}>Constellation</MenuItem>\n              <MenuItem value={\"corporation\"}>Corporation</MenuItem>\n              <MenuItem value={\"faction\"}>Faction</MenuItem>\n              <MenuItem value={\"inventory_type\"}>Item</MenuItem>\n              <MenuItem value={\"region\"}>Region</MenuItem>\n              <MenuItem value={\"solar_system\"}>System</MenuItem>\n              <MenuItem value={\"station\"}>Station</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12} sm={8} className={`${classes.filledGrid} ${classes.textGridItem}`}>\n          <TextField\n            autoFocus={true}\n            id=\"outlined-basic\"\n            error={searchTextIsError}\n            helperText={searchTextErrorText}\n            label=\"Search\"\n            variant=\"outlined\"\n            color=\"secondary\"\n            fullWidth\n            onKeyPress={handleEnterPress}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    aria-label=\"toggle password visibility\"\n                    onClick={submit}\n                    edge=\"end\"\n                  >\n                    <SearchIcon />\n                  </IconButton>\n                </InputAdornment>\n              )\n            }}\n            inputRef={searchTextRef}\n            defaultValue={needle}\n          />\n        </Grid>\n        <Grid item xs={12} sm={4} className={`${classes.emptyGrid} ${classes.emptyGridItem}`}>\n        </Grid>\n        <Grid item xs={12} sm={8} className={`${classes.filledGrid} ${classes.checkGridItem}`}>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={strictValue}\n                onChange={e => setStrictValue(e.target.checked as boolean)}\n                name=\"checkedA\"\n              />\n            }\n            label=\"Strict\"\n          />\n        </Grid>\n      </Grid>\n    </form>\n  );\n}\n","import React from 'react';\nimport MUIDataTable, {MUIDataTableColumnDef, MUIDataTableOptions} from \"mui-datatables\";\nimport { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\nimport ResultWithLinkInterface from \"../../../repository/SearchRepository/ResulWithLinkInterface\";\nimport { Link } from \"react-router-dom\";\nimport IconButton from '@material-ui/core/IconButton';\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    arrowRightIconStyle: {\n      verticalAlign: \"middle\",\n    },\n    emptyIconCell: {\n      minHeight: \"30px\"\n    }\n  }),\n);\n\nexport default function ResultTable(\n  {\n    data\n  }: {\n    data: ResultWithLinkInterface[]\n  }\n) {\n  const theme = useTheme();\n  let classes = useStyles();\n  const denseTable = useMediaQuery(theme.breakpoints.up('sm'));\n\n  let tableOptions: MUIDataTableOptions = {\n    download: false,\n    elevation: 1,\n    filterType: \"checkbox\",\n    print: false,\n    responsive: \"standard\",\n    rowsPerPage: 25,\n    rowsPerPageOptions: [],\n    search: false,\n    selectableRows: \"none\",\n    setTableProps: () => {\n      return {\n        size: denseTable ? \"small\" : \"medium\"\n      };\n    },\n    viewColumns: false\n  };\n\n  const columns: MUIDataTableColumnDef[] = [\n    {\n      name: \"name\",\n      label: \"Name\",\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    {\n      name: \"prettyCategory\",\n      label: \"Category\",\n      options: {\n        filter: true,\n        sort: true,\n      }\n    },\n    {\n      name: \"link\",\n      options: {\n        filter: false,\n        sort: false,\n        display: false,\n      }\n    },\n    {\n      name: \"id\",\n      options: {\n        filter: false,\n        sort: false,\n        display: false,\n      }\n    },\n    {\n      name: \"icon\",\n      label: \"\",\n      options: {\n        customHeadLabelRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          let link = tableMeta.rowData[2];\n          let id = tableMeta.rowData[3];\n\n          if (link === null) {\n            return <div className={classes.emptyIconCell} />;\n          }\n\n          return (\n            <IconButton\n              size=\"small\"\n              aria-label=\"open\"\n              component={Link}\n              to={`${link}${id}`}\n            >\n              <ArrowRightIcon className={classes.arrowRightIconStyle}/>\n            </IconButton>\n\n          );\n        },\n        filter: false,\n        setCellProps: () => ({ style: { width: \"0\"}}),\n        sort: false,\n      }\n    }\n  ];\n\n  return (\n    <MUIDataTable\n      title={\"\"}\n      data={data}\n      columns={columns}\n      options={tableOptions}\n    />\n  );\n}\n","import React from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport SearchForm from \"../SearchForm/SearchForm\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport ResultTable from \"../ResultTable/ResultTable\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport ResultWithLinkInterface from \"../../../repository/SearchRepository/ResulWithLinkInterface\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      padding: 0,\n    }\n  })\n);\n\nexport default function ResultContainer(\n  {\n    category,\n    needle,\n    strict,\n    resultData\n  }: {\n    category: string,\n    needle: string,\n    strict: boolean\n    resultData: ResultWithLinkInterface[]\n  }\n) {\n  let classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <Container maxWidth=\"sm\" className={classes.container}>\n        <SearchForm\n          category={category}\n          needle={needle}\n          strict={strict}\n        />\n        {resultData.length >= 500 &&\n        <Alert severity=\"warning\">More than 500 records found, the API hasn't performed a full search. Try refining your parameters if you need more accuracy.</Alert>\n        }\n        <ResultTable data={resultData}/>\n      </Container>\n    </React.Fragment>\n  )\n}\n","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Alert from '@material-ui/lab/Alert';\nimport { AlertTitle } from \"@material-ui/lab\";\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      '& > * + *': {\n        marginTop: theme.spacing(2),\n      },\n      [theme.breakpoints.down('xs')]: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2),\n      }\n    },\n  }),\n);\n\nexport default function ApiErrorFullPage(\n  {\n    retry,\n    text\n  }: {\n    retry: () => void,\n    text: string\n  }\n) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Alert\n        severity=\"error\"\n        action={\n          <Button color=\"inherit\" size=\"small\" onClick={retry}>\n            <strong>RETRY</strong>\n          </Button>\n        }\n        variant=\"outlined\"\n      >\n        <AlertTitle>Error</AlertTitle>\n        {text}\n      </Alert>\n    </div>\n  );\n}\n","import React, {useEffect, useState} from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\n\nimport { useDeps } from \"../../../context/DepsContext/DepsContext\";\nimport AppBar from \"../../AppBar/AppBar\";\nimport SearchRepositoryInterface from \"../../../repository/SearchRepository/SearchRepositoryInterface\";\nimport RepoCategory from \"../../../repository/SearchRepository/RepoCategory\";\nimport LoadingFullPage from \"../../LoadingFullPage/LoadingFullPage\";\nimport ResultContainer from \"../ResultContainer/ResultContainer\";\nimport ApiErrorFullPage from \"../../ApiErrorFullPage/ApiErrorFullPage\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n      height: \"100vh\",\n      [theme.breakpoints.down('xs')]: {\n        paddingLeft: 0,\n        paddingRight: 0\n      }\n    },\n    // necessary for content to be below app bar\n    toolbar: {\n      minHeight: 56,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 48,\n      }\n    },\n  }),\n);\n\nexport default function SearchResult(\n  {\n    category,\n    needle,\n    strict\n  }: {\n    category: string,\n    needle: string,\n    strict: boolean\n  }\n) {\n  let classes = useStyles();\n  let [resultComponent, setResultComponent] = useState<any>(<LoadingFullPage />);\n  let [retry, setRetry] = useState(false);\n  let {\n    searchRepository\n  }: {\n    searchRepository: SearchRepositoryInterface\n  } = useDeps();\n\n  useEffect(() => {\n    setResultComponent(<LoadingFullPage />);\n    setRetry(false);\n\n    searchRepository.publicSearch(needle, category as RepoCategory, strict)  // FIX typescript\n      .then(data => {\n        setResultComponent(\n          <ResultContainer\n            category={category}\n            needle={needle}\n            strict={strict}\n            resultData={data}\n          />\n        );\n      }).catch(e => {\n        setResultComponent(\n          <ApiErrorFullPage\n            retry={() => setRetry(true)}\n            text={e.message}\n          />\n        );\n      }\n    );\n  }, [category, needle, strict, retry]);\n\n  return (\n    <React.Fragment>\n      <AppBar title=\"Search\" />\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        {resultComponent}\n      </main>\n    </React.Fragment>\n  );\n}\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport AppBar from \"../../AppBar/AppBar\";\nimport Container from \"@material-ui/core/Container\";\nimport SearchForm from \"../SearchForm/SearchForm\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n      height: \"100vh\",\n    },\n    // necessary for content to be below app bar\n    toolbar: {\n      minHeight: 56,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 48,\n      }\n    },\n    container: {\n      padding: 0,\n      display: \"flex\",\n      alignItems: \"center\",\n      height: \"70vh\"\n    },\n  }),\n);\n\nexport default function SearchEmpty(\n  {\n    category\n  }: {\n    category: string\n  }\n) {\n  let classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <AppBar title=\"Search\" />\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Container maxWidth=\"sm\" className={classes.container}>\n          <SearchForm\n            category={category}\n            needle={\"\"}\n            strict={false}\n          />\n        </Container>\n      </main>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport RepoCategory, { repoCategories } from \"../../repository/SearchRepository/RepoCategory\";\nimport SearchResult from \"./SearchResult/SearchResult\";\nimport SearchEmpty from \"./SearchEmpty/SearchEmpty\";\n\nexport default function Search() {\n  let query = new URLSearchParams(useLocation().search);\n\n  let category: RepoCategory = \"all\";\n  let queryCategory = query.get(\"category\");\n  if (queryCategory !== null && repoCategories.includes(queryCategory as RepoCategory)) {\n    category = queryCategory as RepoCategory;\n  }\n\n  let queryStrict = query.get(\"strict\");\n  let queryNeedle = query.get(\"needle\");\n  if (queryStrict !== null && queryNeedle !== null) {\n    return (\n      <SearchResult\n        category={category}\n        needle={queryNeedle}\n        strict={queryStrict === \"true\"}\n      />\n    );\n  }\n\n  return (\n    <SearchEmpty category={category} />\n  );\n}\n","import MUIDataTable, {MUIDataTableColumnDef, MUIDataTableOptions} from \"mui-datatables\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Link} from \"react-router-dom\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport React from \"react\";\n\nconst options: MUIDataTableOptions = {\n  elevation: 1,\n  filter: false,\n  fixedHeader: false,\n  print: false,\n  responsive: \"standard\",\n  rowHover: false,\n  rowsPerPageOptions: [],\n  selectableRows: \"none\",\n  viewColumns: false,\n};\n\nexport default function CorpListTable(\n  {\n    corpList\n  }: {\n    corpList: { [key:string]: string }\n  }\n) {\n  const columns: MUIDataTableColumnDef[] = [\n    {\n      name: \"name\",\n      label: \"Name\",\n      options: {\n        customHeadRender: () => null\n      }\n    },\n    {\n      name: \"id\",\n      label: \"ID\",\n      options: {\n        customHeadRender: () => null,\n        display: false,\n      }\n    },\n    {\n      name: \"icon\",\n      label: \"\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          let id = tableMeta.rowData[1];\n\n          return (\n            <IconButton\n              size=\"small\"\n              aria-label=\"open\"\n              component={Link}\n              to={`/corporation/${id}`}\n            >\n              <ArrowRightIcon />\n            </IconButton>\n          );\n        },\n        download: false,\n        setCellProps: () => ({ style: { width: 0, paddingTop: 0, paddingBottom: 0 }}),\n      }\n    }\n  ];\n\n  let data: { name: string, id: number }[] = [];\n  for (let corpID in corpList) {\n    data.push({ name: corpList[corpID], id: Number(corpID) });\n  }\n\n  return(\n    <MUIDataTable\n      title={\"Corporations\"}\n      data={data}\n      columns={columns}\n      options={options}\n    />\n  );\n}\n","import React from 'react';\nimport RepoAllianceInterface from \"../../../repository/AllianceRepository/RepoAllianceInterface\";\nimport {createStyles, makeStyles, Theme, useTheme} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Link} from \"react-router-dom\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Typography from \"@material-ui/core/Typography\";\nimport CorpListTable from \"../CorpListTable/CorpListTable\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    buttonCell: {\n      paddingTop: 0,\n      paddingBottom: 0,\n      width: 0,\n    },\n    gridContainer: {\n      marginTop: 0,\n    },\n    gridWithTable: {\n      [theme.breakpoints.down('xs')]: {\n        paddingBottom: theme.spacing(3),\n      },\n    },\n    title: {\n      [theme.breakpoints.down('xs')]: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2)\n      },\n    },\n    logo: {\n      textAlign: \"center\",\n      //marginTop: -(theme.spacing(3)),\n      paddingTop: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n    },\n    nameCell: {\n      backgroundColor: theme.palette.secondary.main,\n      color: theme.palette.secondary.contrastText,\n    }\n  }),\n);\n\nexport default function AllianceInfoContent(\n  {\n    content\n  }: {\n    content: RepoAllianceInterface\n  }\n) {\n  let classes = useStyles();\n  let theme = useTheme();\n  let isSmall = useMediaQuery(theme.breakpoints.down('xs'));\n\n  return (\n    <React.Fragment>\n      <Grid container spacing={isSmall ? 0 : 3} className={classes.gridContainer}>\n        <Grid item xs={12} className={classes.logo}>\n          <img\n            alt=\"alliance logo\"\n            src={`https://images.evetech.net/alliances/${content.id}/logo`}\n            height=\"180\"\n            width=\"180\"\n          />\n        </Grid>\n        <Grid item xs={12} sm={6} className={classes.gridWithTable}>\n          <TableContainer component={Paper}>\n            <Table aria-label=\"alliance information\">\n              <TableBody>\n                <TableRow>\n                  <TableCell\n                    colSpan={3}\n                    align=\"center\"\n                    className={classes.nameCell}\n                  >\n                    <Typography variant=\"h6\">{ content.name }</Typography>\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Ticker:</TableCell>\n                  <TableCell>{ content.ticker }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>ID:</TableCell>\n                  <TableCell>{ content.id }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Creator (char):</TableCell>\n                  <TableCell>{ content.creator_name }</TableCell>\n                  <TableCell align=\"right\" className={classes.buttonCell}>\n                    <IconButton\n                      size=\"small\"\n                      aria-label=\"open character\"\n                      component={Link}\n                      to={`/character/${content.creator_id}`}\n                    >\n                      <ArrowRightIcon />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Creator (corp):</TableCell>\n                  <TableCell>{ content.creator_corporation_name }</TableCell>\n                  <TableCell align=\"right\" className={classes.buttonCell}>\n                    <IconButton\n                      size=\"small\"\n                      aria-label=\"open character\"\n                      component={Link}\n                      to={`/corporation/${content.creator_corporation_id}`}\n                    >\n                      <ArrowRightIcon />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Date founded:</TableCell>\n                  <TableCell>{ content.date_founded }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n                {content.executor_corporation_name !== undefined &&\n                  <TableRow>\n                      <TableCell>Executor:</TableCell>\n                      <TableCell>{ content.executor_corporation_name }</TableCell>\n                      <TableCell align=\"right\" className={classes.buttonCell}>\n                          <IconButton\n                              size=\"small\"\n                              aria-label=\"open character\"\n                              component={Link}\n                              to={`/corporation/${content.executor_corporation_id}`}\n                          >\n                              <ArrowRightIcon />\n                          </IconButton>\n                      </TableCell>\n                  </TableRow>\n                }\n                {content.faction_name !== undefined &&\n                  <TableRow>\n                      <TableCell>Faction:</TableCell>\n                      <TableCell>{ content.faction_name }</TableCell>\n                      <TableCell align=\"right\">\n                          <TableCell align=\"right\" className={classes.buttonCell}>\n                              <IconButton\n                                  size=\"small\"\n                                  aria-label=\"open character\"\n                                  component={Link}\n                                  to={`/faction/${content.faction_id}`}\n                              >\n                                  <ArrowRightIcon />\n                              </IconButton>\n                          </TableCell>\n                      </TableCell>\n                  </TableRow>\n                }\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Grid>\n        <Grid item xs={12} sm={6} className={classes.gridWithTable}>\n          <CorpListTable corpList={content.corporations} />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}\n\n/*\nexport default function AllianceInfoContent(\n  {\n    content\n  }: {\n    content: RepoAllianceInterface\n  }\n) {\n  return (\n    <React.Fragment>\n      <h1>{content.name}</h1>\n      <ul>\n        <li>\n          <details>\n            <summary>Corporations:</summary>\n            <ul>\n              {Object.keys(content.corporations).map(key => {\n                return <li key={key}>{content.corporations[key]}</li>\n              })}\n            </ul>\n          </details>\n        </li>\n      </ul>\n    </React.Fragment>\n  );\n}\n*/","import React, {useState, useEffect} from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Container from \"@material-ui/core/Container\";\n\nimport { useDeps } from \"../../context/DepsContext/DepsContext\";\nimport AppBar from \"../AppBar/AppBar\";\nimport LoadingFullPage from \"../LoadingFullPage/LoadingFullPage\";\nimport AllianceRepositoryInterface from \"../../repository/AllianceRepository/AllianceRepositoryInterface\";\nimport ApiErrorFullPage from \"../ApiErrorFullPage/ApiErrorFullPage\";\nimport AllianceInfoContent from \"./AllianceInfoContent/AllianceInfoContent\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      //paddingTop: theme.spacing(3),\n      paddingBottom: 0,\n      paddingLeft: 0,\n      paddingRight: 0,\n    },\n    content: {\n      flexGrow: 1,\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3),\n      [theme.breakpoints.down('xs')]: {\n        padding: 0,\n      }\n    },\n    // necessary for content to be below app bar\n    toolbar: {\n      minHeight: 56,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 48,\n      }\n    },\n  }),\n);\n\nexport default function AllianceInfo() {\n  let classes = useStyles();\n  let [apiResult, setApiResult] = useState(<LoadingFullPage />);\n  let [retry, setRetry] = useState(false);\n  let {\n    allianceRepository\n  }: {\n    allianceRepository: AllianceRepositoryInterface\n  } = useDeps();\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  useEffect(() => {\n    if (id === undefined) {\n      return;\n    }\n\n    setApiResult(<LoadingFullPage />);\n    setRetry(false);\n\n    allianceRepository.getOne(Number(id))\n      .then(data => {\n        setApiResult(\n          <AllianceInfoContent content={data} />\n        );\n      }).catch(e => {\n        setApiResult(\n          <ApiErrorFullPage\n            retry={() => setRetry(true)}\n            text={e.message}\n          />\n        );\n      });\n  }, [retry, id]);\n\n  return (\n    <React.Fragment>\n      <AppBar title=\"Alliance\" />\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          {apiResult}\n        </Container>\n      </main>\n    </React.Fragment>\n  );\n}\n","import MUIDataTable, {MUIDataTableColumnDef, MUIDataTableMeta, MUIDataTableOptions} from \"mui-datatables\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Link} from \"react-router-dom\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport React from \"react\";\nimport {createStyles, makeStyles, Theme, useTheme} from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\n\nimport { useDeps } from \"../../../context/DepsContext/DepsContext\";\nimport RepoCharacterCorpHistoryInterface\n  from \"../../../repository/CharacterRepository/RepoCharacterCorpHistoryInterface\";\nimport DateFormatterInterface from \"../../../service/DateFormatter/DateFormatterInterface\";\n\nconst options: MUIDataTableOptions = {\n  download: false,\n  elevation: 1,\n  filter: false,\n  fixedHeader: false,\n  print: false,\n  responsive: \"standard\",\n  rowHover: false,\n  rowsPerPage: 100,\n  rowsPerPageOptions: [],\n  search: false,\n  selectableRows: \"none\",\n  viewColumns: false,\n};\n\nconst styles = {\n  corpImg: {\n    display: \"flex\",\n  }\n};\n\nconst extractCorpID = (tableMeta: MUIDataTableMeta): number => {\n  return tableMeta.rowData[3];\n};\n\nexport default function CorpHistoryTable(\n  {\n    corporations\n  }: {\n    corporations: RepoCharacterCorpHistoryInterface[]\n  }\n) {\n  let theme = useTheme();\n  let isSmall = useMediaQuery(theme.breakpoints.down('xs'));\n  let {\n    dateFormatter\n  }: {\n    dateFormatter: DateFormatterInterface\n  } = useDeps();\n\n  const columns: MUIDataTableColumnDef[] = [\n    {\n      name: \"logo\",\n      label: \"\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          let id = extractCorpID(tableMeta);\n\n          return (\n            <img\n              src={`https://images.evetech.net/corporations/${id}/logo?size=64`}\n              alt=\"corporation logo\"\n              height={48}\n              width={48}\n              style={styles.corpImg}\n            />\n          );\n        },\n        display: !isSmall,\n        setCellProps: () => ({ style: { width: 0, paddingTop: 0, paddingBottom: 0, paddingRight: 0 }}),\n      }\n    },\n    {\n      name: \"corporation_name\",\n      label: \"Name\",\n      options: {\n        customHeadRender: () => null\n      }\n    },\n    {\n      name: \"start_date\",\n      label: \"From\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          return dateFormatter.withDateTime(new Date(value));\n        },\n      }\n    },\n    {\n      name: \"corporation_id\",\n      label: \"ID\",\n      options: {\n        customHeadRender: () => null,\n        display: false,\n      }\n    },\n    {\n      name: \"icon\",\n      label: \"\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          let id = extractCorpID(tableMeta);\n\n          return (\n            <IconButton\n              size=\"small\"\n              aria-label=\"open\"\n              component={Link}\n              to={`/corporation/${id}`}\n            >\n              <ArrowRightIcon />\n            </IconButton>\n          );\n        },\n        download: false,\n        setCellProps: () => ({ style: { width: 0, paddingTop: 0, paddingBottom: 0 }}),\n      }\n    }\n  ];\n\n  return(\n    <MUIDataTable\n      title={\"Corp History\"}\n      data={corporations}\n      columns={columns}\n      options={options}\n    />\n  );\n}\n","import React from 'react';\nimport Typography from \"@material-ui/core/Typography\";\n\nexport default function EntityDescription(\n  {\n    bio\n  }: {\n    bio: string\n  }\n) {\n  let paragraphs = bio.split(\"<br>\");\n\n  return (\n    <React.Fragment>\n      {paragraphs.map((paragraph, key) => {\n        return <Typography>{ paragraph.replace(/(<([^>]+)>)/gi, \"\") }</Typography>\n      })}\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport {createStyles, makeStyles, Theme, useTheme} from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport RepoCharacterInterface from \"../../../repository/CharacterRepository/RepoCharacterInterface\";\nimport CorpHistoryTable from \"../CorpHistoryTable/CorpHistoryTable\";\nimport { useDeps } from \"../../../context/DepsContext/DepsContext\";\nimport DateFormatterInterface from \"../../../service/DateFormatter/DateFormatterInterface\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Link} from \"react-router-dom\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport EntityDescription from \"../../EntityDescription/EntityDescription\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    buttonCell: {\n      paddingTop: 0,\n      paddingBottom: 0,\n      width: 0,\n    },\n    gridContainer: {\n      marginTop: 0,\n    },\n    gridWithTable: {\n      [theme.breakpoints.down('xs')]: {\n        paddingBottom: theme.spacing(3),\n      },\n    },\n    title: {\n      [theme.breakpoints.down('xs')]: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2)\n      },\n    },\n    logo: {\n      textAlign: \"center\",\n      paddingTop: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n    },\n    nameCell: {\n      backgroundColor: theme.palette.secondary.main,\n      color: theme.palette.secondary.contrastText,\n    },\n    entityLogoCell: {\n      paddingTop: 0,\n      paddingRight: 0,\n      paddingBottom: 0\n    },\n    entityLogoGrid: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    entityLogoImg: {\n      marginRight: theme.spacing(1),\n      [theme.breakpoints.down('xs')]: {\n        display: \"none\",\n      },\n    },\n    bioCell: {\n      verticalAlign: \"top\",\n    },\n    successColorText: {\n      color: theme.palette.success.main,\n    },\n    errorColorText: {\n      color: theme.palette.error.main,\n    },\n  }),\n);\n\nexport default function CharacterInfoContent(\n  {\n    content\n  }: {\n    content: RepoCharacterInterface\n  }\n) {\n  let classes = useStyles();\n  let theme = useTheme();\n  let isSmall = useMediaQuery(theme.breakpoints.down('xs'));\n  let {\n    dateFormatter\n  }: {\n    dateFormatter: DateFormatterInterface\n  } = useDeps();\n\n  return (\n    <React.Fragment>\n      <Grid container spacing={isSmall ? 0 : 3} className={classes.gridContainer}>\n        <Grid item xs={12} className={classes.logo}>\n          <img\n            alt=\"character portrait\"\n            src={`https://images.evetech.net/characters/${content.id}/portrait`}\n            height=\"180\"\n            width=\"180\"\n          />\n        </Grid>\n        <Grid item xs={12} md={6} className={classes.gridWithTable}>\n          <TableContainer component={Paper}>\n            <Table aria-label=\"character information\">\n              <TableBody>\n                <TableRow>\n                  <TableCell\n                    colSpan={3}\n                    align=\"center\"\n                    className={classes.nameCell}\n                  >\n                    <Typography variant=\"h6\">{ content.name }</Typography>\n                  </TableCell>\n                </TableRow>\n\n                <TableRow>\n                  <TableCell>Corporation:</TableCell>\n                  <TableCell className={classes.entityLogoCell}>\n                    <Grid container>\n                      <Grid item className={classes.entityLogoGrid}>\n                        <img\n                          src={`https://images.evetech.net/corporations/${content.corporation_id}/logo?size=64`}\n                          alt=\"corporation logo\"\n                          height={48}\n                          width={48}\n                          className={classes.entityLogoImg}\n                        />\n                      </Grid>\n                      <Grid item className={classes.entityLogoGrid}>\n                        { content.corporation_name }\n                      </Grid>\n                    </Grid>\n                  </TableCell>\n                  <TableCell align=\"right\" className={classes.buttonCell}>\n                    <IconButton\n                      size=\"small\"\n                      aria-label=\"open corporation\"\n                      component={Link}\n                      to={`/corporation/${content.corporation_id}`}\n                    >\n                      <ArrowRightIcon />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n\n                {content.alliance_name !== undefined &&\n                  <TableRow>\n                      <TableCell>Alliance:</TableCell>\n                      <TableCell className={classes.entityLogoCell}>\n                          <Grid container>\n                              <Grid item className={classes.entityLogoGrid}>\n                                  <img\n                                      src={`https://images.evetech.net/alliances/${content.alliance_id}/logo?size=64`}\n                                      alt=\"alliance logo\"\n                                      height={48}\n                                      width={48}\n                                      className={classes.entityLogoImg}\n                                  />\n                              </Grid>\n                              <Grid item className={classes.entityLogoGrid}>\n                                { content.alliance_name }\n                              </Grid>\n                          </Grid>\n                      </TableCell>\n                      <TableCell align=\"right\" className={classes.buttonCell}>\n                          <IconButton\n                              size=\"small\"\n                              aria-label=\"open alliance\"\n                              component={Link}\n                              to={`/alliance/${content.alliance_id}`}\n                          >\n                              <ArrowRightIcon />\n                          </IconButton>\n                      </TableCell>\n                  </TableRow>\n                }\n\n                <TableRow>\n                  <TableCell>Birthday:</TableCell>\n                  <TableCell>{ dateFormatter.withDateTime(new Date(content.birthday)) }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n\n                {content.security_status !== undefined &&\n                  <TableRow>\n                      <TableCell>Sec status:</TableCell>\n                      <TableCell\n                          className={content.security_status < 0 ? classes.errorColorText : classes.successColorText}>\n                        {content.security_status}\n                      </TableCell>\n                      <TableCell align=\"right\"> </TableCell>\n                  </TableRow>\n                }\n\n                <TableRow>\n                  <TableCell>Title</TableCell>\n                  <TableCell>{ content.title }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n\n                <TableRow>\n                  <TableCell>Race:</TableCell>\n                  <TableCell>{ content.race_name }</TableCell>\n                  <TableCell align=\"right\" className={classes.buttonCell}>\n                    {/* TODO: remove when the race page is implemented\n                      <IconButton\n                        size=\"small\"\n                        aria-label=\"open race\"\n                        component={Link}\n                        to={`/race/${content.race_id}`}\n                      >\n                        <ArrowRightIcon/>\n                      </IconButton>*/\n                    }\n                  </TableCell>\n                </TableRow>\n\n                {content.ancestry_id !== undefined && content.ancestry_id > 0 && // 0 is possible even if it's not valid\n                  <TableRow>\n                      <TableCell>Ancestry:</TableCell>\n                      <TableCell>{ content.ancestry_name }</TableCell>\n                      <TableCell align=\"right\" className={classes.buttonCell}>\n                        {/* TODO: remove when the ancestry page is implemented\n                          <IconButton\n                            size=\"small\"\n                            aria-label=\"open ancestry\"\n                            component={Link}\n                            to={`/ancestry/${content.ancestry_id}`}\n                          >\n                            <ArrowRightIcon/>\n                          </IconButton>*/\n                        }\n                      </TableCell>\n                  </TableRow>\n                }\n\n                <TableRow>\n                  <TableCell>Bloodline:</TableCell>\n                  <TableCell>{ content.bloodline_name }</TableCell>\n                  <TableCell align=\"right\" className={classes.buttonCell}>\n                    {/* TODO: remove when the bloodline page is implemented\n                    <IconButton\n                      size=\"small\"\n                      aria-label=\"open bloodline\"\n                      component={Link}\n                      to={`/bloodline/${content.bloodline_id}`}\n                    >\n                      <ArrowRightIcon />\n                    </IconButton>*/}\n                  </TableCell>\n                </TableRow>\n\n                {content.faction_name !== undefined &&\n                  <TableRow>\n                      <TableCell>Faction:</TableCell>\n                      <TableCell>{ content.faction_name }</TableCell>\n                      <TableCell align=\"right\" className={classes.buttonCell}>\n                        {/* TODO: remove when the faction page is implemented\n                          <IconButton\n                              size=\"small\"\n                              aria-label=\"open faction\"\n                              component={Link}\n                              to={`/faction/${content.faction_id}`}\n                          >\n                              <ArrowRightIcon />\n                          </IconButton>*/}\n                      </TableCell>\n                  </TableRow>\n                }\n                <TableRow>\n                  <TableCell>Gender:</TableCell>\n                  <TableCell>{ `${content.gender[0].toUpperCase()}${content.gender.substr(1)}` }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n                {content.description !== undefined &&\n                  <TableRow>\n                      <TableCell className={classes.bioCell}>Bio:</TableCell>\n                      <TableCell colSpan={2}><EntityDescription bio={content.description} /></TableCell>\n                  </TableRow>\n                }\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Grid>\n        <Grid item xs={12} md={6} className={classes.gridWithTable}>\n          <CorpHistoryTable corporations={content.corporation_history} />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}\n","import React, {useEffect, useState} from 'react';\nimport { useParams } from \"react-router-dom\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport AppBar from \"../AppBar/AppBar\";\nimport CharacterInfoContent from \"./CharacterInfoContent/CharacterInfoContent\";\nimport Container from \"@material-ui/core/Container\";\nimport LoadingFullPage from \"../LoadingFullPage/LoadingFullPage\";\nimport { useDeps } from \"../../context/DepsContext/DepsContext\";\nimport CharacterRepositoryInterface from \"../../repository/CharacterRepository/CharacterRepositoryInterface\";\nimport ApiErrorFullPage from \"../ApiErrorFullPage/ApiErrorFullPage\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      paddingBottom: 0,\n      paddingLeft: 0,\n      paddingRight: 0,\n    },\n    content: {\n      flexGrow: 1,\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3),\n      [theme.breakpoints.down('xs')]: {\n        padding: 0,\n      }\n    },\n    // necessary for content to be below app bar\n    toolbar: {\n      minHeight: 56,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 48,\n      }\n    },\n  }),\n);\n\nexport default function CharacterInfo() {\n  let classes = useStyles();\n  let [apiResult, setApiResult] = useState(<LoadingFullPage />);\n  let [retry, setRetry] = useState(false);\n  let {\n    characterRepository\n  }: {\n    characterRepository: CharacterRepositoryInterface\n  } = useDeps();\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  useEffect(() => {\n    if (id === undefined) {\n      return;\n    }\n\n    setApiResult(<LoadingFullPage />);\n    setRetry(false);\n\n    characterRepository.getOne(Number(id))\n      .then(data => {\n        setApiResult(\n          <CharacterInfoContent content={data} />\n        )\n      }).catch(e => {\n        setApiResult(\n          <ApiErrorFullPage\n            retry={() => setRetry(true)}\n            text={e.message}\n          />\n        );\n      });\n  }, [retry, id]);\n\n  return (\n    <React.Fragment>\n      <AppBar title=\"Character\" />\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          {apiResult}\n        </Container>\n      </main>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function ConstellationInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>constellation {id}</h1>\n  );\n}\n","import MUIDataTable, {MUIDataTableColumnDef, MUIDataTableMeta, MUIDataTableOptions} from \"mui-datatables\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Link} from \"react-router-dom\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport React from \"react\";\nimport {createStyles, makeStyles, Theme, useTheme} from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport Grid from '@material-ui/core/Grid';\nimport { useDeps } from \"../../../context/DepsContext/DepsContext\";\nimport RepoCharacterCorpHistoryInterface\n  from \"../../../repository/CharacterRepository/RepoCharacterCorpHistoryInterface\";\nimport DateFormatterInterface from \"../../../service/DateFormatter/DateFormatterInterface\";\nimport RepoCorpAllianceHistoryInterface\n  from \"../../../repository/CorporationRepository/RepoCorpAllianceHistoryInterface\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst options: MUIDataTableOptions = {\n  download: false,\n  elevation: 1,\n  filter: false,\n  fixedHeader: false,\n  print: false,\n  responsive: \"standard\",\n  rowHover: false,\n  rowsPerPage: 100,\n  rowsPerPageOptions: [],\n  search: false,\n  selectableRows: \"none\",\n  viewColumns: false,\n};\n\nconst styles = {\n  allianceImg: {\n    display: \"flex\",\n  }\n};\n\nconst extractAllianceID = (tableMeta: MUIDataTableMeta): number => {\n  return tableMeta.rowData[5];\n};\n\nexport default function AllianceHistoryTable(\n  {\n    alliances\n  }: {\n    alliances: RepoCorpAllianceHistoryInterface[]\n  }\n) {\n  let theme = useTheme();\n  let isSmall = useMediaQuery(theme.breakpoints.down('xs'));\n  let {\n    dateFormatter\n  }: {\n    dateFormatter: DateFormatterInterface\n  } = useDeps();\n\n  const columns: MUIDataTableColumnDef[] = [\n    {\n      name: \"logo\",\n      label: \"\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          let id = extractAllianceID(tableMeta);\n\n          return (\n            <img\n              src={`https://images.evetech.net/alliances/${id}/logo?size=64`}\n              alt=\"alliance logo\"\n              height={48}\n              width={48}\n              style={styles.allianceImg}\n            />\n          );\n        },\n        display: !isSmall,\n        setCellProps: () => ({ style: { width: 0, paddingTop: 0, paddingBottom: 0, paddingRight: 0 }}),\n      }\n    },\n    {\n      name: \"alliance_name\",\n      label: \"Name\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          let isDeleted = tableMeta.rowData[7];\n\n          return `${value}${isDeleted === true ? \" (Closed)\" : \"\"}`;\n        },\n      }\n    },\n    {\n      name: \"start_date\",\n      label: \"From\",\n      options: {\n        display: false,\n      }\n    },\n    {\n      name: \"end_date\",\n      label: \"To\",\n      options: {\n        display: false,\n      }\n    },\n    {\n      name: \"stacked_dates\",\n      label: \"From To\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          let start = tableMeta.rowData[2];\n          let end = tableMeta.rowData[3];\n\n          return (\n            <React.Fragment>\n              <Grid container direction=\"column\">\n                {end !== undefined &&\n                  <Grid item xs style={{ whiteSpace: \"nowrap\" }}>\n                    {dateFormatter.withDateTime(new Date(end))}\n                  </Grid>\n                }\n                <Grid item xs style={{ whiteSpace: \"nowrap\" }}>\n                  {dateFormatter.withDateTime(new Date(start))}\n                </Grid>\n              </Grid>\n            </React.Fragment>\n          );\n        },\n        setCellProps: () => ({ style: { paddingTop: 0, paddingBottom: 0 }}),\n      }\n    },\n    {\n      name: \"alliance_id\",\n      label: \"ID\",\n      options: {\n        customHeadRender: () => null,\n        display: false,\n      }\n    },\n    {\n      name: \"icon\",\n      label: \"\",\n      options: {\n        customHeadRender: () => null,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          let id = extractAllianceID(tableMeta);\n\n          return (\n            <IconButton\n              size=\"small\"\n              aria-label=\"open\"\n              component={Link}\n              to={`/alliance/${id}`}\n            >\n              <ArrowRightIcon/>\n            </IconButton>\n          );\n        },\n        download: false,\n        setCellProps: () => ({style: {width: 0, paddingTop: 0, paddingBottom: 0}}),\n      }\n    },\n    {\n      name: \"is_deleted\",\n      label: \"Is deleted\",\n      options: {\n        display: false,\n      }\n    },\n  ];\n\n  return(\n    <MUIDataTable\n      title={\"Alliance History\"}\n      data={alliances}\n      columns={columns}\n      options={options}\n    />\n  );\n}","import RepoCorporationInterface from \"../../../repository/CorporationRepository/RepoCorporationInterface\";\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport {createStyles, makeStyles, Theme, useTheme} from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport RepoCharacterInterface from \"../../../repository/CharacterRepository/RepoCharacterInterface\";\nimport { useDeps } from \"../../../context/DepsContext/DepsContext\";\nimport DateFormatterInterface from \"../../../service/DateFormatter/DateFormatterInterface\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Link} from \"react-router-dom\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport ClearIcon from '@material-ui/icons/Clear';\nimport CheckIcon from '@material-ui/icons/Check';\nimport EntityDescription from \"../../EntityDescription/EntityDescription\";\nimport AllianceHistoryTable from \"../AllianceHistoryTable/AllianceHistoryTable\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    buttonCell: {\n      paddingTop: 0,\n      paddingBottom: 0,\n      width: 0,\n    },\n    gridContainer: {\n      marginTop: 0,\n    },\n    gridWithTable: {\n      [theme.breakpoints.down('xs')]: {\n        paddingBottom: theme.spacing(3),\n      },\n    },\n    title: {\n      [theme.breakpoints.down('xs')]: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2)\n      },\n    },\n    logo: {\n      textAlign: \"center\",\n      paddingTop: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n    },\n    nameCell: {\n      backgroundColor: theme.palette.secondary.main,\n      color: theme.palette.secondary.contrastText,\n    },\n    entityLogoCell: {\n      paddingTop: 0,\n      paddingRight: 0,\n      paddingBottom: 0\n    },\n    entityLogoGrid: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    entityLogoImg: {\n      marginRight: theme.spacing(1),\n      [theme.breakpoints.down('xs')]: {\n        display: \"none\",\n      },\n    },\n    noWrapCell: {\n      whiteSpace: \"nowrap\",\n      [theme.breakpoints.down('xs')]: {\n        whiteSpace: \"normal\",\n      },\n    },\n    bioCell: {\n      verticalAlign: \"top\",\n    },\n    successColorText: {\n      color: theme.palette.success.main,\n    },\n    errorColorText: {\n      color: theme.palette.error.main,\n    },\n  }),\n);\n\nexport default function CorporationInfoContent(\n  {\n    content\n  }: {\n    content: RepoCorporationInterface\n  }\n) {\n  let classes = useStyles();\n  let theme = useTheme();\n  let isSmall = useMediaQuery(theme.breakpoints.down('xs'));\n  let {\n    dateFormatter\n  }: {\n    dateFormatter: DateFormatterInterface\n  } = useDeps();\n\n  return (\n    <React.Fragment>\n      <Grid container spacing={isSmall ? 0 : 3} className={classes.gridContainer}>\n        <Grid item xs={12} className={classes.logo}>\n          <img\n            alt=\"corporation logo\"\n            src={`https://images.evetech.net/corporations/${content.id}/logo`}\n            height=\"180\"\n            width=\"180\"\n          />\n        </Grid>\n        <Grid item xs={12} md={6} className={classes.gridWithTable}>\n          <TableContainer component={Paper}>\n            <Table aria-label=\"corporation information\">\n              <TableBody>\n\n                <TableRow>\n                  <TableCell\n                    colSpan={3}\n                    align=\"center\"\n                    className={classes.nameCell}\n                  >\n                    <Typography variant=\"h6\">{ content.name }</Typography>\n                  </TableCell>\n                </TableRow>\n\n                <TableRow>\n                  <TableCell>Ticker:</TableCell>\n                  <TableCell>{ content.ticker }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n\n                {content.alliance_id !== undefined &&\n                  <TableRow>\n                    <TableCell>Alliance:</TableCell>\n                    <TableCell className={classes.entityLogoCell}>\n                      <Grid container>\n                        <Grid item className={classes.entityLogoGrid}>\n                          <img\n                              src={`https://images.evetech.net/alliances/${content.alliance_id}/logo?size=64`}\n                              alt=\"alliance logo\"\n                              height={48}\n                              width={48}\n                              className={classes.entityLogoImg}\n                          />\n                        </Grid>\n                        <Grid item className={classes.entityLogoGrid}>\n                          { content.alliance_name }\n                        </Grid>\n                      </Grid>\n                    </TableCell>\n                    <TableCell align=\"right\" className={classes.buttonCell}>\n                      <IconButton\n                        size=\"small\"\n                        aria-label=\"open alliance\"\n                        component={Link}\n                        to={`/alliance/${content.alliance_id}`}\n                      >\n                        <ArrowRightIcon />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                }\n\n                <TableRow>\n                  <TableCell>CEO:</TableCell>\n                  <TableCell className={classes.entityLogoCell}>\n                    <Grid container>\n                      <Grid item className={classes.entityLogoGrid}>\n                        <img\n                          src={`https://images.evetech.net/characters/${content.ceo_id}/portrait?size=64`}\n                          alt=\"character portrait\"\n                          height={48}\n                          width={48}\n                          className={classes.entityLogoImg}\n                        />\n                      </Grid>\n                      <Grid item className={classes.entityLogoGrid}>\n                        { content.ceo_name }\n                      </Grid>\n                    </Grid>\n                  </TableCell>\n                  <TableCell align=\"right\" className={classes.buttonCell}>\n                    <IconButton\n                      size=\"small\"\n                      aria-label=\"open character\"\n                      component={Link}\n                      to={`/character/${content.ceo_id}`}\n                    >\n                      <ArrowRightIcon />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n\n                {content.creator_id !== 1 && // 1 when it's created manually by CCP\n                  <TableRow>\n                    <TableCell>Founder:</TableCell>\n                    <TableCell className={classes.entityLogoCell}>\n                      <Grid container>\n                        <Grid item className={classes.entityLogoGrid}>\n                          <img\n                            src={`https://images.evetech.net/characters/${content.creator_id}/portrait?size=64`}\n                            alt=\"character portrait\"\n                            height={48}\n                            width={48}\n                            className={classes.entityLogoImg}\n                          />\n                        </Grid>\n                        <Grid item className={classes.entityLogoGrid}>\n                          { content.creator_name }\n                        </Grid>\n                      </Grid>\n                    </TableCell>\n                    <TableCell align=\"right\" className={classes.buttonCell}>\n                      <IconButton\n                        size=\"small\"\n                        aria-label=\"open character\"\n                        component={Link}\n                        to={`/character/${content.creator_id}`}\n                      >\n                        <ArrowRightIcon />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                }\n\n                <TableRow>\n                  <TableCell>Members:</TableCell>\n                  <TableCell>{ content.member_count }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n\n                {content.date_founded !== undefined &&\n                  <TableRow>\n                    <TableCell>Creation date:</TableCell>\n                    <TableCell>{ dateFormatter.withDateTime(new Date(content.date_founded)) }</TableCell>\n                    <TableCell align=\"right\"> </TableCell>\n                  </TableRow>\n                }\n\n                {content.faction_id !== undefined &&\n                  <TableRow>\n                    <TableCell>Faction:</TableCell>\n                    <TableCell>{ content.faction_name }</TableCell>\n                    <TableCell align=\"right\"> {/* TODO: implement link when the page is implemented */}</TableCell>\n                  </TableRow>\n                }\n\n                {content.home_station_id !== undefined &&\n                  <TableRow>\n                    <TableCell className={classes.noWrapCell}>Home station:</TableCell>\n                    <TableCell>{ content.home_station_name }</TableCell>\n                    <TableCell align=\"right\" className={classes.buttonCell}>\n                      {\n                        /* TODO: remove when the station page is implemented\n                        <IconButton\n                          size=\"small\"\n                          aria-label=\"open station\"\n                          component={Link}\n                          to={`/station/${content.home_station_id}`}\n                        >\n                          <ArrowRightIcon/>\n                        </IconButton>\n                        */\n                      }\n                    </TableCell>\n                  </TableRow>\n                }\n\n                <TableRow>\n                  <TableCell>Tax rate:</TableCell>\n                  <TableCell>{ content.tax_rate }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n\n                {content.shares !== undefined &&\n                  <TableRow>\n                    <TableCell>Shares:</TableCell>\n                    <TableCell>{ content.shares }</TableCell>\n                    <TableCell align=\"right\"> </TableCell>\n                  </TableRow>\n                }\n\n                <TableRow>\n                  <TableCell>War eligible:</TableCell>\n                  <TableCell className={classes.entityLogoCell}>\n                    {content.war_eligible === true\n                      ? <CheckIcon className={classes.successColorText} />\n                      : <ClearIcon className={classes.errorColorText} />\n                    }\n                  </TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n\n                <TableRow>\n                  <TableCell>ID:</TableCell>\n                  <TableCell>{ content.id }</TableCell>\n                  <TableCell align=\"right\"> </TableCell>\n                </TableRow>\n\n                {content.url !== undefined &&\n                  <TableRow>\n                    <TableCell>Url:</TableCell>\n                    <TableCell><a href={ content.url}>{ content.url }</a></TableCell>\n                    <TableCell align=\"right\"> </TableCell>\n                  </TableRow>\n                }\n\n                {content.description !== undefined &&\n                  <TableRow>\n                    <TableCell className={classes.bioCell}>Description:</TableCell>\n                    <TableCell colSpan={2}><EntityDescription bio={content.description} /></TableCell>\n                  </TableRow>\n                }\n                </TableBody>\n            </Table>\n          </TableContainer>\n        </Grid>\n        <Grid item xs={12} md={6} className={classes.gridWithTable}>\n          <AllianceHistoryTable alliances={content.alliance_history} />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  )\n}\n","import React, {useEffect, useState} from 'react';\nimport { useParams } from \"react-router-dom\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport AppBar from \"../AppBar/AppBar\";\nimport Container from \"@material-ui/core/Container\";\nimport LoadingFullPage from \"../LoadingFullPage/LoadingFullPage\";\nimport { useDeps } from \"../../context/DepsContext/DepsContext\";\nimport ApiErrorFullPage from \"../ApiErrorFullPage/ApiErrorFullPage\";\nimport CorporationRepositoryInterface from \"../../repository/CorporationRepository/CorporationRepositoryInterface\";\nimport CorporationInfoContent from \"./CorporationInfoContent/CorporationInfoContent\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      paddingBottom: 0,\n      paddingLeft: 0,\n      paddingRight: 0,\n    },\n    content: {\n      flexGrow: 1,\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3),\n      [theme.breakpoints.down('xs')]: {\n        padding: 0,\n      }\n    },\n    // necessary for content to be below app bar\n    toolbar: {\n      minHeight: 56,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 48,\n      }\n    },\n  }),\n);\n\nexport default function CorporationInfo() {\n  let classes = useStyles();\n  let [apiResult, setApiResult] = useState(<LoadingFullPage />);\n  let [retry, setRetry] = useState(false);\n  let {\n    corporationRepository\n  }: {\n    corporationRepository: CorporationRepositoryInterface\n  } = useDeps();\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  useEffect(() => {\n    if (id === undefined) {\n      return;\n    }\n\n    setApiResult(<LoadingFullPage />);\n    setRetry(false);\n\n    corporationRepository.getOne(Number(id))\n      .then(data => {\n        setApiResult(\n          <CorporationInfoContent content={data} />\n        )\n      }).catch(e => {\n        setApiResult(\n          <ApiErrorFullPage\n            retry={() => setRetry(true)}\n            text={e.message}\n          />\n        );\n      });\n  }, [retry, id]);\n\n  return (\n    <React.Fragment>\n      <AppBar title=\"Corporation\" />\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          {apiResult}\n        </Container>\n      </main>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function TypeInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>type {id}</h1>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function RegionInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>region {id}</h1>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function SystemInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>system {id}</h1>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function StationInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>station {id}</h1>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function FactionInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>faction {id}</h1>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function RaceInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>race {id}</h1>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function AncestryInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>ancestry {id}</h1>\n  );\n}\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n\nexport default function BloodlineInfo() {\n  let { id } = useParams<Record<string, string | undefined>>();\n  if (id === undefined) {\n    // TODO: redirect to not found\n  }\n\n  return (\n    <h1>bloodline {id}</h1>\n);\n}\n","import React from 'react';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport { useSelector, useDispatch } from 'react-redux';\nimport \"typeface-rajdhani\";\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport MUISwitch from '@material-ui/core/Switch';\nimport { Route, Switch } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport SearchIcon from '@material-ui/icons/Search';\n\nimport Home from \"../Home/Home\";\nimport Search from \"../Search/Search\";\nimport AllianceInfo from \"../AllianceInfo/AllianceInfo\";\nimport CharacterInfo from \"../CharacterInfo/CharacterInfo\";\nimport ConstellationInfo from \"../ConstellationInfo/ConstellationInfo\";\nimport CorporationInfo from \"../CorporationInfo/CorporationInfo\";\nimport TypeInfo from \"../TypeInfo/TypeInfo\";\nimport RegionInfo from \"../RegionInfo/RegionInfo\";\nimport SystemInfo from \"../SystemInfo/SystemInfo\";\nimport StationInfo from \"../StationInfo/StationInfo\";\nimport FactionInfo from \"../FactionInfo/FactionInfo\";\nimport RaceInfo from \"../RaceInfo/RaceInfo\";\nimport AncestryInfo from \"../AncestryInfo/AncestryInfo\";\nimport BloodlineInfo from \"../BloodlineInfo/BloodlineInfo\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n    },\n    drawer: {\n      [theme.breakpoints.up('lg')]: {\n        width: drawerWidth,\n        flexShrink: 0,\n      },\n    },\n    // necessary for content to be below app bar\n    toolbar: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: 56,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 48,\n      }\n    },\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    logoText: {\n      color: \"inherit\",\n      fontFamily: [\n        'Rajdhani',\n        'sans-serif',\n      ].join(','),\n      fontWeight: 600,\n      textDecoration: \"none\"\n    },\n    darkModeToggle: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: 48,\n    },\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\ninterface Props {\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  window?: () => Window;\n}\n\nexport default function ResponsiveDrawer(props: Props) {\n  const { window } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  // FIXME\n  // @ts-ignore\n  const mobileOpen = useSelector(state => state.drawer.mobileOpen);\n  // @ts-ignore\n  const darkMode = useSelector(state => state.theme.darkMode);\n  const dispatch = useDispatch();\n\n  const handleCloseDrawer = () => dispatch({type: 'drawer/mobileClose'});\n\n  const darkModeToggle = (\n    <React.Fragment>\n      <Divider />\n      <FormGroup row className={classes.darkModeToggle}>\n        <FormControlLabel\n          control={\n            <MUISwitch\n              checked={darkMode}\n              onChange={() => dispatch({type: 'theme/changeMode'})}\n              name=\"checkedB\"\n              //color=\"primary\"\n              size=\"small\"\n            />\n          }\n          label=\"Dark mode\"\n        />\n      </FormGroup>\n    </React.Fragment>\n  );\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar}>\n        <Typography\n          variant=\"h4\"\n          align=\"center\"\n          className={classes.logoText}\n          component={Link}\n          onClick={handleCloseDrawer}\n          to=\"/\"\n        >\n          evelook\n        </Typography>\n      </div>\n      <Divider />\n      <List>\n        <ListItem\n          button\n          component={Link}\n          to=\"/search\"\n          onClick={handleCloseDrawer}\n        >\n          <ListItemIcon>\n            <SearchIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Search\" />\n        </ListItem>\n      </List>\n      {\n        darkModeToggle\n      }\n    </div>\n  );\n\n  const container = window !== undefined ? () => window().document.body : undefined;\n\n  return (\n    <div className={classes.root}>\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden lgUp implementation=\"css\">\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleCloseDrawer}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden mdDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route exact path=\"/search\">\n          <Search />\n        </Route>\n        <Route path=\"/alliance/:id\">\n          <AllianceInfo />\n        </Route>\n        <Route path=\"/ancestry/:id\">\n          <AncestryInfo />\n        </Route>\n        <Route path=\"/bloodline/:id\">\n          <BloodlineInfo />\n        </Route>\n        <Route path=\"/character/:id\">\n          <CharacterInfo />\n        </Route>\n        <Route path=\"/constellation/:id\">\n          <ConstellationInfo />\n        </Route>\n        <Route path=\"/corporation/:id\">\n          <CorporationInfo />\n        </Route>\n        <Route path=\"/type/:id\">\n          <TypeInfo />\n        </Route>\n        <Route path=\"/race/:id\">\n          <RaceInfo />\n        </Route>\n        <Route path=\"/region/:id\">\n          <RegionInfo />\n        </Route>\n        <Route path=\"/system/:id\">\n          <SystemInfo />\n        </Route>\n        <Route path=\"/station/:id\">\n          <StationInfo />\n        </Route>\n        <Route path=\"/faction/:id\">\n          <FactionInfo />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { useSelector } from 'react-redux';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport Dashboard from \"../Dashboard/Dashboard\";\n\nconst theme = (darkMode: boolean) => createMuiTheme({\n  palette: {\n    primary: {\n      main: '#263238',\n    },\n    secondary: {\n      main: '#607d8b',\n    },\n    type: darkMode ? 'dark' : 'light',\n  },\n});\n\nfunction MyApp() {\n  // @ts-ignore\n  const darkMode = useSelector(state => state.theme.darkMode);\n\n  return (\n    <ThemeProvider theme={theme(darkMode)}>\n      <CssBaseline />\n      <Dashboard />\n    </ThemeProvider>\n  );\n}\n\nexport default MyApp;\n","const initialState = {\n  mobileOpen: false,\n}\n\nexport default function drawerReducer(\n  state = initialState,\n  action: {type: string, payload?: any}\n) {\n  switch (action.type) {\n    case 'drawer/mobileOpen': {\n      return {\n        ...state,\n        mobileOpen: true,\n      };\n    }\n    case 'drawer/mobileClose': {\n      return {\n        ...state,\n        mobileOpen: false\n      };\n    }\n    default:\n      return state;\n  }\n}\n","const initialState = {\n  darkMode: false,\n}\n\nexport default function themeReducer(\n  state = initialState,\n  action: {type: string, payload?: any}\n) {\n  switch (action.type) {\n    case 'theme/changeMode': {\n      return {\n        ...state,\n        darkMode: !state.darkMode,\n      };\n    }\n    default:\n      return state;\n  }\n}","import {combineReducers} from 'redux';\n\nimport drawerReducer from './feature/drawer/drawerSlice';\nimport themeReducer from './feature/theme/themeSlice';\n\nconst rootReducer = combineReducers({\n  // keys of this object will become the keys of the root state object\n  drawer: drawerReducer,\n  theme: themeReducer,\n});\n\nexport default rootReducer;\n","import {createStore} from 'redux';\n\nimport rootReducer from \"./reducer\";\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import EsiClientInterface from \"./EsiClientInterface\";\nimport EsiErrorManagerInterface from \"../EsiErrorManager/EsiErrorManagerInterface\";\nimport Query from \"../QueryFactory/Query\";\n\nclass EsiClient implements EsiClientInterface {\n  private readonly _baseUrl = \"https://esi.evetech.net\";\n  private readonly _userAgent = \"evelook\";\n  private readonly _fetchClient;\n  private readonly _esiErrorManager;\n\n  constructor(\n    fetchClient: (\n      input: RequestInfo,\n      init?: RequestInit\n    ) => Promise<Response>,\n    esiErrorManager: EsiErrorManagerInterface\n  ) {\n    this._fetchClient = fetchClient;\n    this._esiErrorManager = esiErrorManager;\n  }\n\n  /**\n   * @throws Error On network error or broken error window.\n   */\n  public async getResponse(\n    endUrl: string,\n    method: \"GET\" | \"POST\" | \"DELETE\" | \"PUT\",\n    query: Query | null = null,\n    body: object | null = null\n  ): Promise<Response> {\n    if (this._esiErrorManager.isErrorWindowBroken()) {\n      throw new Error(\"Aborting, too many errors.\");\n    }\n\n    let headers = {\n      \"X-User-Agent\": this._userAgent,\n    };\n\n    let options: RequestInit = {\n      method: method,\n      cache: \"default\",\n      headers: headers\n    };\n\n    let uri = `${this._baseUrl}${endUrl}`;\n    if (query !== null && !query.isEmpty()) {\n      uri = uri.concat(`?${query.toString()}`);\n    }\n\n    if (body !== null) {\n      options[\"body\"] = JSON.stringify(body);\n    }\n\n    let response = await this._fetchClient(uri, options);\n    this._esiErrorManager.saveErrorWindowInfo(response.headers);\n    if (!response.ok) {\n      if (response.status === 420) {  // We are error limited\n        this._esiErrorManager.flagWindowAsBroken();\n      } else {\n        this._esiErrorManager.incrementError();\n      }\n    }\n\n    return response;\n  }\n}\n\nexport default EsiClient;\n","import EsiErrorManagerInterface from \"./EsiErrorManagerInterface\";\n\nclass EsiErrorManager implements EsiErrorManagerInterface {\n  private _errorReset = Date.now() + 60000;\n  private _errorRemain = 100;\n\n  public isErrorWindowBroken(): boolean {\n    if (this._errorReset < Date.now()) {\n      this._resetErrorWindow();\n    }\n\n    return this._errorRemain <= 1;\n  }\n\n  public incrementError(): void {\n    this._errorRemain--;\n  }\n\n  public saveErrorWindowInfo(headers: Headers): void {\n    let limitReset = headers.get(\"x-esi-error-limit-reset\");\n    let limitRemain = headers.get(\"x-esi-error-limit-remain\");\n    if (limitReset === null || limitRemain === null) {\n      return;\n    }\n\n    let headerErrorReset = Number(limitReset);\n    let headerErrorRemain = Number(limitRemain);\n\n    this._errorReset = Date.now() + (headerErrorReset * 1000);\n    if (headerErrorRemain < this._errorRemain) {\n      this._errorRemain = headerErrorRemain;\n    }\n  }\n\n  public flagWindowAsBroken(): void {\n    this._errorRemain = 0;\n  }\n\n  private _resetErrorWindow(): void {\n    this._errorReset = Date.now() + 60000;\n    this._errorRemain = 100;\n  }\n}\n\nexport default EsiErrorManager;\n","import QueryDictionaryInterface from \"./QueryDictionaryInterface\";\n\nclass Query  {\n  private readonly _spaceDelimiter;\n  private _query: QueryDictionaryInterface = {};\n\n  constructor(spaceDelimiter: string = \",\") {\n    this._spaceDelimiter = spaceDelimiter;\n  }\n\n  add(attribute: string, values: string[]): void {\n    this._query[attribute] = values;\n  }\n\n  isEmpty(): boolean {\n    return Object.keys(this._query).length === 0;\n  }\n\n  toString(): string {\n    let queryString = \"\";\n\n    for (let attribute in this._query) {\n      if (!this._query.hasOwnProperty(attribute)) {\n        continue;\n      }\n\n      if (queryString.length > 0) {\n        queryString = queryString.concat(\"&\");\n      }\n\n      let values = \"\";\n      this._query[attribute].forEach((value, index) => {\n        if (index > 0) {\n          values = values.concat(this._spaceDelimiter);\n        }\n\n        values = values.concat(encodeURIComponent(value));\n      });\n\n      queryString = queryString.concat(`${attribute}=${values}`);\n    }\n\n    return queryString;\n  }\n}\n\nexport default Query;\n","import Query from \"./Query\";\n\nclass QueryFactory {\n  public make(): Query {\n    return new Query();\n  }\n}\n\nexport default QueryFactory;\n","class EsiError extends Error {\n  constructor(response: Response) {\n    super(`Esi error code ${response.status}: ${response.statusText}`);\n  }\n}\n\nexport default EsiError;\n","import EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiStatusInterface from \"./EsiStatusInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\nimport StatusCallInterface from \"./StatusCallInterface\";\n\nclass StatusCall implements StatusCallInterface{\n  private readonly _esiClient;\n  private readonly _url = \"/v2/status/\";\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  async get(): Promise<EsiStatusInterface> {\n    let response = await this._esiClient.getResponse(this._url, \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n}\n\nexport default StatusCall;\n","import UniverseNamesCallInterface from \"./UniverseNamesCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\nimport EsiUniverseNamesInterface from \"./EsiUniverseNamesInterface\";\n\nclass UniverseNamesCall implements UniverseNamesCallInterface {\n  private readonly _esiClient;\n  private readonly _url = \"/v3/universe/names/\";\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  async get(ids: number[]): Promise<EsiUniverseNamesInterface[]> {\n    let response = await this._esiClient.getResponse(\n      this._url,\n      \"POST\",\n      null,\n      ids\n    );\n\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n}\n\nexport default UniverseNamesCall;\n","import AllianceListCallInterface from \"./AllianceListCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass AllianceListCall implements AllianceListCallInterface {\n  private readonly _esiClient;\n  private readonly _url = \"/v2/alliances/\";\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  async get(): Promise<number[]> {\n    let response = await this._esiClient.getResponse(this._url, \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n}\n\nexport default AllianceListCall;\n","import AllianceInfoCallInterface from \"./AllianceInfoCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\nimport EsiAllianceInfoInterface from \"./EsiAllianceInfoInterface\";\n\nclass AllianceInfoCall implements AllianceInfoCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  async get(id: number): Promise<EsiAllianceInfoInterface> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v4/alliances/${id}/`;\n  }\n}\n\nexport default AllianceInfoCall;\n","import NameRepositoryInterface from \"./NameRepositoryInterface\";\nimport UniverseNamesCallInterface from \"../../service/Call/UniverseNamesCall/UniverseNamesCallInterface\";\nimport EsiUniverseNamesInterface from \"../../service/Call/UniverseNamesCall/EsiUniverseNamesInterface\";\n\nclass NameRepository implements NameRepositoryInterface {\n  private readonly _universeNamesCaller;\n\n  constructor(universeNamesCaller: UniverseNamesCallInterface) {\n    this._universeNamesCaller = universeNamesCaller;\n  }\n\n  public async resolveGeneric(ids: number[]): Promise<EsiUniverseNamesInterface[]> {\n    this._removeBannedIDs(ids);\n\n    let allResolvedIDs: EsiUniverseNamesInterface[] = [];\n    let failuresCount = 0;\n    let maxAllowedFailures = 20;\n\n    let chunks: number[][] = [];\n    while (ids.length > 0) {\n      chunks.push(ids.splice(0, 999));\n    }\n\n    for (let chunk of chunks) {\n      if (failuresCount >= maxAllowedFailures) {\n        throw new Error(\"\");  // TODO\n      }\n\n      try {\n        let localResolvedIDs = await this._universeNamesCaller.get(chunk);\n        allResolvedIDs = allResolvedIDs.concat(localResolvedIDs);\n      } catch (e) {\n        failuresCount++;\n\n        if (chunk.length > 1) {\n          // We split the chunk in half for retries\n          chunks.push(chunk.splice(0, Math.round(chunk.length / 2)));\n          chunks.push(chunk);\n        }\n      }\n    }\n\n    return allResolvedIDs;\n  }\n\n  private _removeBannedIDs(ids: number[]): void {\n    let index = ids.indexOf(1);\n    if (index !== -1) {\n      ids.splice(index, 1);\n    }\n  }\n}\n\nexport default NameRepository;\n","import AllianceCorporationsCallInterface from \"./AllianceCorporationsCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass AllianceCorporationsCall implements AllianceCorporationsCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  async get(id: number): Promise<number[]> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v2/alliances/${id}/corporations/`;\n  }\n}\n\nexport default AllianceCorporationsCall;\n","import EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiPublicSearchInterface from \"./EsiPublicSearchInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\nimport QueryFactoryInterface from \"../../QueryFactory/QueryFactoryInterface\";\nimport PublicSearchCallInterface from \"./PublicSearchCallInterface\";\nimport EsiCategory from \"./EsiCategory\";\n\nclass PublicSearchCall implements PublicSearchCallInterface {\n  private readonly _esiClient;\n  private readonly _queryFactory;\n  private readonly _url = \"/v2/search/\";\n\n  constructor(\n    esiClient: EsiClientInterface,\n    queryFactory: QueryFactoryInterface\n  ) {\n    this._esiClient = esiClient;\n    this._queryFactory = queryFactory;\n  }\n\n  /**\n   * @throws Error\n   */\n  async get(\n    searchString: string,\n    categories: EsiCategory[],\n    strict?: boolean\n  ): Promise<EsiPublicSearchInterface> {\n    let query = this._queryFactory.make();\n    query.add(\"search\", [searchString]);\n    query.add(\"categories\", categories);\n    if (strict !== undefined) {\n      query.add(\"strict\", [String(strict)]);\n    }\n\n    let response = await this._esiClient.getResponse(this._url, \"GET\", query);\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n}\n\nexport default PublicSearchCall;\n","import AllianceListCallInterface from \"../../service/Call/AllianceListCall/AllianceListCallInterface\";\nimport NameRepositoryInterface from \"../NameRepository/NameRepositoryInterface\";\nimport AllianceRepositoryInterface from \"./AllianceRepositoryInterface\";\nimport AllianceInfoCallInterface from \"../../service/Call/AllianceInfoCall/AllianceInfoCallInterface\";\nimport RepoAllianceInterface from \"./RepoAllianceInterface\";\nimport AllianceCorporationsCallInterface\n  from \"../../service/Call/AllianceCorporationsCall/AllianceCorporationsCallInterface\";\n\nclass AllianceRepository implements AllianceRepositoryInterface {\n  private readonly _allianceListCall;\n  private readonly _allianceInfoCall;\n  private readonly _allianceCorpsCall;\n  private readonly _nameRepo;\n\n  constructor(\n    allianceListCall: AllianceListCallInterface,\n    allianceInfoCall: AllianceInfoCallInterface,\n    allianceCorpsCall: AllianceCorporationsCallInterface,\n    nameRepo: NameRepositoryInterface\n  ) {\n    this._allianceListCall = allianceListCall;\n    this._allianceInfoCall = allianceInfoCall;\n    this._allianceCorpsCall = allianceCorpsCall;\n    this._nameRepo = nameRepo;\n  }\n\n  public async getOne(id: number): Promise<RepoAllianceInterface> {\n    let esiAlliancePromise = this._allianceInfoCall.get(id);\n    let esiAllianceCorpsPromise = this._allianceCorpsCall.get(id);\n\n    let esiAlliance = await esiAlliancePromise;\n    let repoAlliance: RepoAllianceInterface = {\n      ...esiAlliance,\n      id: id,\n      creator_corporation_name: \"#error\",\n      creator_name: \"#error\",\n      executor_corporation_name: undefined,\n      faction_name: undefined,\n      corporations: {}\n    };\n\n    let {\n      creator_corporation_id,\n      creator_id,\n      executor_corporation_id,\n      faction_id\n    } = esiAlliance;\n    let idsToResolve: number[] = [];\n    this._pushUnique(idsToResolve, creator_corporation_id);\n    this._pushUnique(idsToResolve, creator_id);\n    if (executor_corporation_id !== undefined) {\n      this._pushUnique(idsToResolve, executor_corporation_id);\n    }\n    if (faction_id !== undefined) {\n      this._pushUnique(idsToResolve, faction_id);\n    }\n\n    let esiAllianceCorps = await esiAllianceCorpsPromise;\n    let corpsNamesPromise = this._nameRepo.resolveGeneric(esiAllianceCorps);\n    let allianceNamesPromise = this._nameRepo.resolveGeneric(idsToResolve);\n\n    let allianceNames = await allianceNamesPromise;\n    allianceNames.forEach(resolvedName => {\n      let { id, name } = resolvedName;\n      if (id === creator_corporation_id) {\n        repoAlliance.creator_corporation_name = name;\n      }\n      if (id === creator_id) {\n        repoAlliance.creator_name = name;\n      }\n      if (id === executor_corporation_id) {\n        repoAlliance.executor_corporation_name = name;\n      }\n      if (id === faction_id) {\n        repoAlliance.faction_name = name;\n      }\n    });\n\n    let corpsNames = await corpsNamesPromise;\n    corpsNames.forEach(corpName => {\n      repoAlliance.corporations[corpName.id] = corpName.name;\n    });\n\n    return repoAlliance;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getList(): Promise<{\n    [key: string]: string\n  }> {\n    let allianceIDs = await this._allianceListCall.get();\n    let names = await this._nameRepo.resolveGeneric(allianceIDs);\n\n    let resolved: { [key: string]: string } = {};\n    names.forEach(({id, name}) => {\n      resolved[id] = name;\n    });\n\n    let unresolved: number[] = [];\n    allianceIDs.forEach(id => {\n      if (!resolved.hasOwnProperty(id)) {\n        unresolved.push(id);\n      }\n    });\n    unresolved.forEach(id => {\n      resolved[id] = `UNRESOLVED#${id}`;\n    });\n\n    return resolved;\n  }\n\n  private _pushUnique(inputArray: number[], value: number): number[] {\n    if (!inputArray.includes(value)) {\n      inputArray.push(value);\n    }\n\n    return inputArray;\n  }\n}\n\nexport default AllianceRepository;\n","const categoriesForType = [\"agent\", \"alliance\", \"character\", \"constellation\", \"corporation\", \"faction\", \"inventory_type\", \"region\", \"solar_system\", \"station\"] as const;\ntype EsiCategory = typeof categoriesForType[number];\nconst esiCategories: EsiCategory[] = [\"agent\", \"alliance\", \"character\", \"constellation\", \"corporation\", \"faction\", \"inventory_type\", \"region\", \"solar_system\", \"station\"];\n\nexport default EsiCategory;\nexport { esiCategories };","import SearchRepositoryInterface from \"./SearchRepositoryInterface\";\nimport NameRepositoryInterface from \"../NameRepository/NameRepositoryInterface\";\nimport PublicSearchCallInterface from \"../../service/Call/PublicSearchCall/PublicSearchCallInterface\";\nimport RepoCategory from \"./RepoCategory\";\nimport EsiCategory, {esiCategories} from \"../../service/Call/PublicSearchCall/EsiCategory\";\nimport EsiUniverseNamesInterface from \"../../service/Call/UniverseNamesCall/EsiUniverseNamesInterface\";\nimport ResultWithLinkInterface from \"./ResulWithLinkInterface\";\n\nclass SearchRepository implements SearchRepositoryInterface {\n  private readonly _nameRepo;\n  private readonly _publicSearchCall;\n\n  constructor(\n    nameRepo: NameRepositoryInterface,\n    publicSearchCall: PublicSearchCallInterface\n  ) {\n    this._nameRepo = nameRepo;\n    this._publicSearchCall = publicSearchCall;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async publicSearch(\n    searchString: string,\n    category: RepoCategory,\n    strict: boolean\n  ): Promise<ResultWithLinkInterface[]> {\n    let categoriesForCall: EsiCategory[];\n    if (category === \"all\") {\n      categoriesForCall = esiCategories;\n    } else {\n      categoriesForCall = [category];\n    }\n    let search = await this._publicSearchCall.get(searchString, categoriesForCall, strict);\n\n    let ids: number[] = [];\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (let [key, value] of Object.entries(search)) {\n      ids = ids.concat(value);\n    }\n    let names = await this._nameRepo.resolveGeneric(ids);\n\n    return this._composeResult(names);\n  }\n\n  private _composeResult(names: EsiUniverseNamesInterface[]): ResultWithLinkInterface[] {\n    let result: ResultWithLinkInterface[] = [];\n    names.forEach(name => {\n      let prettyCategory;\n      let link;\n      switch (name.category) {\n        case \"alliance\":\n          prettyCategory = \"Alliance\";\n          link = \"/alliance/\";\n          break;\n        case \"character\":\n          prettyCategory = \"Character\";\n          link = \"/character/\";\n          break;\n        case \"constellation\":\n          prettyCategory = \"Constellation\";\n          //link = \"/constellation/\";\n          link = null;\n          break;\n        case \"corporation\":\n          prettyCategory = \"Corporation\";\n          link = \"/corporation/\";\n          break;\n        case \"inventory_type\":\n          prettyCategory = \"Item\";\n          //link = \"/type/\";\n          link = null;\n          break;\n        case \"region\":\n          prettyCategory = \"Region\";\n          //link = \"/region/\";\n          link = null;\n          break;\n        case \"solar_system\":\n          prettyCategory = \"System\";\n          //link = \"/system/\";\n          link = null;\n          break;\n        case \"station\":\n          prettyCategory = \"Station\";\n          //link = \"/station/\";\n          link = null\n          break;\n        case \"faction\":\n          prettyCategory = \"Faction\";\n          //link = \"/faction/\";\n          link = null;\n          break;\n        default:\n          prettyCategory = name.category;\n          link = null;\n      }\n\n      result.push({\n        ...name,\n        prettyCategory: prettyCategory,\n        link: link\n      });\n    });\n\n    return result;\n  }\n}\n\nexport default SearchRepository;\n","import CharacterInfoCallInterface from \"./CharacterInfoCallInterface\";\nimport EsiCharacterInfoInterface from \"./EsiCharacterInfoInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass CharacterInfoCall implements CharacterInfoCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(id: number): Promise<EsiCharacterInfoInterface> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v4/characters/${id}/`;\n  }\n}\n\nexport default CharacterInfoCall;\n","import ConstellationInfoCallInterface from \"./ConstellationInfoCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiConstellationInfoInterface from \"./EsiConstellationInfoInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass ConstellationInfoCall implements ConstellationInfoCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  public async get(id: number): Promise<EsiConstellationInfoInterface> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v1/universe/constellations/${id}/`;\n  }\n}\n\nexport default ConstellationInfoCall;\n","import CorporationInfoCallInterface from \"./CorporationInfoCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiCorporationInfoInterface from \"./EsiCorporationInfoInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass CorporationInfoCall implements CorporationInfoCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(id: number): Promise<EsiCorporationInfoInterface> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v5/corporations/${id}/`;\n  }\n}\n\nexport default CorporationInfoCall;\n","import TypeInfoCallInterface from \"./TypeInfoCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiTypeInfoInterface from \"./EsiTypeInfoInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass TypeInfoCall implements TypeInfoCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(id: number): Promise<EsiTypeInfoInterface> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v3/universe/types/${id}/`;\n  }\n}\n\nexport default TypeInfoCall;\n","import RegionInfoCallInterface from \"./RegionInfoCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiRegionInfoInterface from \"./EsiRegionInfoInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass RegionInfoCall implements RegionInfoCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(id: number): Promise<EsiRegionInfoInterface> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v1/universe/regions/${id}/`;\n  }\n}\n\nexport default RegionInfoCall;\n","import SystemInfoCallInterface from \"./SystemInfoCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiSystemInfoInterface from \"./EsiSystemInfoInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass SystemInfoCall implements SystemInfoCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(id: number): Promise<EsiSystemInfoInterface> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v4/universe/systems/${id}/`;\n  }\n}\n\nexport default SystemInfoCall;\n","import StationInfoCallInterface from \"./StationInfoCallInterface\";\nimport EsiStationInfoInterface from \"./EsiStationInfoInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass StationInfoCall implements StationInfoCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  public async get(id: number): Promise<EsiStationInfoInterface> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v2/universe/stations/${id}/`;\n  }\n}\n\nexport default StationInfoCall;\n","import FactionCallInterface from \"./FactionCallInterface\";\nimport EsiFactionInterface from \"./EsiFactionInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass FactionCall implements FactionCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(): Promise<EsiFactionInterface[]> {\n    let response = await this._esiClient.getResponse(this._getUrl(), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(): string {\n    return `/v2/universe/factions/`;\n  }\n}\n\nexport default FactionCall;\n","import AncestryCallInterface from \"./AncestryCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiAncestryInterface from \"./EsiAncestryInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass AncestryCall implements AncestryCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(): Promise<EsiAncestryInterface[]> {\n    let response = await this._esiClient.getResponse(this._getUrl(), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(): string {\n    return `/v1/universe/ancestries/`;\n  }\n}\n\nexport default AncestryCall;\n","import BloodlineCallInterface from \"./BloodlineCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiBloodlineInterface from \"./EsiBloodlineInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass BloodlineCall implements BloodlineCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(): Promise<EsiBloodlineInterface[]> {\n    let response = await this._esiClient.getResponse(this._getUrl(), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(): string {\n    return `/v1/universe/bloodlines/`;\n  }\n}\n\nexport default BloodlineCall;\n","import AncestryRepositoryInterface from \"./AncestryRepositoryInterface\";\nimport EsiAncestryInterface from \"../../service/Call/AncestryCall/EsiAncestryInterface\";\nimport AncestryCallInterface from \"../../service/Call/AncestryCall/AncestryCallInterface\";\n\nclass AncestryRepository implements AncestryRepositoryInterface {\n  private readonly _ancestryCall;\n\n  constructor(ancestryCall: AncestryCallInterface) {\n    this._ancestryCall = ancestryCall;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getName(id: number): Promise<string> {\n    let ancestries = await this._ancestryCall.get();\n    let foundAncestry: EsiAncestryInterface | null = null;\n    for (let ancestry of ancestries) {\n      if (ancestry.id === id) {\n        foundAncestry = ancestry;\n        break;\n      }\n    }\n\n    if (foundAncestry === null) {\n      throw new Error(\"Ancestry not found\");\n    }\n\n    return foundAncestry.name;\n  }\n}\n\nexport default AncestryRepository;\n","import EsiUniverseNamesInterface from \"../../service/Call/UniverseNamesCall/EsiUniverseNamesInterface\";\n\nabstract class AbstractRepository {\n  protected _pushUnique(inputArray: number[], value: number): number[] {\n    if (!inputArray.includes(value)) {\n      inputArray.push(value);\n    }\n\n    return inputArray;\n  }\n\n  protected _orderNamesByID(\n    names: EsiUniverseNamesInterface[]\n  ): {\n    [key: string]: EsiUniverseNamesInterface\n  } {\n    let orderedNames: {[key: string]: EsiUniverseNamesInterface} = {};\n    names.forEach(name => {\n      orderedNames[String(name.id)] = name;\n    });\n\n    return orderedNames;\n  }\n}\n\nexport default AbstractRepository;\n","import BloodlineRepositoryInterface from \"./BloodlineRepositoryInterface\";\nimport BloodlineCallInterface from \"../../service/Call/BloodlineCall/BloodlineCallInterface\";\nimport EsiBloodlineInterface from \"../../service/Call/BloodlineCall/EsiBloodlineInterface\";\nimport RepoBloodlineInterface from \"./RepoBloodlineInterface\";\nimport RaceRepositoryInterface from \"../RaceRepository/RaceRepositoryInterface\";\nimport NameRepositoryInterface from \"../NameRepository/NameRepositoryInterface\";\nimport AbstractRepository from \"../AbstractRepository/AbstractRepository\";\nimport EsiUniverseNamesInterface from \"../../service/Call/UniverseNamesCall/EsiUniverseNamesInterface\";\n\nclass BloodlineRepository extends AbstractRepository implements BloodlineRepositoryInterface {\n  private readonly _bloodlineCall;\n  private readonly _raceRepo;\n  private readonly _nameRepo;\n\n  constructor(\n    bloodlineCall: BloodlineCallInterface,\n    raceRepo: RaceRepositoryInterface,\n    nameRepo: NameRepositoryInterface\n  ) {\n    super();\n    this._bloodlineCall = bloodlineCall;\n    this._raceRepo = raceRepo;\n    this._nameRepo = nameRepo;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getAll(): Promise<RepoBloodlineInterface[]> {\n    return [];\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getOne(id: number): Promise<RepoBloodlineInterface> {\n    let foundBloodline = await this._getEsiBloodline(id);\n    let {\n      race_id,\n      corporation_id,\n      ship_type_id\n    } = foundBloodline;\n\n    let raceNamePromise = this._raceRepo.getName(race_id);\n\n    let idsToResolve = this._getIDsToResolve([foundBloodline]);\n    let indexedNames: {[key: string]: EsiUniverseNamesInterface} = {};\n    if (idsToResolve.length > 0) {\n      indexedNames = this._orderNamesByID(await this._nameRepo.resolveGeneric(idsToResolve));\n    }\n\n    let ship_type_name = undefined;\n    if (ship_type_id !== undefined && ship_type_id !== null) {\n      ship_type_name = indexedNames[ship_type_id].name ?? \"#error\";\n    }\n\n    return {\n      ...foundBloodline,\n      corporation_name: indexedNames[corporation_id].name ?? \"#error\",\n      race_name: await raceNamePromise,\n      ship_type_name: ship_type_name\n    }\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getName(id: number): Promise<string> {\n    let foundBloodline = await this._getEsiBloodline(id);\n\n    return foundBloodline.name;\n  }\n\n  private _getIDsToResolve(bloodlines: EsiBloodlineInterface[]): number[] {\n    let idsToResolve: number[] = [];\n\n    bloodlines.forEach(bloodline => {\n      let {\n        corporation_id,\n        ship_type_id\n      } = bloodline;\n      this._pushUnique(idsToResolve, corporation_id);\n      if (ship_type_id !== undefined && ship_type_id !== null) {\n        this._pushUnique(idsToResolve, ship_type_id);\n      }\n    });\n\n    return idsToResolve;\n  }\n\n  /**\n   * @throws Error\n   */\n  private async _getEsiBloodline(id: number): Promise<EsiBloodlineInterface> {\n    let bloodlines = await this._bloodlineCall.get();\n    let foundBloodline: EsiBloodlineInterface | null = null;\n    for (let bloodline of bloodlines) {\n      if (bloodline.bloodline_id === id) {\n        foundBloodline = bloodline;\n        break;\n      }\n    }\n\n    if (foundBloodline === null) {\n      throw new Error(\"Bloodline not found\");\n    }\n\n    return foundBloodline;\n  }\n}\n\nexport default BloodlineRepository;\n","import CharacterRepositoryInterface from \"./CharacterRepositoryInterface\";\nimport RepoCharacterInterface from \"./RepoCharacterInterface\";\nimport AncestryRepositoryInterface from \"../AncestryRepository/AncestryRepositoryInterface\";\nimport CharacterInfoCallInterface from \"../../service/Call/CharacterInfoCall/CharacterInfoCallInterface\";\nimport BloodlineRepositoryInterface from \"../BloodlineRepository/BloodlineRepositoryInterface\";\nimport NameRepositoryInterface from \"../NameRepository/NameRepositoryInterface\";\nimport RaceRepositoryInterface from \"../RaceRepository/RaceRepositoryInterface\";\nimport CharacterCorpHistoryCallInterface\n  from \"../../service/Call/CharacterCorpHistoryCall/CharacterCorpHistoryCallInterface\";\nimport RepoCharacterCorpHistoryInterface from \"./RepoCharacterCorpHistoryInterface\";\n\nclass CharacterRepository implements CharacterRepositoryInterface {\n  private readonly _characterInfoCall;\n  private readonly _characterCorpHistoryCall;\n  private readonly _ancestryRepo;\n  private readonly _bloodlineRepo;\n  private readonly _nameRepo;\n  private readonly _raceRepo;\n\n  constructor(\n    characterInfoCall: CharacterInfoCallInterface,\n    characterCorpHistoryCall: CharacterCorpHistoryCallInterface,\n    ancestryRepo: AncestryRepositoryInterface,\n    bloodlineRepo: BloodlineRepositoryInterface,\n    nameRepo: NameRepositoryInterface,\n    raceRepo: RaceRepositoryInterface\n  ) {\n    this._characterInfoCall = characterInfoCall;\n    this._characterCorpHistoryCall = characterCorpHistoryCall;\n    this._ancestryRepo = ancestryRepo;\n    this._bloodlineRepo = bloodlineRepo;\n    this._nameRepo = nameRepo;\n    this._raceRepo = raceRepo;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getOne(id: number): Promise<RepoCharacterInterface> {\n    let esiCharPromise = this._characterInfoCall.get(id);\n    let repoCorpHistoryPromise = this._getCorpHistory(id);\n    let esiChar = await esiCharPromise;\n    let repoChar: RepoCharacterInterface = {\n      ...esiChar,\n      alliance_name: esiChar.alliance_id === undefined ? undefined : \"#error\",\n      ancestry_name: esiChar.ancestry_id === undefined ? undefined : \"#error\",\n      bloodline_name: \"#error\",\n      corporation_name: \"#name\",\n      faction_name: esiChar.faction_id === undefined ? undefined : \"#error\",\n      race_name: \"#error\",\n      id: id,\n      corporation_history: []\n    }\n\n    let {\n      alliance_id,\n      ancestry_id,\n      bloodline_id,\n      corporation_id,\n      faction_id,\n      race_id\n    } = esiChar;\n    let idsToResolve: number[] = [];\n    idsToResolve.push(corporation_id);\n    if (alliance_id !== undefined) {\n      idsToResolve.push(alliance_id);\n    }\n    if (faction_id !== undefined) {\n      idsToResolve.push(faction_id);\n    }\n\n    let ancestryPromise = null; // Because ancestry is optional\n    if (ancestry_id !== undefined) {\n      ancestryPromise = this._ancestryRepo.getName(ancestry_id);\n    }\n    let bloodlinePromise = this._bloodlineRepo.getName(bloodline_id);\n    let namesPromise = this._nameRepo.resolveGeneric(idsToResolve);\n    let racePromise = this._raceRepo.getName(race_id);\n\n    if (ancestryPromise !== null) {\n      try {\n        repoChar.ancestry_name = await ancestryPromise;\n      } catch (e) {\n        // Intentionally left blank, it's a call of secondary importance\n      }\n    }\n    try {\n      repoChar.bloodline_name = await bloodlinePromise;\n    } catch (e) {\n      // Intentionally left blank, it's a call of secondary importance\n    }\n    try {\n      repoChar.race_name = await racePromise;\n    } catch (e) {\n      // Intentionally left blank, it's a call of secondary importance\n    }\n    try {\n      let charNames = await namesPromise;\n      charNames.forEach(resolvedName => {\n        let { id, name } = resolvedName;\n        if (id === corporation_id) {\n          repoChar.corporation_name = name;\n        }\n        if (id === alliance_id) {\n          repoChar.alliance_name = name;\n        }\n        if (id === faction_id) {\n          repoChar.faction_name = name;\n        }\n      });\n    } catch (e) {\n      // Intentionally left blank, it's a call of secondary importance\n    }\n\n    repoChar.corporation_history = await repoCorpHistoryPromise;\n\n    return repoChar;\n  }\n\n  private async _getCorpHistory(id: number): Promise<RepoCharacterCorpHistoryInterface[]> {\n    let corpHistory = await this._characterCorpHistoryCall.get(id);\n    let idsToResolve: number[] = [];\n    corpHistory.forEach(corp => {\n      if (corp.is_deleted === undefined || !corp.is_deleted) {\n        idsToResolve = this._pushUnique(idsToResolve, corp.corporation_id);\n      }\n    });\n\n    let names = await this._nameRepo.resolveGeneric(idsToResolve);\n    let repoCorpHistory: RepoCharacterCorpHistoryInterface[] = [];\n    corpHistory.forEach(corp => {\n      let { corporation_id } = corp;\n      let foundName = `#${corporation_id}`;\n      for (let name of names) {\n        if (name.id === corporation_id) {\n          foundName = name.name;\n          break;\n        }\n      }\n\n      repoCorpHistory.push({\n        ...corp,\n        corporation_name: foundName\n      });\n    });\n\n    return repoCorpHistory;\n  }\n\n  private _pushUnique(inputArray: number[], value: number): number[] {\n    if (!inputArray.includes(value)) {\n      inputArray.push(value);\n    }\n\n    return inputArray;\n  }\n}\n\nexport default CharacterRepository;\n","import RaceCallInterface from \"./RaceCallInterface\";\nimport EsiRaceInterface from \"./EsiRaceInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass RaceCall implements RaceCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async get(): Promise<EsiRaceInterface[]> {\n    let response = await this._esiClient.getResponse(this._getUrl(), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(): string {\n    return `/v1/universe/races/`;\n  }\n}\n\nexport default RaceCall;\n","import RaceRepositoryInterface from \"./RaceRepositoryInterface\";\nimport RaceCallInterface from \"../../service/Call/RaceCall/RaceCallInterface\";\nimport EsiRaceInterface from \"../../service/Call/RaceCall/EsiRaceInterface\";\nimport RepoRaceInterface from \"./RepoRaceInterface\";\nimport NameRepositoryInterface from \"../NameRepository/NameRepositoryInterface\";\nimport AbstractRepository from \"../AbstractRepository/AbstractRepository\";\nimport FactionRepositoryInterface from \"../FactionRepository/FactionRepositoryInterface\";\n\nclass RaceRepository extends AbstractRepository implements RaceRepositoryInterface {\n  private readonly _raceCall;\n  private readonly _nameRepo;\n  private readonly _factionRepo;\n\n  constructor(\n    raceCall: RaceCallInterface,\n    nameRepo: NameRepositoryInterface,\n    factionRepo: FactionRepositoryInterface\n  ) {\n    super();\n    this._raceCall = raceCall;\n    this._nameRepo = nameRepo;\n    this._factionRepo = factionRepo;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getAll(): Promise<RepoRaceInterface[]> {\n    let esiRaces = await this._raceCall.get();\n    let idsToResolve: number[] = [];\n    let repoRaces: RepoRaceInterface[] = [];\n    esiRaces.forEach(esiRace => {\n      this._pushUnique(idsToResolve, esiRace.alliance_id);\n      repoRaces.push({\n        ...esiRace,\n        alliance_name: \"#error\",\n      });\n    });\n\n    let names = this._orderNamesByID(await this._nameRepo.resolveGeneric(idsToResolve));\n    repoRaces.forEach(repoRace => {\n      if (names[String(repoRace.alliance_id)] !== undefined) {\n        repoRace.alliance_name = names[String(repoRace.alliance_id)].name;\n      }\n    });\n\n    return repoRaces;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getOne(id: number): Promise<RepoRaceInterface> {\n    let foundRace = await this._getEsiRace(id);\n\n    return {\n      ...foundRace,\n      alliance_name: await this._factionRepo.getName(foundRace.alliance_id)\n    };\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getName(id: number): Promise<string> {\n    let foundRace = await this._getEsiRace(id);\n\n    return foundRace.name;\n  }\n\n  /**\n   * @throws Error\n   */\n  private async _getEsiRace(id: number): Promise<EsiRaceInterface> {\n    let races = await this._raceCall.get();\n    let foundRace: EsiRaceInterface | null = null;\n    for (let race of races) {\n      if (race.race_id === id) {\n        foundRace = race;\n        break;\n      }\n    }\n\n    if (foundRace === null) {\n      throw new Error(\"Race not found\");\n    }\n\n    return foundRace;\n  }\n}\n\nexport default RaceRepository;\n","import CharacterCorpHistoryCallInterface from \"./CharacterCorpHistoryCallInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiCharacterCorpHistoryInterface from \"./EsiCharacterCorpHistoryInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass CharacterCorpHistoryCall implements CharacterCorpHistoryCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  public async get(id: number): Promise<EsiCharacterCorpHistoryInterface[]> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v1/characters/${id}/corporationhistory/`;\n  }\n}\n\nexport default CharacterCorpHistoryCall;\n","import DateFormatterInterface from \"./DateFormatterInterface\";\n\nclass DateFormatter implements DateFormatterInterface {\n  public withDateTime(date: Date): string {\n    let yyyy = `${date.getUTCFullYear()}`;\n    let mm = this.toStringWithLeadingZero(date.getUTCMonth() + 1);\n    let dd = this.toStringWithLeadingZero(date.getUTCDate());\n    let hr = this.toStringWithLeadingZero(date.getUTCHours());\n    let min = this.toStringWithLeadingZero(date.getUTCMinutes());\n    let sec = this.toStringWithLeadingZero(date.getUTCSeconds());\n\n    return `${yyyy}.${mm}.${dd} ${hr}:${min}:${sec}`;\n  }\n\n  private toStringWithLeadingZero(value: number): string {\n    if (value < 10) {\n      return `0${value}`;\n    }\n\n    return `${value}`;\n  }\n}\n\nexport default DateFormatter;\n","import CorporationAllianceHistoryCallInterface from \"./CorporationAllianceHistoryCallInterface\";\nimport EsiCorporationAllianceHistoryInterface from \"./EsiCorporationAllianceHistoryInterface\";\nimport EsiClientInterface from \"../../EsiClient/EsiClientInterface\";\nimport EsiError from \"../../../error/EsiError/EsiError\";\n\nclass CorporationAllianceHistoryCall implements CorporationAllianceHistoryCallInterface {\n  private readonly _esiClient;\n\n  constructor(esiClient: EsiClientInterface) {\n    this._esiClient = esiClient;\n  }\n\n  public async get(id: number): Promise<EsiCorporationAllianceHistoryInterface[]> {\n    let response = await this._esiClient.getResponse(this._getUrl(id), \"GET\");\n    if (!response.ok) {\n      throw new EsiError(response);\n    }\n\n    return response.json();\n  }\n\n  private _getUrl(id: number): string {\n    return `/v3/corporations/${id}/alliancehistory/`;\n  }\n}\n\nexport default CorporationAllianceHistoryCall;\n","import CorporationRepositoryInterface from \"./CorporationRepositoryInterface\";\nimport RepoCorporationInterface from \"./RepoCorporationInterface\";\nimport CorporationInfoCallInterface from \"../../service/Call/CorporationInfoCall/CorporationInfoCallInterface\";\nimport NameRepositoryInterface from \"../NameRepository/NameRepositoryInterface\";\nimport CorporationAllianceHistoryCallInterface\n  from \"../../service/Call/CorporationAllianceHistoryCall/CorporationAllianceHistoryCallInterface\";\nimport RepoCorpAllianceHistoryInterface from \"./RepoCorpAllianceHistoryInterface\";\n\nclass CorporationRepository implements CorporationRepositoryInterface {\n  private readonly _corpInfoCall;\n  private readonly _corpAllianceHistoryCall;\n  private readonly _nameRepo;\n\n  constructor(\n    corpInfoCall: CorporationInfoCallInterface,\n    corpAllianceHistoryCall: CorporationAllianceHistoryCallInterface,\n    nameRepo: NameRepositoryInterface\n  ) {\n    this._corpInfoCall = corpInfoCall;\n    this._corpAllianceHistoryCall = corpAllianceHistoryCall;\n    this._nameRepo = nameRepo;\n  }\n\n  public async getOne(id: number): Promise<RepoCorporationInterface> {\n    let allianceHistoryPromise = this.getAllianceHistory(id);\n\n    let esiCorp = await this._corpInfoCall.get(id);\n    let repoCorp: RepoCorporationInterface = {\n      ...esiCorp,\n      alliance_name: undefined,\n      ceo_name: \"#error\",\n      creator_name: \"#error\",\n      faction_name: undefined,\n      home_station_name: undefined,\n      alliance_history: [],\n      id: id,\n    };\n\n    let {\n      alliance_id,\n      ceo_id,\n      creator_id,\n      faction_id,\n      home_station_id\n    } = esiCorp;\n    let idsToResolve: number[] = [];\n    this._pushUnique(idsToResolve, ceo_id);\n    this._pushUnique(idsToResolve, creator_id);\n    if (alliance_id !== undefined) {\n      this._pushUnique(idsToResolve, alliance_id);\n    }\n    if (faction_id !== undefined) {\n      this._pushUnique(idsToResolve, faction_id);\n    }\n    if (home_station_id !== undefined) {\n      this._pushUnique(idsToResolve, home_station_id);\n    }\n\n    let corpNames = await this._nameRepo.resolveGeneric(idsToResolve);\n    corpNames.forEach(resolvedName => {\n      let { id, name } = resolvedName;\n\n      if (id === alliance_id) {\n        repoCorp.alliance_name = name;\n      }\n      if (id === ceo_id) {\n        repoCorp.ceo_name = name;\n      }\n      if (id === creator_id) {\n        repoCorp.creator_name = name;\n      }\n      if (id === faction_id) {\n        repoCorp.faction_name = name;\n      }\n      if (id === home_station_id) {\n        repoCorp.home_station_name = name;\n      }\n    });\n\n    repoCorp.alliance_history = await allianceHistoryPromise;\n\n    return repoCorp;\n  }\n\n  public async getAllianceHistory(id: number): Promise<RepoCorpAllianceHistoryInterface[]> {\n    let corpHistory = await this._corpAllianceHistoryCall.get(id);\n\n    let idsToResolve: number[] = [];\n    let recordIDs: number[] = [];\n    let indexedCorpHistory: { [key: string]: RepoCorpAllianceHistoryInterface } = {};\n    corpHistory.forEach(record => {\n      let allianceNamePlaceholder = undefined;\n      if (record.alliance_id !== undefined) {\n        idsToResolve = this._pushUnique(idsToResolve, record.alliance_id);\n        allianceNamePlaceholder = \"#error\";\n      }\n      recordIDs.push(record.record_id);\n      indexedCorpHistory[record.record_id] = {\n        ...record,\n        end_date: undefined,\n        alliance_name: allianceNamePlaceholder,\n      };\n    });\n    let names = await this._nameRepo.resolveGeneric(idsToResolve);\n\n    let historyToReturn: RepoCorpAllianceHistoryInterface[] = [];\n    recordIDs.sort((a, b) => a - b);\n    for (let i = 0; i < recordIDs.length; i++) {\n      let id = recordIDs[i];\n\n      // Add alliance name, if the record has the id\n      if (indexedCorpHistory[id].alliance_id !== undefined) {\n        for (let name of names) {\n          if (name.id === indexedCorpHistory[id].alliance_id) {\n            indexedCorpHistory[id].alliance_name = name.name;\n            break;\n          }\n        }\n      }\n\n      // Add end date, if the current record is an alliance, and the following is not\n      if (\n        indexedCorpHistory[id].alliance_id !== undefined\n        && i < recordIDs.length - 1\n        && indexedCorpHistory[recordIDs[i + 1]].alliance_id === undefined\n      ) {\n        indexedCorpHistory[id].end_date = indexedCorpHistory[recordIDs[i + 1]].start_date;\n      }\n\n      // Add to the elements to return if it's an alliance\n      if (indexedCorpHistory[id].alliance_id !== undefined) {\n        historyToReturn.unshift(indexedCorpHistory[id]);\n      }\n    }\n\n    return historyToReturn;\n  }\n\n  private _pushUnique(inputArray: number[], value: number): number[] {\n    if (!inputArray.includes(value)) {\n      inputArray.push(value);\n    }\n\n    return inputArray;\n  }\n}\n\nexport default CorporationRepository;\n","import FactionRepositoryInterface from \"./FactionRepositoryInterface\";\nimport RepoFactionInterface from \"./RepoFactionInterface\";\nimport AbstractRepository from \"../AbstractRepository/AbstractRepository\";\nimport FactionCallInterface from \"../../service/Call/FactionCall/FactionCallInterface\";\nimport NameRepositoryInterface from \"../NameRepository/NameRepositoryInterface\";\nimport EsiUniverseNamesInterface from \"../../service/Call/UniverseNamesCall/EsiUniverseNamesInterface\";\nimport EsiFactionInterface from \"../../service/Call/FactionCall/EsiFactionInterface\";\n\nclass FactionRepository extends AbstractRepository implements FactionRepositoryInterface {\n  private readonly _factionCall;\n  private readonly _nameRepo;\n\n  constructor(\n    factionCall: FactionCallInterface,\n    nameRepo: NameRepositoryInterface\n  ) {\n    super();\n    this._factionCall = factionCall;\n    this._nameRepo = nameRepo;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getAll(): Promise<RepoFactionInterface[]> {\n    let esiFactions = await this._factionCall.get();\n    let idsToResolve: number[] = this._getIDsToResolve(esiFactions);\n    let indexedNames: {[key: string]: EsiUniverseNamesInterface} = {}\n    if (idsToResolve.length > 0) {\n      indexedNames = this._orderNamesByID(await this._nameRepo.resolveGeneric(idsToResolve));\n    }\n\n    let repoFactions: RepoFactionInterface[] = [];\n    esiFactions.forEach(esiFaction => {\n      repoFactions.push(this._assembleRepoFaction(esiFaction, indexedNames));\n    });\n\n    return repoFactions;\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getOne(id: number): Promise<RepoFactionInterface> {\n    let foundFaction = await this._getEsiFaction(id);\n\n    let idsToResolve = this._getIDsToResolve([foundFaction]);\n    let indexedNames: {[key: string]: EsiUniverseNamesInterface} = {}\n    if (idsToResolve.length > 0) {\n      indexedNames = this._orderNamesByID(await this._nameRepo.resolveGeneric(idsToResolve));\n    }\n\n    return this._assembleRepoFaction(foundFaction, indexedNames);\n  }\n\n  /**\n   * @throws Error\n   */\n  public async getName(id: number): Promise<string> {\n    let foundFaction = await this._getEsiFaction(id);\n\n    return foundFaction.name;\n  }\n\n  /**\n   * @throws Error\n   */\n  private async _getEsiFaction(id: number): Promise<EsiFactionInterface> {\n    let esiFactions = await this._factionCall.get();\n    let foundFaction: EsiFactionInterface | null = null;\n    for (let esiFaction of esiFactions) {\n      if (esiFaction.faction_id === id) {\n        foundFaction = esiFaction;\n        break;\n      }\n    }\n    if (foundFaction === null) {\n      throw new Error(\"Faction not found\");\n    }\n\n    return foundFaction;\n  }\n\n  private _getIDsToResolve(factions: EsiFactionInterface[]): number[] {\n    let idsToResolve: number[] = [];\n\n    factions.forEach(faction => {\n      let {\n        corporation_id,\n        militia_corporation_id,\n        solar_system_id\n      } = faction;\n      if (corporation_id !== undefined) {\n        this._pushUnique(idsToResolve, corporation_id);\n      }\n      if (militia_corporation_id !== undefined) {\n        this._pushUnique(idsToResolve, militia_corporation_id);\n      }\n      if (solar_system_id !== undefined) {\n        this._pushUnique(idsToResolve, solar_system_id);\n      }\n    });\n\n    return idsToResolve;\n  }\n\n  private _assembleRepoFaction(\n    esiFaction: EsiFactionInterface,\n    indexedNames: {[key: string]: EsiUniverseNamesInterface}\n  ): RepoFactionInterface {\n    let {\n      corporation_id,\n      militia_corporation_id,\n      solar_system_id\n    } = esiFaction;\n\n    let corporation_name = undefined;\n    let militia_corporation_name = undefined;\n    let solar_system_name = undefined;\n\n    if (corporation_id !== undefined) {\n      corporation_name = indexedNames[corporation_id].name ?? \"#error\";\n    }\n    if (militia_corporation_id !== undefined) {\n      militia_corporation_name = indexedNames[militia_corporation_id].name ?? \"#error\";\n    }\n    if (solar_system_id !== undefined) {\n      solar_system_name = indexedNames[solar_system_id].name ?? \"#error\";\n    }\n\n    return {\n      ...esiFaction,\n      corporation_name: corporation_name,\n      militia_corporation_name: militia_corporation_name,\n      solar_system_name: solar_system_name\n    };\n  }\n}\n\nexport default FactionRepository;\n","import EsiClient from \"../EsiClient/EsiClient\";\nimport EsiErrorManagerInterface from \"../EsiErrorManager/EsiErrorManagerInterface\";\nimport EsiErrorManager from \"../EsiErrorManager/EsiErrorManager\";\nimport QueryFactoryInterface from \"../QueryFactory/QueryFactoryInterface\";\nimport QueryFactory from \"../QueryFactory/QueryFactory\";\nimport StatusCall from \"../Call/StatusCall/StatusCall\";\nimport StatusCallInterface from \"../Call/StatusCall/StatusCallInterface\";\nimport UniverseNamesCallInterface from \"../Call/UniverseNamesCall/UniverseNamesCallInterface\";\nimport UniverseNamesCall from \"../Call/UniverseNamesCall/UniverseNamesCall\";\nimport AllianceListCallInterface from \"../Call/AllianceListCall/AllianceListCallInterface\";\nimport AllianceListCall from \"../Call/AllianceListCall/AllianceListCall\";\nimport AllianceInfoCallInterface from \"../Call/AllianceInfoCall/AllianceInfoCallInterface\";\nimport AllianceInfoCall from \"../Call/AllianceInfoCall/AllianceInfoCall\";\nimport NameRepositoryInterface from \"../../repository/NameRepository/NameRepositoryInterface\";\nimport NameRepository from \"../../repository/NameRepository/NameRepository\";\nimport AllianceCorporationsCallInterface from \"../Call/AllianceCorporationsCall/AllianceCorporationsCallInterface\";\nimport AllianceCorporationsCall from \"../Call/AllianceCorporationsCall/AllianceCorporationsCall\";\nimport PublicSearchCallInterface from \"../Call/PublicSearchCall/PublicSearchCallInterface\";\nimport PublicSearchCall from \"../Call/PublicSearchCall/PublicSearchCall\";\nimport AllianceRepositoryInterface from \"../../repository/AllianceRepository/AllianceRepositoryInterface\";\nimport AllianceRepository from \"../../repository/AllianceRepository/AllianceRepository\";\nimport SearchRepositoryInterface from \"../../repository/SearchRepository/SearchRepositoryInterface\";\nimport SearchRepository from \"../../repository/SearchRepository/SearchRepository\";\nimport CharacterInfoCallInterface from \"../Call/CharacterInfoCall/CharacterInfoCallInterface\";\nimport CharacterInfoCall from \"../Call/CharacterInfoCall/CharacterInfoCall\";\nimport ConstellationInfoCallInterface from \"../Call/ConstellationInfoCall/ConstellationInfoCallInterface\";\nimport ConstellationInfoCall from \"../Call/ConstellationInfoCall/ConstellationInfoCall\";\nimport CorporationInfoCall from \"../Call/CorporationInfoCall/CorporationInfoCall\";\nimport TypeInfoCallInterface from \"../Call/TypeInfoCall/TypeInfoCallInterface\";\nimport TypeInfoCall from \"../Call/TypeInfoCall/TypeInfoCall\";\nimport RegionInfoCallInterface from \"../Call/RegionInfoCall/RegionInfoCallInterface\";\nimport RegionInfoCall from \"../Call/RegionInfoCall/RegionInfoCall\";\nimport SystemInfoCallInterface from \"../Call/SystemInfoCall/SystemInfoCallInterface\";\nimport SystemInfoCall from \"../Call/SystemInfoCall/SystemInfoCall\";\nimport StationInfoCall from \"../Call/StationInfoCall/StationInfoCall\";\nimport StationInfoCallInterface from \"../Call/StationInfoCall/StationInfoCallInterface\";\nimport FactionCallInterface from \"../Call/FactionCall/FactionCallInterface\";\nimport CorporationInfoCallInterface from \"../Call/CorporationInfoCall/CorporationInfoCallInterface\";\nimport FactionCall from \"../Call/FactionCall/FactionCall\";\nimport AncestryCallInterface from \"../Call/AncestryCall/AncestryCallInterface\";\nimport AncestryCall from \"../Call/AncestryCall/AncestryCall\";\nimport BloodlineCallInterface from \"../Call/BloodlineCall/BloodlineCallInterface\";\nimport BloodlineCall from \"../Call/BloodlineCall/BloodlineCall\";\nimport AncestryRepositoryInterface from \"../../repository/AncestryRepository/AncestryRepositoryInterface\";\nimport AncestryRepository from \"../../repository/AncestryRepository/AncestryRepository\";\nimport BloodlineRepositoryInterface from \"../../repository/BloodlineRepository/BloodlineRepositoryInterface\";\nimport BloodlineRepository from \"../../repository/BloodlineRepository/BloodlineRepository\";\nimport CharacterRepository from \"../../repository/CharacterRepository/CharacterRepository\";\nimport CharacterRepositoryInterface from \"../../repository/CharacterRepository/CharacterRepositoryInterface\";\nimport RaceCallInterface from \"../Call/RaceCall/RaceCallInterface\";\nimport RaceCall from \"../Call/RaceCall/RaceCall\";\nimport RaceRepositoryInterface from \"../../repository/RaceRepository/RaceRepositoryInterface\";\nimport RaceRepository from \"../../repository/RaceRepository/RaceRepository\";\nimport CharacterCorpHistoryCallInterface from \"../Call/CharacterCorpHistoryCall/CharacterCorpHistoryCallInterface\";\nimport CharacterCorpHistoryCall from \"../Call/CharacterCorpHistoryCall/CharacterCorpHistoryCall\";\nimport DateFormatterInterface from \"../DateFormatter/DateFormatterInterface\";\nimport DateFormatter from \"../DateFormatter/DateFormatter\";\nimport CorporationAllianceHistoryCallInterface\n  from \"../Call/CorporationAllianceHistoryCall/CorporationAllianceHistoryCallInterface\";\nimport CorporationAllianceHistoryCall from \"../Call/CorporationAllianceHistoryCall/CorporationAllianceHistoryCall\";\nimport CorporationRepositoryInterface from \"../../repository/CorporationRepository/CorporationRepositoryInterface\";\nimport CorporationRepository from \"../../repository/CorporationRepository/CorporationRepository\";\nimport FactionRepositoryInterface from \"../../repository/FactionRepository/FactionRepositoryInterface\";\nimport FactionRepository from \"../../repository/FactionRepository/FactionRepository\";\n\nclass Container {\n  private _esi: EsiClient | null = null;\n  private _esiErrorManager: EsiErrorManagerInterface | null = null;\n\n  get dateFormatter(): DateFormatterInterface {\n    return new DateFormatter();\n  }\n\n  get esi(): EsiClient {\n    if (this._esi === null) {\n      this._esi = new EsiClient(\n        (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n          return fetch(input, init);\n        },\n        this.esiErrorManager\n      );\n    }\n\n    return this._esi;\n  }\n\n  get esiErrorManager(): EsiErrorManagerInterface {\n    if (this._esiErrorManager === null) {\n      this._esiErrorManager = new EsiErrorManager();\n    }\n\n    return this._esiErrorManager;\n  }\n\n  get queryFactory(): QueryFactoryInterface {\n    return new QueryFactory();\n  }\n\n  // CALL //-------------------------------------------------------------------\n\n  get allianceCorporationsCall(): AllianceCorporationsCallInterface {\n    return new AllianceCorporationsCall(this.esi);\n  }\n\n  get allianceInfoCall(): AllianceInfoCallInterface {\n    return new AllianceInfoCall(this.esi);\n  }\n\n  get allianceListCall(): AllianceListCallInterface {\n    return new AllianceListCall(this.esi);\n  }\n\n  get ancestryCall(): AncestryCallInterface {\n    return new AncestryCall(this.esi);\n  }\n\n  get bloodlineCall(): BloodlineCallInterface {\n    return new BloodlineCall(this.esi);\n  }\n\n  get characterCorpHistoryCall(): CharacterCorpHistoryCallInterface {\n    return new CharacterCorpHistoryCall(this.esi);\n  }\n\n  get characterInfoCall(): CharacterInfoCallInterface {\n    return new CharacterInfoCall(this.esi);\n  }\n\n  get constellationInfoCall(): ConstellationInfoCallInterface {\n    return new ConstellationInfoCall(this.esi);\n  }\n\n  get corporationAllianceHistoryCall(): CorporationAllianceHistoryCallInterface {\n    return new CorporationAllianceHistoryCall(this.esi);\n  }\n\n  get corporationInfoCall(): CorporationInfoCallInterface {\n    return new CorporationInfoCall(this.esi);\n  }\n\n  get factionCall(): FactionCallInterface {\n    return new FactionCall(this.esi);\n  }\n\n  get publicSearchCall(): PublicSearchCallInterface {\n    return new PublicSearchCall(this.esi, this.queryFactory);\n  }\n\n  get raceCall(): RaceCallInterface {\n    return new RaceCall(this.esi);\n  }\n\n  get regionInfoCall(): RegionInfoCallInterface {\n    return new RegionInfoCall(this.esi);\n  }\n\n  get statusCall(): StatusCallInterface {\n    return new StatusCall(this.esi);\n  }\n\n  get stationInfoCall(): StationInfoCallInterface {\n    return new StationInfoCall(this.esi);\n  }\n\n  get systemInfoCall(): SystemInfoCallInterface {\n    return new SystemInfoCall(this.esi);\n  }\n\n  get typeInfoCall(): TypeInfoCallInterface {\n    return new TypeInfoCall(this.esi);\n  }\n\n  get universeNamesCall(): UniverseNamesCallInterface {\n    return new UniverseNamesCall(this.esi);\n  }\n\n  // CALL - END // ------------------------------------------------------------\n\n  // REPOSITORY //-------------------------------------------------------------\n\n  get allianceRepository(): AllianceRepositoryInterface {\n    return new AllianceRepository(\n      this.allianceListCall,\n      this.allianceInfoCall,\n      this.allianceCorporationsCall,\n      this.nameRepository\n    );\n  }\n\n  get ancestryRepository(): AncestryRepositoryInterface {\n    return new AncestryRepository(this.ancestryCall);\n  }\n\n  get bloodlineRepository(): BloodlineRepositoryInterface {\n    return new BloodlineRepository(\n      this.bloodlineCall,\n      this.raceRepository,\n      this.nameRepository\n    );\n  }\n\n  get characterRepository(): CharacterRepositoryInterface {\n    return new CharacterRepository(\n      this.characterInfoCall,\n      this.characterCorpHistoryCall,\n      this.ancestryRepository,\n      this.bloodlineRepository,\n      this.nameRepository,\n      this.raceRepository\n    );\n  }\n\n  get corporationRepository(): CorporationRepositoryInterface {\n    return new CorporationRepository(\n      this.corporationInfoCall,\n      this.corporationAllianceHistoryCall,\n      this.nameRepository\n    );\n  }\n\n  get factionRepository(): FactionRepositoryInterface {\n    return new FactionRepository(\n      this.factionCall,\n      this.nameRepository\n    );\n  }\n\n  get nameRepository(): NameRepositoryInterface {\n    return new NameRepository(this.universeNamesCall);\n  }\n\n  get raceRepository(): RaceRepositoryInterface {\n    return new RaceRepository(\n      this.raceCall,\n      this.nameRepository,\n      this.factionRepository\n    );\n  }\n\n  get searchRepository(): SearchRepositoryInterface {\n    return new SearchRepository(this.nameRepository, this.publicSearchCall);\n  }\n}\n\nexport default Container;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MyApp from \"./component/MyApp/MyApp\";\nimport store from \"./store\";\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from \"react-router-dom\";\nimport '@fontsource/roboto';\n\nimport { DepsProvider } from \"./context/DepsContext/DepsContext\";\nimport Container from \"./service/Container/Container\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <DepsProvider container={new Container()}>\n        <HashRouter>\n          <MyApp />\n        </HashRouter>\n      </DepsProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}