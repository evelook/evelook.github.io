{"version":3,"sources":["domain/Dashboard/AppBar/index.tsx","domain/Home/index.tsx","component/LoadingFullPage/index.tsx","component/ApiErrorFullPage/index.tsx","service/api/alliances-list/index.ts","service/api/universe-names/index.ts","service/provider/alliances-list/model.ts","service/provider/alliances-list/index.ts","domain/Alliance/index.tsx","domain/Dashboard/index.tsx","App.tsx","reportWebVitals.ts","feature/drawer/drawerSlice.ts","feature/theme/themeSlice.ts","reducer.ts","store.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","display","appBar","breakpoints","up","width","marginLeft","menuButton","marginRight","spacing","AppBar","title","children","Fragment","useTheme","classes","dispatch","useDispatch","toolbarVariant","useMediaQuery","position","className","Toolbar","variant","IconButton","color","aria-label","edge","onClick","type","Typography","noWrap","content","flexGrow","padding","toolbar","minHeight","Home","props","paragraph","circularProgress","textAlign","LoadingFullPage","CircularProgress","marginTop","ApiErrorFullPage","retry","Alert","severity","action","Button","size","AlliancesListCall","esi","this","params","CallBuilder","call","json","Esi","UniverseNamesCall","ids","fullIDs","chunks","length","push","splice","result","chunk","JSON","stringify","localResult","AlliancesList","names","list","forEach","name","id","AlliancesListProvider","allianceCaller","getAlliances","alliancesID","universeNamesCaller","getNames","make","AlliancesTable","createMuiTheme","getMuiTheme","overrides","MuiToolbar","MUIDataTableToolbar","actions","columns","label","options","customHeadRender","searchable","data","download","filter","print","responsive","selectableRows","selectableRowsHeader","selectableRowsHideCheckboxes","sort","sortOrder","direction","viewColumns","Alliance","useState","pageContent","setPageContent","load","setLoad","useEffect","getAlliancesArray","then","catch","error","console","drawer","flexShrink","alignItems","justifyContent","drawerPaper","logoText","fontFamily","join","fontWeight","darkModeToggle","nested","paddingLeft","ResponsiveDrawer","window","openBrowse","setOpenBrowse","mobileOpen","useSelector","state","darkMode","Divider","FormGroup","FormControlLabel","align","List","ListItem","button","ListItemIcon","ListItemText","primary","Collapse","in","timeout","unmountOnExit","component","disablePadding","Link","to","container","undefined","document","body","Hidden","lgUp","implementation","Drawer","anchor","open","onClose","paper","ModalProps","keepMounted","mdDown","exact","path","palette","App","ThemeProvider","maxSnack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","CssBaseline","getElementById"],"mappings":"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","file":"static/js/main.eac5b8a3.chunk.js","sourcesContent":["import React from 'react';\r\nimport MUIAppBar from '@material-ui/core/AppBar';\r\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { useDispatch } from 'react-redux';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n      root: {\r\n        display: 'flex',\r\n      },\r\n      appBar: {\r\n        [theme.breakpoints.up('lg')]: {\r\n          width: `calc(100% - ${drawerWidth}px)`,\r\n          marginLeft: drawerWidth,\r\n        },\r\n      },\r\n      menuButton: {\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up('lg')]: {\r\n          display: 'none',\r\n        },\r\n      },\r\n    }),\r\n);\r\n\r\nexport default function AppBar({\r\n  title = \"\",\r\n  children = <React.Fragment />\r\n}: {\r\n  title: string,\r\n  children?: React.ReactNode\r\n}) {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n\r\n  const dispatch = useDispatch();\r\n  const toolbarVariant = useMediaQuery(theme.breakpoints.up('sm')) ? \"dense\" : \"regular\";\r\n\r\n  return (\r\n      <MUIAppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar variant={toolbarVariant}>\r\n          <IconButton\r\n              color=\"inherit\"\r\n              aria-label=\"open drawer\"\r\n              edge=\"start\"\r\n              onClick={() => dispatch({type: 'drawer/mobileOpen'})}\r\n              className={classes.menuButton}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            {title}\r\n          </Typography>\r\n          {children}\r\n        </Toolbar>\r\n      </MUIAppBar>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport AppBar from '../Dashboard/AppBar';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n      content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n      },\r\n      // necessary for content to be below app bar\r\n      toolbar: {\r\n        minHeight: 56,\r\n        [theme.breakpoints.up('sm')]: {\r\n          minHeight: 48,\r\n        }\r\n      },\r\n    }),\r\n);\r\n\r\nexport default function Home(props: {}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n      <React.Fragment>\r\n        <AppBar title=\"Home\" />\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n          <Typography paragraph>\r\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\r\n            ut labore et dolore magna aliqua. Rhoncus dolor purus non enim praesent elementum\r\n            facilisis leo vel. Risus at ultrices mi tempus imperdiet. Semper risus in hendrerit\r\n            gravida rutrum quisque non tellus. Convallis convallis tellus id interdum velit laoreet id\r\n            donec ultrices. Odio morbi quis commodo odio aenean sed adipiscing. Amet nisl suscipit\r\n            adipiscing bibendum est ultricies integer quis. Cursus euismod quis viverra nibh cras.\r\n            Metus vulputate eu scelerisque felis imperdiet proin fermentum leo. Mauris commodo quis\r\n            imperdiet massa tincidunt. Cras tincidunt lobortis feugiat vivamus at augue. At augue eget\r\n            arcu dictum varius duis at consectetur lorem. Velit sed ullamcorper morbi tincidunt. Lorem\r\n            donec massa sapien faucibus et molestie ac.\r\n          </Typography>\r\n          <Typography paragraph>\r\n            Consequat mauris nunc congue nisi vitae suscipit. Fringilla est ullamcorper eget nulla\r\n            facilisi etiam dignissim diam. Pulvinar elementum integer enim neque volutpat ac\r\n            tincidunt. Ornare suspendisse sed nisi lacus sed viverra tellus. Purus sit amet volutpat\r\n            consequat mauris. Elementum eu facilisis sed odio morbi. Euismod lacinia at quis risus sed\r\n            vulputate odio. Morbi tincidunt ornare massa eget egestas purus viverra accumsan in. In\r\n            hendrerit gravida rutrum quisque non tellus orci ac. Pellentesque nec nam aliquam sem et\r\n            tortor. Habitant morbi tristique senectus et. Adipiscing elit duis tristique sollicitudin\r\n            nibh sit. Ornare aenean euismod elementum nisi quis eleifend. Commodo viverra maecenas\r\n            accumsan lacus vel facilisis. Nulla posuere sollicitudin aliquam ultrices sagittis orci a.\r\n          </Typography>\r\n        </main>\r\n      </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n      circularProgress: {\r\n        textAlign: 'center',\r\n      }\r\n    }),\r\n);\r\n\r\nexport default function LoadingFullPage() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n      <div className={classes.circularProgress}>\r\n        <CircularProgress />\r\n      </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n      root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n          marginTop: theme.spacing(2),\r\n        },\r\n      },\r\n    }),\r\n);\r\n\r\nexport default function ApiErrorFullPage({retry}: {retry: () => void}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n      <div className={classes.root}>\r\n        <Alert\r\n            severity=\"error\"\r\n            action={\r\n              <Button color=\"inherit\" size=\"small\" onClick={retry}>\r\n                RETRY\r\n              </Button>\r\n            }\r\n        >\r\n          Api error.\r\n        </Alert>\r\n      </div>\r\n  );\r\n}\r\n","import { Esi, CallBuilder } from 'esi-little-helper';\r\n\r\nclass AlliancesListCall {\r\n  private readonly esi: any;\r\n\r\n  constructor(esi: any) {\r\n    this.esi = esi;\r\n  }\r\n\r\n  /**\r\n   * @throws Error\r\n   */\r\n  public async getAlliances(): Promise<number[]> {\r\n    let params = new CallBuilder(\r\n        'GET',\r\n        `/v2/alliances/`,\r\n    );\r\n\r\n    return await this.esi.call(params).json();\r\n  }\r\n\r\n  public static make(esi: any = null): AlliancesListCall {\r\n    if (esi === null) {\r\n      esi = new Esi('evelook');\r\n    }\r\n\r\n    return new AlliancesListCall(esi);\r\n  }\r\n}\r\n\r\nexport default AlliancesListCall;\r\n","import { Esi, CallBuilder } from 'esi-little-helper';\r\nimport UniverseNameInterface from './interface';\r\n\r\nclass UniverseNamesCall {\r\n  private readonly esi: any;\r\n\r\n  constructor(esi: any) {\r\n    this.esi = esi;\r\n  }\r\n\r\n  public async getNames(ids: number[]): Promise<UniverseNameInterface[]> {\r\n    let fullIDs = [...ids];\r\n    let chunks = [];\r\n    while (fullIDs.length) {\r\n      chunks.push(fullIDs.splice(0, 999));\r\n    }\r\n\r\n    let result = [];\r\n    for (let chunk of chunks) {\r\n      let params = new CallBuilder(\r\n          'POST',\r\n          '/v3/universe/names/',\r\n          null,\r\n          JSON.stringify(chunk)\r\n      );\r\n      let localResult = await this.esi.call(params).json();\r\n      result.push(...localResult);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  public static make(esi: any = null): UniverseNamesCall {\r\n    if (esi === null) {\r\n      esi = new Esi('evelook');\r\n    }\r\n\r\n    return new UniverseNamesCall(esi);\r\n  }\r\n}\r\n\r\nexport default UniverseNamesCall;\r\n","import UniverseNameInterface from '../../api/universe-names/interface';\r\n\r\nclass AlliancesList {\r\n  [key: string]: UniverseNameInterface;\r\n\r\n  public static make(names: UniverseNameInterface[]): AlliancesList {\r\n    let list = new AlliancesList();\r\n    names.forEach(name => list[name.id] = name);\r\n\r\n    return list;\r\n  }\r\n}\r\n\r\nexport default AlliancesList;\r\n","import {CallBuilder, Esi} from 'esi-little-helper';\r\n\r\nimport AlliancesListCall from '../../api/alliances-list';\r\nimport UniverseNamesCall from '../../api/universe-names';\r\nimport AlliancesList from './model';\r\nimport UniverseNameInterface from '../../api/universe-names/interface';\r\n\r\nclass AlliancesListProvider {\r\n  private readonly esi: any;\r\n\r\n  constructor(esi: any) {\r\n    this.esi = esi;\r\n  }\r\n\r\n  /**\r\n   * @throws Error\r\n   */\r\n  public async getAlliancesArray(): Promise<UniverseNameInterface[]> {\r\n    let allianceCaller = new AlliancesListCall(this.esi);\r\n    let alliancesID = await allianceCaller.getAlliances();\r\n    let universeNamesCaller = new UniverseNamesCall(this.esi);\r\n\r\n    return await universeNamesCaller.getNames(alliancesID);\r\n  }\r\n\r\n  /**\r\n   * @throws Error\r\n   */\r\n  public async getAlliancesDictionary(): Promise<AlliancesList> {\r\n    let allianceCaller = new AlliancesListCall(this.esi);\r\n    let alliancesID = await allianceCaller.getAlliances();\r\n    let universeNamesCaller = new UniverseNamesCall(this.esi);\r\n    let names = await universeNamesCaller.getNames(alliancesID);\r\n\r\n    return AlliancesList.make(names);\r\n  }\r\n\r\n  public static make(esi: any = null): AlliancesListProvider {\r\n    if (esi === null) {\r\n      esi = new Esi('evelook');\r\n    }\r\n\r\n    return new AlliancesListProvider(esi);\r\n  }\r\n}\r\n\r\nexport default AlliancesListProvider;\r\n","import React, {useEffect, useState} from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { makeStyles, Theme, createStyles,   createMuiTheme,\r\n  MuiThemeProvider, } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Box from '@material-ui/core/Box';\r\nimport MUIDataTable, {MUIDataTableOptions} from 'mui-datatables';\r\n\r\nimport AppBar from '../Dashboard/AppBar';\r\nimport LoadingFullPage from '../../component/LoadingFullPage';\r\nimport ApiErrorFullPage from '../../component/ApiErrorFullPage';\r\nimport AlliancesListProvider from '../../service/provider/alliances-list';\r\nimport AlliancesList from '../../service/provider/alliances-list/model';\r\nimport UniverseNameInterface from '../../service/api/universe-names/interface';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n      content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n      },\r\n      // necessary for content to be below app bar\r\n      toolbar: {\r\n        minHeight: 56,\r\n        [theme.breakpoints.up('sm')]: {\r\n          minHeight: 48,\r\n        }\r\n      },\r\n    }),\r\n);\r\n\r\nlet Alliances = ({list}: {list: UniverseNameInterface[]}) => {\r\n  return (\r\n      <Paper>\r\n        <Grid item xs={12}>\r\n          <Box pt={2} pl={2}>\r\n            <TextField\r\n                id=\"standard-search\"\r\n                placeholder=\"Filter\"\r\n                type=\"search\"\r\n            />\r\n          </Box>\r\n          <List dense={false}>\r\n            {list.map(alliance => (\r\n                <ListItem button>\r\n                  <ListItemText\r\n                      primary={alliance.name}\r\n                  />\r\n                  <ListItemSecondaryAction>\r\n                    <IconButton edge=\"end\" aria-label=\"open\">\r\n                      <NavigateNextIcon />\r\n                    </IconButton>\r\n                  </ListItemSecondaryAction>\r\n                </ListItem>\r\n            ))}\r\n          </List>\r\n        </Grid>\r\n      </Paper>\r\n  );\r\n}\r\n\r\nlet AlliancesTable = ({list}: {list: UniverseNameInterface[]}) => {\r\n  let theme = createMuiTheme({});\r\n  let getMuiTheme = {\r\n      ...theme,\r\n      overrides: {\r\n        MuiToolbar: {\r\n          root: {\r\n            display: 'flex!important',\r\n          },\r\n        },\r\n        // @ts-ignore\r\n        MUIDataTableToolbar: {\r\n          actions: {\r\n            textAlign: 'right!important',\r\n          },\r\n        },\r\n      },\r\n  };\r\n\r\n  let columns = [\r\n    {\r\n      name: \"name\",\r\n      label: \"\",\r\n      options: {\r\n        customHeadRender: () => null,\r\n      }\r\n    },\r\n    {\r\n      name: \"id\",\r\n      options: {\r\n        display: false,\r\n        searchable: false,\r\n      },\r\n    },\r\n  ];\r\n\r\n  let options: MUIDataTableOptions = {\r\n    download: false,\r\n    filter: false,\r\n    print: false,\r\n    responsive: \"standard\",\r\n    selectableRows: \"single\",\r\n    selectableRowsHeader: false,\r\n    selectableRowsHideCheckboxes: true,\r\n    sort: false,\r\n    sortOrder: { name: 'name', direction: 'asc' },\r\n    viewColumns: false,\r\n  };\r\n\r\n  return (\r\n      <MuiThemeProvider theme={getMuiTheme}>\r\n        <MUIDataTable\r\n            columns={columns}\r\n            data={list}\r\n            title={\"\"}\r\n            options={options}\r\n        />\r\n      </MuiThemeProvider>\r\n  );\r\n}\r\n\r\nexport default function Alliance() {\r\n  let classes = useStyles();\r\n  let [pageContent, setPageContent] = useState(<LoadingFullPage />);\r\n  let [load, setLoad] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (!load) {\r\n      return;\r\n    }\r\n\r\n    setPageContent(<LoadingFullPage />);\r\n    let alliancesListProvider = AlliancesListProvider.make();\r\n    alliancesListProvider.getAlliancesArray()\r\n      .then(data => {\r\n        setLoad(false);\r\n        setPageContent(<AlliancesTable list={data} />);\r\n      })\r\n      .catch(error => {\r\n        setLoad(false);\r\n        console.error(error);\r\n        setPageContent(<ApiErrorFullPage retry={retry}/>);\r\n      });\r\n  }, [load]);\r\n\r\n  let retry = () => setLoad(true);\r\n\r\n  return (\r\n      <React.Fragment>\r\n        <AppBar title=\"Alliance\" />\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n          {pageContent}\r\n        </main>\r\n      </React.Fragment>\r\n  );\r\n}\r\n","import React, {useState} from 'react';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport \"typeface-rajdhani\";\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport MUISwitch from '@material-ui/core/Switch';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport LanguageIcon from '@material-ui/icons/Language';\r\nimport { Route, Switch } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Home from '../Home';\r\nimport Alliance from '../Alliance';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n      root: {\r\n        display: 'flex',\r\n      },\r\n      drawer: {\r\n        [theme.breakpoints.up('lg')]: {\r\n          width: drawerWidth,\r\n          flexShrink: 0,\r\n        },\r\n      },\r\n      // necessary for content to be below app bar\r\n      toolbar: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        minHeight: 56,\r\n        [theme.breakpoints.up('sm')]: {\r\n          minHeight: 48,\r\n        }\r\n      },\r\n      drawerPaper: {\r\n        width: drawerWidth,\r\n      },\r\n      logoText: {\r\n        fontFamily: [\r\n          'Rajdhani',\r\n          'sans-serif',\r\n        ].join(','),\r\n        fontWeight: 600,\r\n      },\r\n      darkModeToggle: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        minHeight: 48,\r\n      },\r\n      nested: {\r\n        paddingLeft: theme.spacing(4),\r\n      },\r\n    }),\r\n);\r\n\r\ninterface Props {\r\n  /**\r\n   * Injected by the documentation to work in an iframe.\r\n   * You won't need it on your project.\r\n   */\r\n  window?: () => Window;\r\n}\r\n\r\nexport default function ResponsiveDrawer(props: Props) {\r\n  const { window } = props;\r\n  const [openBrowse, setOpenBrowse] = useState(true);\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  // FIXME\r\n  // @ts-ignore\r\n  const mobileOpen = useSelector(state => state.drawer.mobileOpen);\r\n  // @ts-ignore\r\n  const darkMode = useSelector(state => state.theme.darkMode);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleOpenBrowse = () => {\r\n    setOpenBrowse(!openBrowse);\r\n  }\r\n\r\n  const darkModeToggle = (\r\n      <React.Fragment>\r\n        <Divider />\r\n        <FormGroup row className={classes.darkModeToggle}>\r\n          <FormControlLabel\r\n              control={\r\n                <MUISwitch\r\n                    checked={darkMode}\r\n                    onChange={() => dispatch({type: 'theme/changeMode'})}\r\n                    name=\"checkedB\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                />\r\n              }\r\n              label=\"Dark mode\"\r\n          />\r\n        </FormGroup>\r\n      </React.Fragment>\r\n  );\r\n\r\n  const drawer = (\r\n      <div>\r\n        <div className={classes.toolbar}>\r\n          <Typography variant=\"h4\" align=\"center\" className={classes.logoText}>\r\n            evelook\r\n          </Typography>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          <ListItem button onClick={handleOpenBrowse}>\r\n            <ListItemIcon>\r\n              <LanguageIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Browse\" />\r\n            {openBrowse ? <ExpandLess /> : <ExpandMore />}\r\n          </ListItem>\r\n          <Collapse in={openBrowse} timeout=\"auto\" unmountOnExit>\r\n            <List component=\"div\" disablePadding>\r\n              <ListItem button className={classes.nested} component={Link} to=\"/alliance\">\r\n                <ListItemText primary=\"Alliances\" />\r\n              </ListItem>\r\n              <ListItem button className={classes.nested}>\r\n                <ListItemText primary=\"Characters\" />\r\n              </ListItem>\r\n              <ListItem button className={classes.nested}>\r\n                <ListItemText primary=\"Corporations\" />\r\n              </ListItem>\r\n              <ListItem button className={classes.nested}>\r\n                <ListItemText primary=\"Incursions\" />\r\n              </ListItem>\r\n            </List>\r\n          </Collapse>\r\n        </List>\r\n        {\r\n          //darkModeToggle\r\n        }\r\n      </div>\r\n  );\r\n\r\n  const container = window !== undefined ? () => window().document.body : undefined;\r\n\r\n  return (\r\n      <div className={classes.root}>\r\n        <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n          {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n          <Hidden lgUp implementation=\"css\">\r\n            <Drawer\r\n                container={container}\r\n                variant=\"temporary\"\r\n                anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n                open={mobileOpen}\r\n                onClose={() => dispatch({type: 'drawer/mobileClose'})}\r\n                classes={{\r\n                  paper: classes.drawerPaper,\r\n                }}\r\n                ModalProps={{\r\n                  keepMounted: true, // Better open performance on mobile.\r\n                }}\r\n            >\r\n              {drawer}\r\n            </Drawer>\r\n          </Hidden>\r\n          <Hidden mdDown implementation=\"css\">\r\n            <Drawer\r\n                classes={{\r\n                  paper: classes.drawerPaper,\r\n                }}\r\n                variant=\"permanent\"\r\n                open\r\n            >\r\n              {drawer}\r\n            </Drawer>\r\n          </Hidden>\r\n        </nav>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Home />\r\n          </Route>\r\n          <Route path=\"/alliance\">\r\n            <Alliance />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport Dashboard from './domain/Dashboard';\nimport { useSelector } from 'react-redux';\nimport { SnackbarProvider } from 'notistack';\n\nconst theme = (darkMode: boolean) => createMuiTheme({\n  palette: {\n    type: darkMode ? 'dark' : 'light',\n  },\n});\n\nexport default function App() {\n  // @ts-ignore\n  const darkMode = useSelector(state => state.theme.darkMode);\n\n  return (\n    <ThemeProvider theme={theme(darkMode)}>\n      <SnackbarProvider maxSnack={3}>\n        <Dashboard />\n      </SnackbarProvider>\n    </ThemeProvider>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n  mobileOpen: false,\r\n}\r\n\r\nexport default function drawerReducer(\r\n    state = initialState,\r\n    action: {type: string, payload?: any}\r\n) {\r\n  switch (action.type) {\r\n    case 'drawer/mobileOpen': {\r\n      return {\r\n        ...state,\r\n        mobileOpen: true,\r\n      };\r\n    }\r\n    case 'drawer/mobileClose': {\r\n      return {\r\n        ...state,\r\n        mobileOpen: false\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","const initialState = {\r\n  darkMode: false,\r\n}\r\n\r\nexport default function themeReducer(\r\n    state = initialState,\r\n    action: {type: string, payload?: any}\r\n) {\r\n  switch (action.type) {\r\n    case 'theme/changeMode': {\r\n      return {\r\n        ...state,\r\n        darkMode: !state.darkMode,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {combineReducers} from 'redux';\r\n\r\nimport drawerReducer from './feature/drawer/drawerSlice';\r\nimport themeReducer from './feature/theme/themeSlice';\r\n\r\nconst rootReducer = combineReducers({\r\n  // keys of this object will become the keys of the root state object\r\n  drawer: drawerReducer,\r\n  theme: themeReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import {createStore} from 'redux';\r\n\r\nimport rootReducer from './reducer';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { HashRouter } from 'react-router-dom';\nimport 'fontsource-roboto';\n\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <CssBaseline />\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}